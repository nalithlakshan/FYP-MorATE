
main_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a58c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a89c  0800a89c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a89c  0800a89c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a0  0800a8a0  0001a8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005be4  200001e0  0800aa84  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005dc4  0800aa84  00025dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a90  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045a5  00000000  00000000  00041c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00046240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00047510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f093  00000000  00000000  000485f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b8a  00000000  00000000  00067683  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8ad  00000000  00000000  0007d20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db0  00000000  00000000  00117b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a758 	.word	0x0800a758

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e4 	.word	0x200001e4
 8000220:	0800a758 	.word	0x0800a758

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <f_reset>:
 *      Author: Thilina
 */
#include "fpga.h"

void f_reset()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_ADDR0_GPIO_Port, F_ADDR0_Pin, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	4817      	ldr	r0, [pc, #92]	; (800029c <f_reset+0x68>)
 8000240:	f001 fed9 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR1_GPIO_Port, F_ADDR1_Pin, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <f_reset+0x68>)
 800024c:	f001 fed3 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR2_GPIO_Port, F_ADDR2_Pin, 0);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000256:	4811      	ldr	r0, [pc, #68]	; (800029c <f_reset+0x68>)
 8000258:	f001 fecd 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR3_GPIO_Port, F_ADDR3_Pin, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	480f      	ldr	r0, [pc, #60]	; (80002a0 <f_reset+0x6c>)
 8000262:	f001 fec8 	bl	8001ff6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(F_CS0_GPIO_Port, F_CS0_Pin, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	480e      	ldr	r0, [pc, #56]	; (80002a4 <f_reset+0x70>)
 800026c:	f001 fec3 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_CS1_GPIO_Port, F_CS1_Pin, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	2110      	movs	r1, #16
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <f_reset+0x70>)
 8000276:	f001 febe 	bl	8001ff6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, 1);
 800027a:	2201      	movs	r2, #1
 800027c:	2104      	movs	r1, #4
 800027e:	4809      	ldr	r0, [pc, #36]	; (80002a4 <f_reset+0x70>)
 8000280:	f001 feb9 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, 0);
 8000284:	2200      	movs	r2, #0
 8000286:	2104      	movs	r1, #4
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <f_reset+0x70>)
 800028a:	f001 feb4 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	2104      	movs	r1, #4
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <f_reset+0x70>)
 8000294:	f001 feaf 	bl	8001ff6 <HAL_GPIO_WritePin>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011c00 	.word	0x40011c00
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	40010800 	.word	0x40010800

080002a8 <f_request>:

void f_request(int req)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	int bit0 = (req & 0b1)>0? 1:0;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	bfcc      	ite	gt
 80002ba:	2301      	movgt	r3, #1
 80002bc:	2300      	movle	r3, #0
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	617b      	str	r3, [r7, #20]
	int bit1 = (req & 0b10)>0? 1:0;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	bfcc      	ite	gt
 80002cc:	2301      	movgt	r3, #1
 80002ce:	2300      	movle	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	613b      	str	r3, [r7, #16]
	int bit2 = (req & 0b100)>0? 1:0;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0304 	and.w	r3, r3, #4
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bfcc      	ite	gt
 80002de:	2301      	movgt	r3, #1
 80002e0:	2300      	movle	r3, #0
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(F_REQ0_GPIO_Port,F_REQ0_Pin,bit0);
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	461a      	mov	r2, r3
 80002ec:	2102      	movs	r1, #2
 80002ee:	480f      	ldr	r0, [pc, #60]	; (800032c <f_request+0x84>)
 80002f0:	f001 fe81 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_REQ1_GPIO_Port,F_REQ1_Pin,bit1);
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	461a      	mov	r2, r3
 80002fa:	2101      	movs	r1, #1
 80002fc:	480b      	ldr	r0, [pc, #44]	; (800032c <f_request+0x84>)
 80002fe:	f001 fe7a 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_REQ2_GPIO_Port,F_REQ2_Pin,bit2);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	2120      	movs	r1, #32
 800030a:	4809      	ldr	r0, [pc, #36]	; (8000330 <f_request+0x88>)
 800030c:	f001 fe73 	bl	8001ff6 <HAL_GPIO_WritePin>

	//process request after every request
	HAL_GPIO_WritePin(F_PROCESS_REQ_GPIO_Port, F_PROCESS_REQ_Pin, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	2102      	movs	r1, #2
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <f_request+0x8c>)
 8000316:	f001 fe6e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_PROCESS_REQ_GPIO_Port, F_PROCESS_REQ_Pin, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <f_request+0x8c>)
 8000320:	f001 fe69 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 8000324:	bf00      	nop
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40010c00 	.word	0x40010c00
 8000330:	40011000 	.word	0x40011000
 8000334:	40010800 	.word	0x40010800

08000338 <f_address>:

void f_address(int address)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	int bit0 = (address & 0b1)>0? 1:0;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	bfcc      	ite	gt
 800034a:	2301      	movgt	r3, #1
 800034c:	2300      	movle	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	617b      	str	r3, [r7, #20]
	int bit1 = (address & 0b10)>0? 1:0;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	bfcc      	ite	gt
 800035c:	2301      	movgt	r3, #1
 800035e:	2300      	movle	r3, #0
 8000360:	b2db      	uxtb	r3, r3
 8000362:	613b      	str	r3, [r7, #16]
	int bit2 = (address & 0b100)>0? 1:0;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	2b00      	cmp	r3, #0
 800036c:	bfcc      	ite	gt
 800036e:	2301      	movgt	r3, #1
 8000370:	2300      	movle	r3, #0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	60fb      	str	r3, [r7, #12]
	int bit3 = (address & 0b1000)>0? 1:0;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	2b00      	cmp	r3, #0
 800037e:	bfcc      	ite	gt
 8000380:	2301      	movgt	r3, #1
 8000382:	2300      	movle	r3, #0
 8000384:	b2db      	uxtb	r3, r3
 8000386:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(F_ADDR0_GPIO_Port, F_ADDR0_Pin, bit0);
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <f_address+0x98>)
 8000394:	f001 fe2f 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR1_GPIO_Port, F_ADDR1_Pin, bit1);
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <f_address+0x98>)
 80003a4:	f001 fe27 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR2_GPIO_Port, F_ADDR2_Pin, bit2);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <f_address+0x98>)
 80003b4:	f001 fe1f 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_ADDR3_GPIO_Port, F_ADDR3_Pin, bit3);
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	461a      	mov	r2, r3
 80003be:	2104      	movs	r1, #4
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <f_address+0x9c>)
 80003c2:	f001 fe18 	bl	8001ff6 <HAL_GPIO_WritePin>

}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40011c00 	.word	0x40011c00
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <f_cs>:


void f_cs(int device)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	int bit0 = (device & 0b1)>0? 1:0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bfcc      	ite	gt
 80003ea:	2301      	movgt	r3, #1
 80003ec:	2300      	movle	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	60fb      	str	r3, [r7, #12]
	int bit1 = (device & 0b10)>0? 1:0;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	bfcc      	ite	gt
 80003fc:	2301      	movgt	r3, #1
 80003fe:	2300      	movle	r3, #0
 8000400:	b2db      	uxtb	r3, r3
 8000402:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(F_CS0_GPIO_Port,F_CS0_Pin, bit0);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	2108      	movs	r1, #8
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <f_cs+0x50>)
 800040e:	f001 fdf2 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_CS1_GPIO_Port,F_CS1_Pin, bit1);
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	2110      	movs	r1, #16
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <f_cs+0x50>)
 800041c:	f001 fdeb 	bl	8001ff6 <HAL_GPIO_WritePin>

}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010800 	.word	0x40010800

0800042c <f_set_frequency>:
{

}

void f_set_frequency(int freq)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CLKBUF_EN_GPIO_Port, CLKBUF_EN_Pin, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <f_set_frequency+0x2c>)
 800043a:	f001 fddc 	bl	8001ff6 <HAL_GPIO_WritePin>
	clk_init();
 800043e:	f000 fedb 	bl	80011f8 <clk_init>
	clk_set_frequency(0,freq);
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	2000      	movs	r0, #0
 8000446:	f000 fee5 	bl	8001214 <clk_set_frequency>
	clk_enable(0);
 800044a:	2000      	movs	r0, #0
 800044c:	f001 f878 	bl	8001540 <clk_enable>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40012000 	.word	0x40012000

0800045c <f_set_io_voltage>:


void f_set_io_voltage(int code)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
	setChannelValue(MCP4728_CHANNEL_A, code,MCP4728_VREF_INTERNAL,MCP4728_GAIN_1X,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	b299      	uxth	r1, r3
 8000468:	2301      	movs	r3, #1
 800046a:	9301      	str	r3, [sp, #4]
 800046c:	2300      	movs	r3, #0
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2300      	movs	r3, #0
 8000472:	2201      	movs	r2, #1
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fabd 	bl	80009f4 <setChannelValue>
			MCP4728_PD_MODE_NORMAL,true);
	setChannelValue(MCP4728_CHANNEL_B, code,MCP4728_VREF_INTERNAL,MCP4728_GAIN_1X,
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	b299      	uxth	r1, r3
 800047e:	2301      	movs	r3, #1
 8000480:	9301      	str	r3, [sp, #4]
 8000482:	2300      	movs	r3, #0
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2300      	movs	r3, #0
 8000488:	2201      	movs	r2, #1
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fab2 	bl	80009f4 <setChannelValue>
			MCP4728_PD_MODE_NORMAL,true);
	setChannelValue(MCP4728_CHANNEL_C, code,MCP4728_VREF_INTERNAL,MCP4728_GAIN_1X,
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	b299      	uxth	r1, r3
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2300      	movs	r3, #0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2300      	movs	r3, #0
 800049e:	2201      	movs	r2, #1
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 faa7 	bl	80009f4 <setChannelValue>
			MCP4728_PD_MODE_NORMAL,true);
	setChannelValue(MCP4728_CHANNEL_D, code,MCP4728_VREF_INTERNAL,MCP4728_GAIN_1X,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	b299      	uxth	r1, r3
 80004aa:	2301      	movs	r3, #1
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2300      	movs	r3, #0
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2300      	movs	r3, #0
 80004b4:	2201      	movs	r2, #1
 80004b6:	2003      	movs	r0, #3
 80004b8:	f000 fa9c 	bl	80009f4 <setChannelValue>
			MCP4728_PD_MODE_NORMAL,true);
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0320 	add.w	r3, r7, #32
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b9d      	ldr	r3, [pc, #628]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a9c      	ldr	r2, [pc, #624]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b9a      	ldr	r3, [pc, #616]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0310 	and.w	r3, r3, #16
 80004ec:	61fb      	str	r3, [r7, #28]
 80004ee:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b97      	ldr	r3, [pc, #604]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a96      	ldr	r2, [pc, #600]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b94      	ldr	r3, [pc, #592]	; (8000750 <MX_GPIO_Init+0x28c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b91      	ldr	r3, [pc, #580]	; (8000750 <MX_GPIO_Init+0x28c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a90      	ldr	r2, [pc, #576]	; (8000750 <MX_GPIO_Init+0x28c>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b8e      	ldr	r3, [pc, #568]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000520:	4b8b      	ldr	r3, [pc, #556]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a8a      	ldr	r2, [pc, #552]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b88      	ldr	r3, [pc, #544]	; (8000750 <MX_GPIO_Init+0x28c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000538:	4b85      	ldr	r3, [pc, #532]	; (8000750 <MX_GPIO_Init+0x28c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a84      	ldr	r2, [pc, #528]	; (8000750 <MX_GPIO_Init+0x28c>)
 800053e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b82      	ldr	r3, [pc, #520]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000550:	4b7f      	ldr	r3, [pc, #508]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a7e      	ldr	r2, [pc, #504]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b7c      	ldr	r3, [pc, #496]	; (8000750 <MX_GPIO_Init+0x28c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000568:	4b79      	ldr	r3, [pc, #484]	; (8000750 <MX_GPIO_Init+0x28c>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a78      	ldr	r2, [pc, #480]	; (8000750 <MX_GPIO_Init+0x28c>)
 800056e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b76      	ldr	r3, [pc, #472]	; (8000750 <MX_GPIO_Init+0x28c>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F_PROCESS_REQ_Pin|F_RST_Pin|F_CS0_Pin|F_CS1_Pin
 8000580:	2200      	movs	r2, #0
 8000582:	f248 111e 	movw	r1, #33054	; 0x811e
 8000586:	4873      	ldr	r0, [pc, #460]	; (8000754 <MX_GPIO_Init+0x290>)
 8000588:	f001 fd35 	bl	8001ff6 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|F_REQ2_Pin|LED1_Pin|LED2_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8000592:	4871      	ldr	r0, [pc, #452]	; (8000758 <MX_GPIO_Init+0x294>)
 8000594:	f001 fd2f 	bl	8001ff6 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED4_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_REQ1_Pin|F_REQ0_Pin|F_ADDR3_Pin|SHCP_Pin
 8000598:	2200      	movs	r2, #0
 800059a:	f24a 2107 	movw	r1, #41479	; 0xa207
 800059e:	486f      	ldr	r0, [pc, #444]	; (800075c <MX_GPIO_Init+0x298>)
 80005a0:	f001 fd29 	bl	8001ff6 <HAL_GPIO_WritePin>
                          |DIN_Pin|PW_CARD_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, F_ADDR2_Pin|F_ADDR1_Pin|F_ADDR0_Pin|SH_RST_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80005aa:	486d      	ldr	r0, [pc, #436]	; (8000760 <MX_GPIO_Init+0x29c>)
 80005ac:	f001 fd23 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	486b      	ldr	r0, [pc, #428]	; (8000764 <MX_GPIO_Init+0x2a0>)
 80005b8:	f001 fd1d 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STCP_Pin|OE_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005c2:	4869      	ldr	r0, [pc, #420]	; (8000768 <MX_GPIO_Init+0x2a4>)
 80005c4:	f001 fd17 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CLKBUF_EN_Pin|BUZZER_Pin|LED_STM_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f248 1104 	movw	r1, #33028	; 0x8104
 80005ce:	4867      	ldr	r0, [pc, #412]	; (800076c <MX_GPIO_Init+0x2a8>)
 80005d0:	f001 fd11 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = F_REQ_DONE_Pin|SW1_Pin;
 80005d4:	f241 0308 	movw	r3, #4104	; 0x1008
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4619      	mov	r1, r3
 80005e8:	485b      	ldr	r0, [pc, #364]	; (8000758 <MX_GPIO_Init+0x294>)
 80005ea:	f001 fb83 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = F_PROCESS_REQ_Pin|F_RST_Pin|F_CS0_Pin|F_CS1_Pin
 80005ee:	f248 131e 	movw	r3, #33054	; 0x811e
 80005f2:	623b      	str	r3, [r7, #32]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4619      	mov	r1, r3
 8000606:	4853      	ldr	r0, [pc, #332]	; (8000754 <MX_GPIO_Init+0x290>)
 8000608:	f001 fb74 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|F_REQ2_Pin|LED1_Pin|LED2_Pin
 800060c:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8000610:	623b      	str	r3, [r7, #32]
                          |LED3_Pin|LED4_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2302      	movs	r3, #2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4619      	mov	r1, r3
 8000624:	484c      	ldr	r0, [pc, #304]	; (8000758 <MX_GPIO_Init+0x294>)
 8000626:	f001 fb65 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = F_REQ1_Pin|F_REQ0_Pin|F_ADDR3_Pin|SHCP_Pin
 800062a:	f24a 0307 	movw	r3, #40967	; 0xa007
 800062e:	623b      	str	r3, [r7, #32]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4619      	mov	r1, r3
 8000642:	4846      	ldr	r0, [pc, #280]	; (800075c <MX_GPIO_Init+0x298>)
 8000644:	f001 fb56 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = F_ADDR2_Pin|F_ADDR1_Pin|F_ADDR0_Pin|SH_RST_Pin;
 8000648:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4619      	mov	r1, r3
 8000660:	483f      	ldr	r0, [pc, #252]	; (8000760 <MX_GPIO_Init+0x29c>)
 8000662:	f001 fb47 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 8000666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2302      	movs	r3, #2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4619      	mov	r1, r3
 800067e:	4839      	ldr	r0, [pc, #228]	; (8000764 <MX_GPIO_Init+0x2a0>)
 8000680:	f001 fb38 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOUT_Pin;
 8000684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DOUT_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4619      	mov	r1, r3
 8000698:	4830      	ldr	r0, [pc, #192]	; (800075c <MX_GPIO_Init+0x298>)
 800069a:	f001 fb2b 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STCP_Pin|OE_Pin;
 800069e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4619      	mov	r1, r3
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <MX_GPIO_Init+0x2a4>)
 80006b8:	f001 fb1c 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CLKBUF_EN_Pin|BUZZER_Pin;
 80006bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4619      	mov	r1, r3
 80006d4:	4825      	ldr	r0, [pc, #148]	; (800076c <MX_GPIO_Init+0x2a8>)
 80006d6:	f001 fb0d 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW4_Pin;
 80006da:	2307      	movs	r3, #7
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	; (8000768 <MX_GPIO_Init+0x2a4>)
 80006ee:	f001 fb01 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = new_ic_switch_Pin;
 80006f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(new_ic_switch_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4619      	mov	r1, r3
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <MX_GPIO_Init+0x2a8>)
 8000708:	f001 faf4 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STM_Pin;
 800070c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	2301      	movs	r3, #1
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2302      	movs	r3, #2
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LED_STM_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4619      	mov	r1, r3
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_GPIO_Init+0x2a8>)
 8000726:	f001 fae5 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PW_CARD_RESET_Pin;
 800072a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000730:	2311      	movs	r3, #17
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2302      	movs	r3, #2
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PW_CARD_RESET_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_GPIO_Init+0x298>)
 8000744:	f001 fad6 	bl	8001cf4 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800
 8000758:	40011000 	.word	0x40011000
 800075c:	40010c00 	.word	0x40010c00
 8000760:	40011c00 	.word	0x40011c00
 8000764:	40011800 	.word	0x40011800
 8000768:	40011400 	.word	0x40011400
 800076c:	40012000 	.word	0x40012000

08000770 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f001 fc3b 	bl	8002028 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f915 	bl	80009e6 <Error_Handler>
  }

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20004450 	.word	0x20004450
 80007c4:	40005400 	.word	0x40005400
 80007c8:	000186a0 	.word	0x000186a0

080007cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C2_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_I2C2_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C2_Init+0x50>)
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_I2C2_Init+0x58>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C2_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_I2C2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_I2C2_Init+0x50>)
 80007ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_I2C2_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2C2_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_I2C2_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2C2_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2C2_Init+0x50>)
 800080a:	f001 fc0d 	bl	8002028 <HAL_I2C_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 f8e7 	bl	80009e6 <Error_Handler>
  }

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200044a4 	.word	0x200044a4
 8000820:	40005800 	.word	0x40005800
 8000824:	000186a0 	.word	0x000186a0

08000828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <HAL_I2C_MspInit+0xc8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d124      	bne.n	8000892 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000860:	23c0      	movs	r3, #192	; 0xc0
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000864:	2312      	movs	r3, #18
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	4619      	mov	r1, r3
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <HAL_I2C_MspInit+0xd0>)
 8000874:	f001 fa3e 	bl	8001cf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 800087e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000890:	e029      	b.n	80008e6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <HAL_I2C_MspInit+0xd4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d124      	bne.n	80008e6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ba:	2312      	movs	r3, #18
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <HAL_I2C_MspInit+0xd0>)
 80008ca:	f001 fa13 	bl	8001cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_I2C_MspInit+0xcc>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010c00 	.word	0x40010c00
 80008fc:	40005800 	.word	0x40005800

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f001 f864 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f811 	bl	800092e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f7ff fdda 	bl	80004c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000910:	f008 fdf6 	bl	8009500 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000914:	f000 fe8a 	bl	800162c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000918:	f7ff ff2a 	bl	8000770 <MX_I2C1_Init>
  MX_I2C2_Init();
 800091c:	f7ff ff56 	bl	80007cc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000920:	f000 ffba 	bl	8001898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	setup();
 8000924:	f000 fafc 	bl	8000f20 <setup>
//	  HAL_Delay(500);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 8000928:	f000 fb46 	bl	8000fb8 <main_loop>
 800092c:	e7fc      	b.n	8000928 <main+0x28>

0800092e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b096      	sub	sp, #88	; 0x58
 8000932:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000938:	2228      	movs	r2, #40	; 0x28
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f009 faf1 	bl	8009f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000962:	2301      	movs	r3, #1
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800097e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000982:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fe8d 	bl	80046a8 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000994:	f000 f827 	bl	80009e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80009a0:	2390      	movs	r3, #144	; 0x90
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 f8f8 	bl	8004ba8 <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009be:	f000 f812 	bl	80009e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009c2:	2310      	movs	r3, #16
 80009c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fa86 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009da:	f000 f804 	bl	80009e6 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3758      	adds	r7, #88	; 0x58
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <setChannelValue>:
#include <mcp4728.h>
#include <stdbool.h>
#include "i2c.h"
bool setChannelValue(
    MCP4728_channel_t channel, uint16_t new_value, MCP4728_vref_t new_vref,
    MCP4728_gain_t new_gain, MCP4728_pd_mode_t new_pd_mode, bool udac) {
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	4604      	mov	r4, r0
 80009fc:	4608      	mov	r0, r1
 80009fe:	4611      	mov	r1, r2
 8000a00:	461a      	mov	r2, r3
 8000a02:	4623      	mov	r3, r4
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	4603      	mov	r3, r0
 8000a08:	80bb      	strh	r3, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	70fb      	strb	r3, [r7, #3]

  uint8_t output_buffer[3];

  // build the setter header/ "address"
  // 0 1 0 0 0 DAC1 DAC0 UDAC[A]
  uint8_t sequential_write_cmd = MCP4728_MULTI_IR_CMD;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	73fb      	strb	r3, [r7, #15]
  sequential_write_cmd |= (channel << 1);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	b25a      	sxtb	r2, r3
 8000a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	73fb      	strb	r3, [r7, #15]
  sequential_write_cmd |= udac;
 8000a26:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	73fb      	strb	r3, [r7, #15]

  output_buffer[0] = sequential_write_cmd;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	723b      	strb	r3, [r7, #8]
  // VREF PD1 PD0 Gx D11 D10 D9 D8 [A] D7 D6 D5 D4 D3 D2 D1 D0 [A]
  new_value |= (new_vref << 15);
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	80bb      	strh	r3, [r7, #4]
  new_value |= (new_pd_mode << 13);
 8000a44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a48:	035b      	lsls	r3, r3, #13
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	80bb      	strh	r3, [r7, #4]
  new_value |= (new_gain << 12);
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	031b      	lsls	r3, r3, #12
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	80bb      	strh	r3, [r7, #4]

  output_buffer[1] = new_value >> 8;
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	727b      	strb	r3, [r7, #9]
  output_buffer[2] = new_value & 0xFF;
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	72bb      	strb	r3, [r7, #10]

  uint8_t st=HAL_I2C_Master_Transmit(&hi2c2, 0x60<<1, output_buffer, 3, 1);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2303      	movs	r3, #3
 8000a80:	21c0      	movs	r1, #192	; 0xc0
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <setChannelValue+0xac>)
 8000a84:	f001 fc08 	bl	8002298 <HAL_I2C_Master_Transmit>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	73bb      	strb	r3, [r7, #14]

  return st;
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	200044a4 	.word	0x200044a4

08000aa4 <request_from_pin_card>:
 *      Author: Thilina
 */
#include "pin_card.h"
#define DEBUG_REQUEST_FROM_PIN_CARD

void request_from_pin_card(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af02      	add	r7, sp, #8
      ----------------------------------------------------------
      |  S   |   ID  |  COMMAND  |  VALUE     |   PAYLOAD_SIZE  |   E   |
      ----------------------------------------------------------
*/
	//request from PIN_CARD_A
	if(num_req_A > 0)
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <request_from_pin_card+0xa0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dd3b      	ble.n	8000b2a <request_from_pin_card+0x86>
	{
		request_status = HAL_I2C_Master_Receive(&hi2c1, PIN_CARD_A_ADDR<<1, header_to_ui, 10, 100);
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <request_from_pin_card+0xa4>)
 8000aba:	2124      	movs	r1, #36	; 0x24
 8000abc:	4823      	ldr	r0, [pc, #140]	; (8000b4c <request_from_pin_card+0xa8>)
 8000abe:	f001 fce9 	bl	8002494 <HAL_I2C_Master_Receive>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <request_from_pin_card+0xac>)
 8000ac8:	701a      	strb	r2, [r3, #0]

		if((header_to_ui[2] == measure_I)||(header_to_ui[2] == measure_V))
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <request_from_pin_card+0xa4>)
 8000acc:	789b      	ldrb	r3, [r3, #2]
 8000ace:	2b15      	cmp	r3, #21
 8000ad0:	d003      	beq.n	8000ada <request_from_pin_card+0x36>
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <request_from_pin_card+0xa4>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	2b14      	cmp	r3, #20
 8000ad8:	d10c      	bne.n	8000af4 <request_from_pin_card+0x50>
		{
			while(CDC_Transmit_FS(header_to_ui, 10));
 8000ada:	bf00      	nop
 8000adc:	210a      	movs	r1, #10
 8000ade:	481a      	ldr	r0, [pc, #104]	; (8000b48 <request_from_pin_card+0xa4>)
 8000ae0:	f008 fe12 	bl	8009708 <CDC_Transmit_FS>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1f8      	bne.n	8000adc <request_from_pin_card+0x38>
			num_req_A --;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <request_from_pin_card+0xa0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <request_from_pin_card+0xa0>)
 8000af2:	6013      	str	r3, [r2, #0]
		else if(header_to_ui[2] == 0xBB)
		{
			//print("SLAVE BUFFER EMPTY");
		}

		print("REQUEST status PINCARD_A %d\n",request_status);
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <request_from_pin_card+0xac>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <request_from_pin_card+0xb0>)
 8000afc:	f000 fab8 	bl	8001070 <print>
		for(int i = 0; i < 10; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	e00a      	b.n	8000b1c <request_from_pin_card+0x78>
		{
			print("%d ",header_to_ui[i]);
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <request_from_pin_card+0xa4>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <request_from_pin_card+0xb4>)
 8000b12:	f000 faad 	bl	8001070 <print>
		for(int i = 0; i < 10; i++)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	ddf1      	ble.n	8000b06 <request_from_pin_card+0x62>
		}
		print("\n");
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <request_from_pin_card+0xb8>)
 8000b24:	f000 faa4 	bl	8001070 <print>
			while(CDC_Transmit_FS(collected_data_B, 10));
			num_req_B --;
		}
	}*/

}
 8000b28:	e008      	b.n	8000b3c <request_from_pin_card+0x98>
		notify_new_ic = 0;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <request_from_pin_card+0xbc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		request_from_pincard = 0;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <request_from_pin_card+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		read_from_ui = 1;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <request_from_pin_card+0xc4>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20005548 	.word	0x20005548
 8000b48:	20005564 	.word	0x20005564
 8000b4c:	20004450 	.word	0x20004450
 8000b50:	2000554c 	.word	0x2000554c
 8000b54:	0800a770 	.word	0x0800a770
 8000b58:	0800a790 	.word	0x0800a790
 8000b5c:	0800a794 	.word	0x0800a794
 8000b60:	2000553c 	.word	0x2000553c
 8000b64:	20005530 	.word	0x20005530
 8000b68:	20005529 	.word	0x20005529

08000b6c <decode_packet>:

uint8_t decode_packet()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
			  |  S   | ID |COMMAND  |  VALUE     |   PAYLOAD_SIZE  |   E   |
			  ---------------------------------------------------------------*/

	//device, command, value, payload_size

	uint8_t e = 0; // error flag
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
		{
			num_req_A ++;
		}
	}*/

	if(device == io)
 8000b76:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <decode_packet+0x254>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d13a      	bne.n	8000bf4 <decode_packet+0x88>
	{
		if( command == start_digital_tests)
 8000b7e:	4b91      	ldr	r3, [pc, #580]	; (8000dc4 <decode_packet+0x258>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b1d      	cmp	r3, #29
 8000b84:	d103      	bne.n	8000b8e <decode_packet+0x22>
		{
			//###################
			beep(3);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 faa4 	bl	80010d4 <beep>
 8000b8c:	e0f7      	b.n	8000d7e <decode_packet+0x212>
		}

		else if(command == execute_sourcing)
 8000b8e:	4b8d      	ldr	r3, [pc, #564]	; (8000dc4 <decode_packet+0x258>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b1b      	cmp	r3, #27
 8000b94:	d111      	bne.n	8000bba <decode_packet+0x4e>
		{
			//Execute test
			f_request(EXE_START);
 8000b96:	2005      	movs	r0, #5
 8000b98:	f7ff fb86 	bl	80002a8 <f_request>
			f_request(NO_REQ);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fb83 	bl	80002a8 <f_request>
			HAL_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 ff76 	bl	8001a94 <HAL_Delay>
			while(HAL_GPIO_ReadPin(F_REQ_DONE_GPIO_Port, F_REQ_DONE_Pin)== 0);
 8000ba8:	bf00      	nop
 8000baa:	2108      	movs	r1, #8
 8000bac:	4886      	ldr	r0, [pc, #536]	; (8000dc8 <decode_packet+0x25c>)
 8000bae:	f001 fa0b 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f8      	beq.n	8000baa <decode_packet+0x3e>
 8000bb8:	e0e1      	b.n	8000d7e <decode_packet+0x212>
		}
		else if( command == reset_io_drivers)
 8000bba:	4b82      	ldr	r3, [pc, #520]	; (8000dc4 <decode_packet+0x258>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b1c      	cmp	r3, #28
 8000bc0:	d102      	bne.n	8000bc8 <decode_packet+0x5c>
		{
			f_reset();
 8000bc2:	f7ff fb37 	bl	8000234 <f_reset>
 8000bc6:	e0da      	b.n	8000d7e <decode_packet+0x212>
		}
		else if(command == set_fpga_frequency)
 8000bc8:	4b7e      	ldr	r3, [pc, #504]	; (8000dc4 <decode_packet+0x258>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b1e      	cmp	r3, #30
 8000bce:	d105      	bne.n	8000bdc <decode_packet+0x70>
		{
			f_set_frequency(value);
 8000bd0:	4b7e      	ldr	r3, [pc, #504]	; (8000dcc <decode_packet+0x260>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc29 	bl	800042c <f_set_frequency>
 8000bda:	e0d0      	b.n	8000d7e <decode_packet+0x212>
		}
		else if(command = set_io_voltage )
 8000bdc:	4b79      	ldr	r3, [pc, #484]	; (8000dc4 <decode_packet+0x258>)
 8000bde:	221f      	movs	r2, #31
 8000be0:	601a      	str	r2, [r3, #0]
		{
			f_set_io_voltage(-value+5300);
 8000be2:	4b7a      	ldr	r3, [pc, #488]	; (8000dcc <decode_packet+0x260>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f5c3 53a5 	rsb	r3, r3, #5280	; 0x14a0
 8000bea:	3314      	adds	r3, #20
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc35 	bl	800045c <f_set_io_voltage>
 8000bf2:	e0c4      	b.n	8000d7e <decode_packet+0x212>
		}


	}

	else if( (device >= io1) && (device <= io48) )
 8000bf4:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <decode_packet+0x254>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	f340 8095 	ble.w	8000d28 <decode_packet+0x1bc>
 8000bfe:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <decode_packet+0x254>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	f300 8090 	bgt.w	8000d28 <decode_packet+0x1bc>
	{
		if(device <= io16) f_cs(1);
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <decode_packet+0x254>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b1f      	cmp	r3, #31
 8000c0e:	dc03      	bgt.n	8000c18 <decode_packet+0xac>
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fbe1 	bl	80003d8 <f_cs>
 8000c16:	e00e      	b.n	8000c36 <decode_packet+0xca>
		else if(device <= io32) f_cs(2);
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <decode_packet+0x254>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8000c1e:	dc03      	bgt.n	8000c28 <decode_packet+0xbc>
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fbd9 	bl	80003d8 <f_cs>
 8000c26:	e006      	b.n	8000c36 <decode_packet+0xca>
		else if(device <= io48) f_cs(3);
 8000c28:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <decode_packet+0x254>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2e:	dc02      	bgt.n	8000c36 <decode_packet+0xca>
 8000c30:	2003      	movs	r0, #3
 8000c32:	f7ff fbd1 	bl	80003d8 <f_cs>

		if(command == load_source_vector)
 8000c36:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <decode_packet+0x258>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b19      	cmp	r3, #25
 8000c3c:	d128      	bne.n	8000c90 <decode_packet+0x124>
		{
			//set data to iox
			f_request(SPI_WRREQ);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fb32 	bl	80002a8 <f_request>
			HAL_SPI_Transmit(&hspi1, &packet[10], payload_size, HAL_MAX_DELAY);
 8000c44:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <decode_packet+0x264>)
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	4961      	ldr	r1, [pc, #388]	; (8000dd4 <decode_packet+0x268>)
 8000c4e:	4862      	ldr	r0, [pc, #392]	; (8000dd8 <decode_packet+0x26c>)
 8000c50:	f004 fa80 	bl	8005154 <HAL_SPI_Transmit>
			f_request(NO_REQ);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fb27 	bl	80002a8 <f_request>
			HAL_SPI_Transmit(&hspi1, null_byte, 1, 10);
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	495f      	ldr	r1, [pc, #380]	; (8000ddc <decode_packet+0x270>)
 8000c60:	485d      	ldr	r0, [pc, #372]	; (8000dd8 <decode_packet+0x26c>)
 8000c62:	f004 fa77 	bl	8005154 <HAL_SPI_Transmit>

			f_address(device - 16); // io1 --> address 0
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <decode_packet+0x254>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3b10      	subs	r3, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fb63 	bl	8000338 <f_address>
			f_request(COPY_FROM_SPI);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f7ff fb18 	bl	80002a8 <f_request>
			f_request(NO_REQ);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fb15 	bl	80002a8 <f_request>
			//HAL_Delay(1);
			while(HAL_GPIO_ReadPin(F_REQ_DONE_GPIO_Port, F_REQ_DONE_Pin)== 0);
 8000c7e:	bf00      	nop
 8000c80:	2108      	movs	r1, #8
 8000c82:	4851      	ldr	r0, [pc, #324]	; (8000dc8 <decode_packet+0x25c>)
 8000c84:	f001 f9a0 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f8      	beq.n	8000c80 <decode_packet+0x114>
		if(command == load_source_vector)
 8000c8e:	e075      	b.n	8000d7c <decode_packet+0x210>
		}

		else if(command == read_capture_vector)
 8000c90:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <decode_packet+0x258>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b1a      	cmp	r3, #26
 8000c96:	d171      	bne.n	8000d7c <decode_packet+0x210>
		{
			//read from iox to spi fifo begin
			f_address(device-16);
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <decode_packet+0x254>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b10      	subs	r3, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fb4a 	bl	8000338 <f_address>
			f_request(COPY_TO_SPI);
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f7ff faff 	bl	80002a8 <f_request>
			f_request(NO_REQ);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fafc 	bl	80002a8 <f_request>
			HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 feef 	bl	8001a94 <HAL_Delay>
			while(HAL_GPIO_ReadPin(F_REQ_DONE_GPIO_Port, F_REQ_DONE_Pin)== 0);
 8000cb6:	bf00      	nop
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4843      	ldr	r0, [pc, #268]	; (8000dc8 <decode_packet+0x25c>)
 8000cbc:	f001 f984 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f8      	beq.n	8000cb8 <decode_packet+0x14c>

			//before read request, a null byte should be sent
			HAL_SPI_Transmit(&hspi1, null_byte, 1, 10);
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4944      	ldr	r1, [pc, #272]	; (8000ddc <decode_packet+0x270>)
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <decode_packet+0x26c>)
 8000cce:	f004 fa41 	bl	8005154 <HAL_SPI_Transmit>
			f_request(SPI_RDREQ);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fae8 	bl	80002a8 <f_request>
			HAL_SPI_Receive(&hspi1, &fdata_to_ui[10], value, HAL_MAX_DELAY);
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <decode_packet+0x260>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	493f      	ldr	r1, [pc, #252]	; (8000de0 <decode_packet+0x274>)
 8000ce4:	483c      	ldr	r0, [pc, #240]	; (8000dd8 <decode_packet+0x26c>)
 8000ce6:	f004 fb71 	bl	80053cc <HAL_SPI_Receive>
			f_request(NO_REQ);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fadc 	bl	80002a8 <f_request>

			fdata_to_ui[1] = device;
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <decode_packet+0x254>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <decode_packet+0x278>)
 8000cf8:	705a      	strb	r2, [r3, #1]
			fdata_to_ui[7] = (value>>8);
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <decode_packet+0x260>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	121b      	asrs	r3, r3, #8
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <decode_packet+0x278>)
 8000d04:	71da      	strb	r2, [r3, #7]
			fdata_to_ui[8] = value;
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <decode_packet+0x260>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <decode_packet+0x278>)
 8000d0e:	721a      	strb	r2, [r3, #8]

			while(CDC_Transmit_FS(fdata_to_ui, value+10));
 8000d10:	bf00      	nop
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <decode_packet+0x260>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	330a      	adds	r3, #10
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4832      	ldr	r0, [pc, #200]	; (8000de4 <decode_packet+0x278>)
 8000d1c:	f008 fcf4 	bl	8009708 <CDC_Transmit_FS>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f5      	bne.n	8000d12 <decode_packet+0x1a6>
		if(command == load_source_vector)
 8000d26:	e029      	b.n	8000d7c <decode_packet+0x210>
		}
	}

	else if((packet[1] == pincards) && (packet[2]==start_reading_pincards))
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <decode_packet+0x27c>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	2b41      	cmp	r3, #65	; 0x41
 8000d2e:	d10d      	bne.n	8000d4c <decode_packet+0x1e0>
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <decode_packet+0x27c>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	2b17      	cmp	r3, #23
 8000d36:	d109      	bne.n	8000d4c <decode_packet+0x1e0>
	{
		read_from_ui = 0;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <decode_packet+0x280>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
		notify_new_ic = 0;
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <decode_packet+0x284>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

		request_from_pincard = 1;
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <decode_packet+0x288>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e018      	b.n	8000d7e <decode_packet+0x212>

	}

	else if((packet[1] == pincards) && (packet[2] == test_over))
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <decode_packet+0x27c>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b41      	cmp	r3, #65	; 0x41
 8000d52:	d114      	bne.n	8000d7e <decode_packet+0x212>
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <decode_packet+0x27c>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	2b18      	cmp	r3, #24
 8000d5a:	d110      	bne.n	8000d7e <decode_packet+0x212>
	{
		print("TEST OVER\n");
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <decode_packet+0x28c>)
 8000d5e:	f000 f987 	bl	8001070 <print>
		notify_new_ic = 1;
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <decode_packet+0x284>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
		read_from_ui = 0;
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <decode_packet+0x280>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		request_from_pincard = 0;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <decode_packet+0x288>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		beep(20);
 8000d74:	2014      	movs	r0, #20
 8000d76:	f000 f9ad 	bl	80010d4 <beep>
 8000d7a:	e000      	b.n	8000d7e <decode_packet+0x212>
		if(command == load_source_vector)
 8000d7c:	bf00      	nop
		{
			num_req_B ++;
		}
	}*/

	if(e != 0)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d017      	beq.n	8000db4 <decode_packet+0x248>
	{
		beep(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 f9a5 	bl	80010d4 <beep>
		HAL_Delay(200);
 8000d8a:	20c8      	movs	r0, #200	; 0xc8
 8000d8c:	f000 fe82 	bl	8001a94 <HAL_Delay>
		beep(50);
 8000d90:	2032      	movs	r0, #50	; 0x32
 8000d92:	f000 f99f 	bl	80010d4 <beep>
		HAL_Delay(200);
 8000d96:	20c8      	movs	r0, #200	; 0xc8
 8000d98:	f000 fe7c 	bl	8001a94 <HAL_Delay>
		beep(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f000 f999 	bl	80010d4 <beep>
		HAL_Delay(200);
 8000da2:	20c8      	movs	r0, #200	; 0xc8
 8000da4:	f000 fe76 	bl	8001a94 <HAL_Delay>
		beep(50);
 8000da8:	2032      	movs	r0, #50	; 0x32
 8000daa:	f000 f993 	bl	80010d4 <beep>
		HAL_Delay(200);
 8000dae:	20c8      	movs	r0, #200	; 0xc8
 8000db0:	f000 fe70 	bl	8001a94 <HAL_Delay>
	}

	return e;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000555c 	.word	0x2000555c
 8000dc4:	20005524 	.word	0x20005524
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	20005570 	.word	0x20005570
 8000dd0:	2000554e 	.word	0x2000554e
 8000dd4:	2000450a 	.word	0x2000450a
 8000dd8:	20005574 	.word	0x20005574
 8000ddc:	20004438 	.word	0x20004438
 8000de0:	2000343e 	.word	0x2000343e
 8000de4:	20003434 	.word	0x20003434
 8000de8:	20004500 	.word	0x20004500
 8000dec:	20005529 	.word	0x20005529
 8000df0:	2000553c 	.word	0x2000553c
 8000df4:	20005530 	.word	0x20005530
 8000df8:	0800a798 	.word	0x0800a798

08000dfc <read_packet_FIFO>:


// return 0 if the fifo is empty
//returns 1 for a successfull read
uint8_t read_packet_FIFO()
{
 8000dfc:	b598      	push	{r3, r4, r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

	if(RX_FIFO.head == RX_FIFO.tail) return 0;
 8000e00:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d101      	bne.n	8000e10 <read_packet_FIFO+0x14>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e06f      	b.n	8000ef0 <read_packet_FIFO+0xf4>

	read_id = 0;
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
	packet_size =10;
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <read_packet_FIFO+0x100>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	601a      	str	r2, [r3, #0]

	print("Read packet from FIFO started\n");
 8000e1c:	4838      	ldr	r0, [pc, #224]	; (8000f00 <read_packet_FIFO+0x104>)
 8000e1e:	f000 f927 	bl	8001070 <print>
	while(read_id < packet_size)
 8000e22:	e053      	b.n	8000ecc <read_packet_FIFO+0xd0>
	{
		if(RX_FIFO.tail != RX_FIFO.head)
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d04b      	beq.n	8000ec8 <read_packet_FIFO+0xcc>
		{
		  packet[read_id] = RX_FIFO.data[RX_FIFO.tail];
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	492e      	ldr	r1, [pc, #184]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e3a:	440a      	add	r2, r1
 8000e3c:	7a11      	ldrb	r1, [r2, #8]
 8000e3e:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e40:	54d1      	strb	r1, [r2, r3]
		  RX_FIFO.tail = FIFO_INCR(RX_FIFO.tail);
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <read_packet_FIFO+0xf8>)
 8000e4e:	6053      	str	r3, [r2, #4]

		  if(read_id == 9) // packet is read
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d131      	bne.n	8000ebc <read_packet_FIFO+0xc0>
		  {
		    device  = packet[1];
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <read_packet_FIFO+0x10c>)
 8000e60:	601a      	str	r2, [r3, #0]
			command = packet[2];
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <read_packet_FIFO+0x110>)
 8000e6a:	601a      	str	r2, [r3, #0]
			value   = (packet[3]<<24)|(packet[4]<<16)|(packet[5]<<8)|(packet[6]);
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e6e:	78db      	ldrb	r3, [r3, #3]
 8000e70:	061a      	lsls	r2, r3, #24
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e74:	791b      	ldrb	r3, [r3, #4]
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e7c:	795b      	ldrb	r3, [r3, #5]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4313      	orrs	r3, r2
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e84:	7992      	ldrb	r2, [r2, #6]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <read_packet_FIFO+0x114>)
 8000e8a:	6013      	str	r3, [r2, #0]
			payload_size = (packet[7]<<8) | (packet[8]); // read the payload_size
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e8e:	79db      	ldrb	r3, [r3, #7]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <read_packet_FIFO+0x108>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <read_packet_FIFO+0x118>)
 8000ea2:	801a      	strh	r2, [r3, #0]

//			print("device = %d  command = %d   value = %d   payload_size = %d \n",device,command,value,payload_size);

			if(payload_size != 0) //switch matrix will be received
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <read_packet_FIFO+0x118>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <read_packet_FIFO+0xc0>
			{
			  packet_size = packet_size + payload_size; //extend the read length
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <read_packet_FIFO+0x118>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <read_packet_FIFO+0x100>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <read_packet_FIFO+0x100>)
 8000eba:	6013      	str	r3, [r2, #0]
			}
			//else read_id will exceed the packet_size
		  }

		  read_id++;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e001      	b.n	8000ecc <read_packet_FIFO+0xd0>
		}

		else led_kinghtrider();
 8000ec8:	f000 f91a 	bl	8001100 <led_kinghtrider>
	while(read_id < packet_size)
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <read_packet_FIFO+0xfc>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <read_packet_FIFO+0x100>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dba5      	blt.n	8000e24 <read_packet_FIFO+0x28>

	}

	lt_packet = HAL_GetTick();
 8000ed8:	f000 fdd2 	bl	8001a80 <HAL_GetTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f04f 0400 	mov.w	r4, #0
 8000ee2:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <read_packet_FIFO+0x11c>)
 8000ee4:	e9c2 3400 	strd	r3, r4, [r2]
	print("Read packet from FIFO ended\n");
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <read_packet_FIFO+0x120>)
 8000eea:	f000 f8c1 	bl	8001070 <print>
	return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	bd98      	pop	{r3, r4, r7, pc}
 8000ef4:	200021fc 	.word	0x200021fc
 8000ef8:	20005500 	.word	0x20005500
 8000efc:	20005534 	.word	0x20005534
 8000f00:	0800a7a4 	.word	0x0800a7a4
 8000f04:	20004500 	.word	0x20004500
 8000f08:	2000555c 	.word	0x2000555c
 8000f0c:	20005524 	.word	0x20005524
 8000f10:	20005570 	.word	0x20005570
 8000f14:	2000554e 	.word	0x2000554e
 8000f18:	20005518 	.word	0x20005518
 8000f1c:	0800a7c4 	.word	0x0800a7c4

08000f20 <setup>:
extern int totRX;

#define DEBUG_MAIN_LOOP


void setup(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PW_CARD_RESET_GPIO_Port, PW_CARD_RESET_Pin, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <setup+0x74>)
 8000f2c:	f001 f863 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 fdae 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(PW_CARD_RESET_GPIO_Port, PW_CARD_RESET_Pin, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <setup+0x74>)
 8000f40:	f001 f859 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f48:	f000 fda4 	bl	8001a94 <HAL_Delay>

	//setting up initial values for variables
	new_packet_read = 0;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <setup+0x78>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	packet_sent = 0;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <setup+0x7c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	num_req_A = 0;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <setup+0x80>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

	//fpga
	null_byte[1] = 0b00000000;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <setup+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	705a      	strb	r2, [r3, #1]
	fdata_to_ui[0] = 'S';
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <setup+0x88>)
 8000f66:	2253      	movs	r2, #83	; 0x53
 8000f68:	701a      	strb	r2, [r3, #0]
	fdata_to_ui[9] = 'E';
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <setup+0x88>)
 8000f6c:	2245      	movs	r2, #69	; 0x45
 8000f6e:	725a      	strb	r2, [r3, #9]
	fdata_to_ui[2] = read_capture_vector;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <setup+0x88>)
 8000f72:	221a      	movs	r2, #26
 8000f74:	709a      	strb	r2, [r3, #2]


	//flags
	read_from_ui = 0;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <setup+0x8c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	request_from_pincard = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <setup+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
	notify_new_ic = 1;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <setup+0x94>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]


	beep(2);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 f8a3 	bl	80010d4 <beep>
	//f_set_io_voltage(-2500+5300);//4000 --> 1.3V 300-->5V
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	20005560 	.word	0x20005560
 8000f9c:	200044f8 	.word	0x200044f8
 8000fa0:	20005548 	.word	0x20005548
 8000fa4:	20004438 	.word	0x20004438
 8000fa8:	20003434 	.word	0x20003434
 8000fac:	20005529 	.word	0x20005529
 8000fb0:	20005530 	.word	0x20005530
 8000fb4:	2000553c 	.word	0x2000553c

08000fb8 <main_loop>:

void main_loop(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	while(read_from_ui)
 8000fbc:	e00f      	b.n	8000fde <main_loop+0x26>
	{
		#ifdef DEBUG_MAIN_LOOP
		//print("STATE: read_from_ui\n");
		#endif
		new_packet_read = read_packet_FIFO();
 8000fbe:	f7ff ff1d 	bl	8000dfc <read_packet_FIFO>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <main_loop+0x94>)
 8000fc8:	701a      	strb	r2, [r3, #0]

		if(new_packet_read) packet_sent = decode_packet();
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <main_loop+0x94>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <main_loop+0x26>
 8000fd2:	f7ff fdcb 	bl	8000b6c <decode_packet>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <main_loop+0x98>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	while(read_from_ui)
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <main_loop+0x9c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1eb      	bne.n	8000fbe <main_loop+0x6>
		#ifdef DEBUG_MAIN_LOOP
		//print("Error Code send packets: %d\n",packet_sent);
		#endif
	}

	while(request_from_pincard)
 8000fe6:	e00a      	b.n	8000ffe <main_loop+0x46>
	{
		#ifdef DEBUG_MAIN_LOOP
		//print("STATE: request_from_pincard\n");
		print("num_req_A: %d\n",num_req_A);
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <main_loop+0xa0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <main_loop+0xa4>)
 8000ff0:	f000 f83e 	bl	8001070 <print>
		#endif

		request_from_pin_card();
 8000ff4:	f7ff fd56 	bl	8000aa4 <request_from_pin_card>
		HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f000 fd4b 	bl	8001a94 <HAL_Delay>
	while(request_from_pincard)
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <main_loop+0xa8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <main_loop+0x30>
	}


	while(notify_new_ic)
 8001006:	e01b      	b.n	8001040 <main_loop+0x88>
	{
		#ifdef DEBUG_MAIN_LOOP
		//print("STATE: notify_new_ic\n");
		#endif
		if(HAL_GPIO_ReadPin(new_ic_switch_GPIO_Port, new_ic_switch_Pin) == 0)
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <main_loop+0xac>)
 800100e:	f000 ffdb 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d113      	bne.n	8001040 <main_loop+0x88>
		{
			notify_new_ic = 0;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <main_loop+0xb0>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
			read_from_ui = 1;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <main_loop+0x9c>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
			header_to_ui[1] = pincards;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <main_loop+0xb4>)
 8001026:	2241      	movs	r2, #65	; 0x41
 8001028:	705a      	strb	r2, [r3, #1]
			header_to_ui[2] = new_IC_loaded;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <main_loop+0xb4>)
 800102c:	2216      	movs	r2, #22
 800102e:	709a      	strb	r2, [r3, #2]

			while(CDC_Transmit_FS(header_to_ui, 10));
 8001030:	bf00      	nop
 8001032:	210a      	movs	r1, #10
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <main_loop+0xb4>)
 8001036:	f008 fb67 	bl	8009708 <CDC_Transmit_FS>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f8      	bne.n	8001032 <main_loop+0x7a>
	while(notify_new_ic)
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <main_loop+0xb0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1df      	bne.n	8001008 <main_loop+0x50>
		}
	}



}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20005560 	.word	0x20005560
 8001050:	200044f8 	.word	0x200044f8
 8001054:	20005529 	.word	0x20005529
 8001058:	20005548 	.word	0x20005548
 800105c:	0800a7e4 	.word	0x0800a7e4
 8001060:	20005530 	.word	0x20005530
 8001064:	40012000 	.word	0x40012000
 8001068:	2000553c 	.word	0x2000553c
 800106c:	20005564 	.word	0x20005564

08001070 <print>:
  }
  return count;
}


void print(char *msg,...){
 8001070:	b40f      	push	{r0, r1, r2, r3}
 8001072:	b580      	push	{r7, lr}
 8001074:	b096      	sub	sp, #88	; 0x58
 8001076:	af00      	add	r7, sp, #0
  char buff[80];
  va_list args;
  va_start(args,msg);
 8001078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800107c:	603b      	str	r3, [r7, #0]
  vsprintf(buff,msg,args);
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001084:	4618      	mov	r0, r3
 8001086:	f008 ff6b 	bl	8009f60 <vsiprintf>
  //while(CDC_Transmit_FS(buff, strlen(buff)));
	for (int i =0 ; i < strlen(buff); i++){
 800108a:	2300      	movs	r3, #0
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
 800108e:	e00f      	b.n	80010b0 <print+0x40>
		//HAL_UART_Transmit(&huart1, buff[i], 1, 100);
		USART1->DR =buff[i];
 8001090:	1d3a      	adds	r2, r7, #4
 8001092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001094:	4413      	add	r3, r2
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <print+0x60>)
 800109a:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE));
 800109c:	bf00      	nop
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <print+0x60>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <print+0x2e>
	for (int i =0 ; i < strlen(buff); i++){
 80010aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ac:	3301      	adds	r3, #1
 80010ae:	657b      	str	r3, [r7, #84]	; 0x54
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f8b6 	bl	8000224 <strlen>
 80010b8:	4602      	mov	r2, r0
 80010ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8e7      	bhi.n	8001090 <print+0x20>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3758      	adds	r7, #88	; 0x58
 80010c4:	46bd      	mov	sp, r7
 80010c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ca:	b004      	add	sp, #16
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800

080010d4 <beep>:


void beep(int duration)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	buzzerTime = duration;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <beep+0x24>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <beep+0x28>)
 80010ea:	f000 ff84 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20005520 	.word	0x20005520
 80010fc:	40012000 	.word	0x40012000

08001100 <led_kinghtrider>:


void led_kinghtrider(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	//	LED Testing Note: LED3 not working!
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2140      	movs	r1, #64	; 0x40
 8001108:	4839      	ldr	r0, [pc, #228]	; (80011f0 <led_kinghtrider+0xf0>)
 800110a:	f000 ff74 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800110e:	2032      	movs	r0, #50	; 0x32
 8001110:	f000 fcc0 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4835      	ldr	r0, [pc, #212]	; (80011f0 <led_kinghtrider+0xf0>)
 800111a:	f000 ff6c 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800111e:	2201      	movs	r2, #1
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4833      	ldr	r0, [pc, #204]	; (80011f0 <led_kinghtrider+0xf0>)
 8001124:	f000 ff67 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001128:	2032      	movs	r0, #50	; 0x32
 800112a:	f000 fcb3 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	482f      	ldr	r0, [pc, #188]	; (80011f0 <led_kinghtrider+0xf0>)
 8001134:	f000 ff5f 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	482c      	ldr	r0, [pc, #176]	; (80011f0 <led_kinghtrider+0xf0>)
 8001140:	f000 ff59 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001144:	2032      	movs	r0, #50	; 0x32
 8001146:	f000 fca5 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4827      	ldr	r0, [pc, #156]	; (80011f0 <led_kinghtrider+0xf0>)
 8001152:	f000 ff50 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <led_kinghtrider+0xf0>)
 800115e:	f000 ff4a 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001162:	2032      	movs	r0, #50	; 0x32
 8001164:	f000 fc96 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116e:	4820      	ldr	r0, [pc, #128]	; (80011f0 <led_kinghtrider+0xf0>)
 8001170:	f000 ff41 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	481e      	ldr	r0, [pc, #120]	; (80011f4 <led_kinghtrider+0xf4>)
 800117c:	f000 ff3b 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001180:	2032      	movs	r0, #50	; 0x32
 8001182:	f000 fc87 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4819      	ldr	r0, [pc, #100]	; (80011f4 <led_kinghtrider+0xf4>)
 800118e:	f000 ff32 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001198:	4816      	ldr	r0, [pc, #88]	; (80011f4 <led_kinghtrider+0xf4>)
 800119a:	f000 ff2c 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800119e:	2032      	movs	r0, #50	; 0x32
 80011a0:	f000 fc78 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <led_kinghtrider+0xf4>)
 80011ac:	f000 ff23 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <led_kinghtrider+0xf0>)
 80011b8:	f000 ff1d 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011bc:	2032      	movs	r0, #50	; 0x32
 80011be:	f000 fc69 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <led_kinghtrider+0xf0>)
 80011ca:	f000 ff14 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <led_kinghtrider+0xf0>)
 80011d6:	f000 ff0e 	bl	8001ff6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f000 fc5a 	bl	8001a94 <HAL_Delay>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <led_kinghtrider+0xf0>)
 80011e8:	f000 ff05 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40010800 	.word	0x40010800

080011f8 <clk_init>:
 *      Author: Thilina
 */
#include "si5351.h"

void clk_init()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    clk_off();
 80011fc:	f000 fa02 	bl	8001604 <clk_off>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <clk_reset>:

void clk_reset()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    clk_i2c_write(177, 0xA0);
 8001208:	21a0      	movs	r1, #160	; 0xa0
 800120a:	20b1      	movs	r0, #177	; 0xb1
 800120c:	f000 f9de 	bl	80015cc <clk_i2c_write>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <clk_set_frequency>:

void clk_set_frequency(uint8_t clk,uint32_t freq)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]

    uint8_t a, R = 1, shifts = 0;
 8001220:	2301      	movs	r3, #1
 8001222:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001226:	2300      	movs	r3, #0
 8001228:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        // was 1.05 to 1.1 GHz, as usual YMMV [See README.md for details]
        outdivider = SI_OVERCLOCK / freq;
    #else
        // normal VCO from the datasheet and AN
        // With 900 MHz beeing the maximum internal PLL-Frequency
        outdivider = 900000000 / freq;
 800122c:	4abf      	ldr	r2, [pc, #764]	; (800152c <clk_set_frequency+0x318>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    // use additional Output divider ("R")
    while (outdivider > 900) {
 8001236:	e007      	b.n	8001248 <clk_set_frequency+0x34>
        R = R * 2;
 8001238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        outdivider = outdivider / 2;
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    while (outdivider > 900) {
 8001248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800124e:	d8f3      	bhi.n	8001238 <clk_set_frequency+0x24>
    }

    // finds the even divider which delivers the intended Frequency
    if (outdivider % 2) outdivider--;
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <clk_set_frequency+0x4c>
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	3b01      	subs	r3, #1
 800125e:	633b      	str	r3, [r7, #48]	; 0x30

    // Calculate the PLL-Frequency (given the even divider)
    fvco = outdivider * R * freq;
 8001260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001266:	fb02 f203 	mul.w	r2, r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Convert the Output Divider to the bit-setting required in register 44
    switch (R) {
 8001272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001276:	2b08      	cmp	r3, #8
 8001278:	d020      	beq.n	80012bc <clk_set_frequency+0xa8>
 800127a:	2b08      	cmp	r3, #8
 800127c:	dc06      	bgt.n	800128c <clk_set_frequency+0x78>
 800127e:	2b02      	cmp	r3, #2
 8001280:	d014      	beq.n	80012ac <clk_set_frequency+0x98>
 8001282:	2b04      	cmp	r3, #4
 8001284:	d016      	beq.n	80012b4 <clk_set_frequency+0xa0>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d00c      	beq.n	80012a4 <clk_set_frequency+0x90>
 800128a:	e02b      	b.n	80012e4 <clk_set_frequency+0xd0>
 800128c:	2b20      	cmp	r3, #32
 800128e:	d01d      	beq.n	80012cc <clk_set_frequency+0xb8>
 8001290:	2b20      	cmp	r3, #32
 8001292:	dc02      	bgt.n	800129a <clk_set_frequency+0x86>
 8001294:	2b10      	cmp	r3, #16
 8001296:	d015      	beq.n	80012c4 <clk_set_frequency+0xb0>
 8001298:	e024      	b.n	80012e4 <clk_set_frequency+0xd0>
 800129a:	2b40      	cmp	r3, #64	; 0x40
 800129c:	d01a      	beq.n	80012d4 <clk_set_frequency+0xc0>
 800129e:	2b80      	cmp	r3, #128	; 0x80
 80012a0:	d01c      	beq.n	80012dc <clk_set_frequency+0xc8>
 80012a2:	e01f      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 1:   R = 0; break;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012aa:	e01b      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 2:   R = 16; break;
 80012ac:	2310      	movs	r3, #16
 80012ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012b2:	e017      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 4:   R = 32; break;
 80012b4:	2320      	movs	r3, #32
 80012b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012ba:	e013      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 8:   R = 48; break;
 80012bc:	2330      	movs	r3, #48	; 0x30
 80012be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012c2:	e00f      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 16:  R = 64; break;
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012ca:	e00b      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 32:  R = 80; break;
 80012cc:	2350      	movs	r3, #80	; 0x50
 80012ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012d2:	e007      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 64:  R = 96; break;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012da:	e003      	b.n	80012e4 <clk_set_frequency+0xd0>
        case 128: R = 112; break;
 80012dc:	2370      	movs	r3, #112	; 0x70
 80012de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012e2:	bf00      	nop
    }

    // we have now the integer part of the output msynth
    // the b & c is fixed below
    MSx_P1 = 128 * outdivider - 512;
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80012ea:	3b04      	subs	r3, #4
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    * XTAl ppm error...
    *
    * This will free more than 1K of the final eeprom
    *
    ****************************************************************************/
    a = fvco / int_xtal;
 80012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <clk_set_frequency+0x31c>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0b1b      	lsrs	r3, r3, #12
 80012fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b = (fvco % int_xtal) >> 5;     // Integer par of the fraction
 8001300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001302:	0993      	lsrs	r3, r2, #6
 8001304:	498a      	ldr	r1, [pc, #552]	; (8001530 <clk_set_frequency+0x31c>)
 8001306:	fba1 1303 	umull	r1, r3, r1, r3
 800130a:	0b1b      	lsrs	r3, r3, #12
 800130c:	4989      	ldr	r1, [pc, #548]	; (8001534 <clk_set_frequency+0x320>)
 800130e:	fb01 f303 	mul.w	r3, r1, r3
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	623b      	str	r3, [r7, #32]
                                    // scaled to match "c" limits
    c = int_xtal >> 5;              // "c" scaled to match it's limits
 8001318:	4b87      	ldr	r3, [pc, #540]	; (8001538 <clk_set_frequency+0x324>)
 800131a:	61fb      	str	r3, [r7, #28]
                                    // in the register

    // f is (128*b)/c to mimic the Floor(128*(b/c)) from the datasheet
    f = (128 * b) / c;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	01da      	lsls	r2, r3, #7
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	61bb      	str	r3, [r7, #24]

    // build the registers to write
    MSNx_P1 = 128 * a + f - 512;
 8001328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132c:	01db      	lsls	r3, r3, #7
 800132e:	461a      	mov	r2, r3
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4413      	add	r3, r2
 8001334:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001338:	617b      	str	r3, [r7, #20]
    MSNx_P2 = 128 * b - f * c;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	01da      	lsls	r2, r3, #7
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	69f9      	ldr	r1, [r7, #28]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	613b      	str	r3, [r7, #16]
    MSNx_P3 = c;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	60fb      	str	r3, [r7, #12]

    // PLLs and CLK# registers are allocated with a shift, we handle that with
    // the shifts var to make code smaller
    if (clk > 0 ) shifts = 8;
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <clk_set_frequency+0x146>
 8001354:	2308      	movs	r3, #8
 8001356:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    // plls, A & B registers separated by 8 bytes
    clk_i2c_write(26 + shifts, (MSNx_P3 & 65280) >> 8);   // Bits [15:8] of MSNx_P3 in register 26
 800135a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800135e:	331a      	adds	r3, #26
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f000 f92e 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(27 + shifts, MSNx_P3 & 255);
 8001370:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001374:	331b      	adds	r3, #27
 8001376:	b2db      	uxtb	r3, r3
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f924 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(28 + shifts, (MSNx_P1 & 196608) >> 16);
 8001384:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001388:	331c      	adds	r3, #28
 800138a:	b2da      	uxtb	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f000 f916 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(29 + shifts, (MSNx_P1 & 65280) >> 8);   // Bits [15:8]  of MSNx_P1 in register 29
 80013a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013a4:	331d      	adds	r3, #29
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f000 f90b 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(30 + shifts, MSNx_P1 & 255);            // Bits [7:0]  of MSNx_P1 in register 30
 80013b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013ba:	331e      	adds	r3, #30
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f901 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(31 + shifts, ((MSNx_P3 & 983040) >> 12) | ((MSNx_P2 & 983040) >> 16)); // Parts of MSNx_P3 and MSNx_P1
 80013ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013ce:	331f      	adds	r3, #31
 80013d0:	b2d8      	uxtb	r0, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0b1b      	lsrs	r3, r3, #12
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f023 030f 	bic.w	r3, r3, #15
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	f000 f8ec 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(32 + shifts, (MSNx_P2 & 65280) >> 8);   // Bits [15:8]  of MSNx_P2 in register 32
 80013f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013f8:	3320      	adds	r3, #32
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f000 f8e1 	bl	80015cc <clk_i2c_write>
    clk_i2c_write(33 + shifts, MSNx_P2 & 255);            // Bits [7:0]  of MSNx_P2 in register 33
 800140a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800140e:	3321      	adds	r3, #33	; 0x21
 8001410:	b2db      	uxtb	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8d7 	bl	80015cc <clk_i2c_write>

    // Write the output divider msynth only if we need to, in this way we can
    // speed up the frequency changes almost by half the time most of the time
    // and the main goal is to avoid the nasty click noise on freq change
    if (omsynth[clk] != outdivider) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a46      	ldr	r2, [pc, #280]	; (800153c <clk_set_frequency+0x328>)
 8001422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001426:	461a      	mov	r2, r3
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	4293      	cmp	r3, r2
 800142c:	d07a      	beq.n	8001524 <clk_set_frequency+0x310>
        // CLK# registers are exactly 8 * clk# bytes shifted from a base register.
        shifts = clk * 8;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // multisynths
        clk_i2c_write(42 + shifts, 0);                        // Bits [15:8] of MS0_P3 (always 0) in register 42
 8001436:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800143a:	332a      	adds	r3, #42	; 0x2a
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f8c3 	bl	80015cc <clk_i2c_write>
        clk_i2c_write(43 + shifts, 1);                        // Bits [7:0]  of MS0_P3 (always 1) in register 43
 8001446:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800144a:	332b      	adds	r3, #43	; 0x2b
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f8bb 	bl	80015cc <clk_i2c_write>
        // See datasheet, special trick when R=4
        if (outdivider == 4) {
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	2b04      	cmp	r3, #4
 800145a:	d11d      	bne.n	8001498 <clk_set_frequency+0x284>
            clk_i2c_write(44 + shifts, 12 | R);
 800145c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001460:	332c      	adds	r3, #44	; 0x2c
 8001462:	b2da      	uxtb	r2, r3
 8001464:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001468:	f043 030c 	orr.w	r3, r3, #12
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f000 f8ab 	bl	80015cc <clk_i2c_write>
            clk_i2c_write(45 + shifts, 0);            // Bits [15:8] of MSx_P1 must be 0
 8001476:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800147a:	332d      	adds	r3, #45	; 0x2d
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f8a3 	bl	80015cc <clk_i2c_write>
            clk_i2c_write(46 + shifts, 0);            // Bits [7:0] of MSx_P1 must be 0
 8001486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800148a:	332e      	adds	r3, #46	; 0x2e
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f89b 	bl	80015cc <clk_i2c_write>
 8001496:	e025      	b.n	80014e4 <clk_set_frequency+0x2d0>
        } else {
            clk_i2c_write(44 + shifts, ((MSx_P1 & 196608) >> 16) | R);  // Bits [17:16] of MSx_P1 in bits [1:0] and R in [7:4]
 8001498:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800149c:	332c      	adds	r3, #44	; 0x2c
 800149e:	b2d8      	uxtb	r0, r3
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 f889 	bl	80015cc <clk_i2c_write>
            clk_i2c_write(45 + shifts, (MSx_P1 & 65280) >> 8);    // Bits [15:8]  of MSx_P1 in register 45
 80014ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80014be:	332d      	adds	r3, #45	; 0x2d
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f000 f87e 	bl	80015cc <clk_i2c_write>
            clk_i2c_write(46 + shifts, MSx_P1 & 255);             // Bits [7:0]  of MSx_P1 in register 46
 80014d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80014d4:	332e      	adds	r3, #46	; 0x2e
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f874 	bl	80015cc <clk_i2c_write>
        }
        clk_i2c_write(47 + shifts, 0);                        // Bits [19:16] of MS0_P2 and MS0_P3 are always 0
 80014e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80014e8:	332f      	adds	r3, #47	; 0x2f
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f86c 	bl	80015cc <clk_i2c_write>
        clk_i2c_write(48 + shifts, 0);                        // Bits [15:8]  of MS0_P2 are always 0
 80014f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80014f8:	3330      	adds	r3, #48	; 0x30
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f864 	bl	80015cc <clk_i2c_write>
        clk_i2c_write(49 + shifts, 0);                        // Bits [7:0]   of MS0_P2 are always 0
 8001504:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001508:	3331      	adds	r3, #49	; 0x31
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f85c 	bl	80015cc <clk_i2c_write>

        // must reset the so called "PLL", in fact the output msynth
        clk_reset();
 8001514:	f7ff fe76 	bl	8001204 <clk_reset>

        // keep track of the change
        omsynth[clk] = (uint16_t)outdivider;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800151c:	b291      	uxth	r1, r2
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <clk_set_frequency+0x328>)
 8001520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
}
 8001524:	bf00      	nop
 8001526:	3738      	adds	r7, #56	; 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	35a4e900 	.word	0x35a4e900
 8001530:	027c4a9d 	.word	0x027c4a9d
 8001534:	019bfcc0 	.word	0x019bfcc0
 8001538:	000cdfe6 	.word	0x000cdfe6
 800153c:	20005540 	.word	0x20005540

08001540 <clk_enable>:

void clk_enable(uint8_t clk) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    // var to handle the mask of the registers value
    uint8_t m = SICLK0_R;
 800154a:	234c      	movs	r3, #76	; 0x4c
 800154c:	73fb      	strb	r3, [r7, #15]
    if (clk > 0) m = SICLK12_R;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <clk_enable+0x18>
 8001554:	236c      	movs	r3, #108	; 0x6c
 8001556:	73fb      	strb	r3, [r7, #15]

    // write the register value
    clk_i2c_write(16 + clk, m + clkpower[clk]);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	3310      	adds	r3, #16
 800155c:	b2d8      	uxtb	r0, r3
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <clk_enable+0x58>)
 8001562:	5cd2      	ldrb	r2, [r2, r3]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	4413      	add	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	f000 f82e 	bl	80015cc <clk_i2c_write>

    // 1 & 2 are mutually exclusive
    if (clk == 1) clk_disable(2);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <clk_enable+0x3c>
 8001576:	2002      	movs	r0, #2
 8001578:	f000 f812 	bl	80015a0 <clk_disable>
    if (clk == 2) clk_disable(1);
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d102      	bne.n	8001588 <clk_enable+0x48>
 8001582:	2001      	movs	r0, #1
 8001584:	f000 f80c 	bl	80015a0 <clk_disable>

    // update the status of the clk
    clkOn[clk] = 1;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <clk_enable+0x5c>)
 800158c:	2101      	movs	r1, #1
 800158e:	54d1      	strb	r1, [r2, r3]

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200044fc 	.word	0x200044fc
 800159c:	20005554 	.word	0x20005554

080015a0 <clk_disable>:

void clk_disable(uint8_t clk) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    // send
    clk_i2c_write(16 + clk, 128);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3310      	adds	r3, #16
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f80a 	bl	80015cc <clk_i2c_write>

    // update the status of the clk
    clkOn[clk] = 0;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <clk_disable+0x28>)
 80015bc:	2100      	movs	r1, #0
 80015be:	54d1      	strb	r1, [r2, r3]
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20005554 	.word	0x20005554

080015cc <clk_i2c_write>:
    // now enable the output to get it applied
    clk_enable(clk);
}

void clk_i2c_write(uint8_t regist, uint8_t value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = regist;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, SIADDR <<1, data, 2, 100);
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	2364      	movs	r3, #100	; 0x64
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	21c0      	movs	r1, #192	; 0xc0
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <clk_i2c_write+0x34>)
 80015f2:	f000 fe51 	bl	8002298 <HAL_I2C_Master_Transmit>

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200044a4 	.word	0x200044a4

08001604 <clk_off>:

void clk_off()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i<3; i++) clk_disable(i);
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	e006      	b.n	800161e <clk_off+0x1a>
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffc4 	bl	80015a0 <clk_disable>
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	3301      	adds	r3, #1
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d9f5      	bls.n	8001610 <clk_off+0xc>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI1_Init+0x64>)
 8001632:	4a18      	ldr	r2, [pc, #96]	; (8001694 <MX_SPI1_Init+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_SPI1_Init+0x64>)
 8001638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800163c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_SPI1_Init+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_SPI1_Init+0x64>)
 8001658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI1_Init+0x64>)
 8001660:	2230      	movs	r2, #48	; 0x30
 8001662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI1_Init+0x64>)
 8001678:	220a      	movs	r2, #10
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_SPI1_Init+0x64>)
 800167e:	f003 fce5 	bl	800504c <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001688:	f7ff f9ad 	bl	80009e6 <Error_Handler>
  }

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20005574 	.word	0x20005574
 8001694:	40013000 	.word	0x40013000

08001698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d12f      	bne.n	8001718 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = F_SCK_Pin|F_MOSI_Pin;
 80016e8:	23a0      	movs	r3, #160	; 0xa0
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <HAL_SPI_MspInit+0x90>)
 80016fc:	f000 fafa 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F_MISO_Pin;
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(F_MISO_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_SPI_MspInit+0x90>)
 8001714:	f000 faee 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000
 8001728:	40010800 	.word	0x40010800

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_MspInit+0x5c>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_MspInit+0x5c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_MspInit+0x5c>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x5c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x5c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x5c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_MspInit+0x60>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_MspInit+0x60>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <HardFault_Handler+0x4>

080017a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <BusFault_Handler+0x4>

080017ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f93e 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(buzzerTime>0)
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <SysTick_Handler+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dd05      	ble.n	80017f4 <SysTick_Handler+0x1c>
	{
		buzzerTime--;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SysTick_Handler+0x2c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SysTick_Handler+0x2c>)
 80017f0:	6013      	str	r3, [r2, #0]
	else
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	e005      	b.n	8001800 <SysTick_Handler+0x28>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <SysTick_Handler+0x30>)
 80017fc:	f000 fbfb 	bl	8001ff6 <HAL_GPIO_WritePin>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20005520 	.word	0x20005520
 8001808:	40012000 	.word	0x40012000

0800180c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001812:	f001 fcf6 	bl	8003202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20005ad4 	.word	0x20005ad4

08001820 <_sbrk>:
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
 8001850:	f008 fb3e 	bl	8009ed0 <__errno>
 8001854:	4602      	mov	r2, r0
 8001856:	230c      	movs	r3, #12
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20010000 	.word	0x20010000
 8001880:	00000400 	.word	0x00000400
 8001884:	20003204 	.word	0x20003204
 8001888:	20005dc8 	.word	0x20005dc8

0800188c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f004 f928 	bl	8005b24 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f7ff f884 	bl	80009e6 <Error_Handler>
  }

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200055cc 	.word	0x200055cc
 80018e8:	40013800 	.word	0x40013800

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_UART_MspInit+0x8c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d131      	bne.n	8001970 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0x90>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_UART_MspInit+0x90>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x90>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x90>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_UART_MspInit+0x90>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_UART_MspInit+0x90>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800193c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_UART_MspInit+0x94>)
 8001952:	f000 f9cf 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x94>)
 800196c:	f000 f9c2 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40013800 	.word	0x40013800
 800197c:	40021000 	.word	0x40021000
 8001980:	40010800 	.word	0x40010800

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001984:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ff6f 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f008 fa95 	bl	8009edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7fe ffa5 	bl	8000900 <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r3, =_sidata
 80019b8:	0800a8a4 	.word	0x0800a8a4
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80019c8:	20005dc4 	.word	0x20005dc4

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f945 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fe9e 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f95d 	bl	8001cda <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f925 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000560c 	.word	0x2000560c

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	2000560c 	.word	0x2000560c

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_Delay+0x40>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffe0 	bl	8001a80 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4906      	ldr	r1, [pc, #24]	; (8001b70 <__NVIC_EnableIRQ+0x34>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff90 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff2d 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff42 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff35 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e133      	b.n	8001f70 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8122 	bne.w	8001f6a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d034      	beq.n	8001d98 <HAL_GPIO_Init+0xa4>
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d80d      	bhi.n	8001d4e <HAL_GPIO_Init+0x5a>
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x9a>
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d804      	bhi.n	8001d44 <HAL_GPIO_Init+0x50>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d031      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d01c      	beq.n	8001d7c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e048      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d043      	beq.n	8001dd0 <HAL_GPIO_Init+0xdc>
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d01b      	beq.n	8001d84 <HAL_GPIO_Init+0x90>
          break;
 8001d4c:	e043      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d4e:	4a8f      	ldr	r2, [pc, #572]	; (8001f8c <HAL_GPIO_Init+0x298>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d026      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
 8001d54:	4a8d      	ldr	r2, [pc, #564]	; (8001f8c <HAL_GPIO_Init+0x298>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d806      	bhi.n	8001d68 <HAL_GPIO_Init+0x74>
 8001d5a:	4a8d      	ldr	r2, [pc, #564]	; (8001f90 <HAL_GPIO_Init+0x29c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d020      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
 8001d60:	4a8c      	ldr	r2, [pc, #560]	; (8001f94 <HAL_GPIO_Init+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01d      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
          break;
 8001d66:	e036      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d68:	4a8b      	ldr	r2, [pc, #556]	; (8001f98 <HAL_GPIO_Init+0x2a4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
 8001d6e:	4a8b      	ldr	r2, [pc, #556]	; (8001f9c <HAL_GPIO_Init+0x2a8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d016      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
 8001d74:	4a8a      	ldr	r2, [pc, #552]	; (8001fa0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0xae>
          break;
 8001d7a:	e02c      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e028      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e023      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	3308      	adds	r3, #8
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e01e      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	623b      	str	r3, [r7, #32]
          break;
 8001da0:	e019      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001daa:	2304      	movs	r3, #4
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e012      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db8:	2308      	movs	r3, #8
 8001dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	611a      	str	r2, [r3, #16]
          break;
 8001dc2:	e008      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	615a      	str	r2, [r3, #20]
          break;
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2bff      	cmp	r3, #255	; 0xff
 8001dda:	d801      	bhi.n	8001de0 <HAL_GPIO_Init+0xec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	e001      	b.n	8001de4 <HAL_GPIO_Init+0xf0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2bff      	cmp	r3, #255	; 0xff
 8001dea:	d802      	bhi.n	8001df2 <HAL_GPIO_Init+0xfe>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x104>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	3b08      	subs	r3, #8
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	210f      	movs	r1, #15
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a2 	beq.w	8001f6a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a5e      	ldr	r2, [pc, #376]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6193      	str	r3, [r2, #24]
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e3e:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <HAL_GPIO_Init+0x2b4>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x1b6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x1b2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x1ae>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x1aa>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x1a6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x1a2>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x1b8>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ebc:	493a      	ldr	r1, [pc, #232]	; (8001fa8 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
 8001ee2:	e006      	b.n	8001ef2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4930      	ldr	r1, [pc, #192]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	492b      	ldr	r1, [pc, #172]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	4926      	ldr	r1, [pc, #152]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
 8001f32:	e006      	b.n	8001f42 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4921      	ldr	r1, [pc, #132]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	491c      	ldr	r1, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f aec4 	bne.w	8001d08 <HAL_GPIO_Init+0x14>
  }
}
 8001f80:	bf00      	nop
 8001f82:	372c      	adds	r7, #44	; 0x2c
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	10120000 	.word	0x10120000
 8001f98:	10310000 	.word	0x10310000
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10220000 	.word	0x10220000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40011400 	.word	0x40011400
 8001fbc:	40011800 	.word	0x40011800
 8001fc0:	40011c00 	.word	0x40011c00
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002006:	787b      	ldrb	r3, [r7, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002012:	e003      	b.n	800201c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e11f      	b.n	800227a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fbea 	bl	8000828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800208c:	f002 fee2 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a7b      	ldr	r2, [pc, #492]	; (8002284 <HAL_I2C_Init+0x25c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d807      	bhi.n	80020ac <HAL_I2C_Init+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a7a      	ldr	r2, [pc, #488]	; (8002288 <HAL_I2C_Init+0x260>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x92>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_I2C_Init+0x264>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0db      	b.n	800227a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_I2C_Init+0x268>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a64      	ldr	r2, [pc, #400]	; (8002284 <HAL_I2C_Init+0x25c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <HAL_I2C_Init+0xd4>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	e009      	b.n	8002110 <HAL_I2C_Init+0xe8>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a63      	ldr	r2, [pc, #396]	; (8002294 <HAL_I2C_Init+0x26c>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4956      	ldr	r1, [pc, #344]	; (8002284 <HAL_I2C_Init+0x25c>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d80d      	bhi.n	800214c <HAL_I2C_Init+0x124>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fbb1 f3f3 	udiv	r3, r1, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	bf38      	it	cc
 8002148:	2304      	movcc	r3, #4
 800214a:	e04f      	b.n	80021ec <HAL_I2C_Init+0x1c4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d111      	bne.n	8002178 <HAL_I2C_Init+0x150>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e012      	b.n	800219e <HAL_I2C_Init+0x176>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	0099      	lsls	r1, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	fbb0 f3f3 	udiv	r3, r0, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x17e>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e022      	b.n	80021ec <HAL_I2C_Init+0x1c4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10e      	bne.n	80021cc <HAL_I2C_Init+0x1a4>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e58      	subs	r0, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	440b      	add	r3, r1
 80021bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	e00f      	b.n	80021ec <HAL_I2C_Init+0x1c4>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	0099      	lsls	r1, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800221a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6911      	ldr	r1, [r2, #16]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	000186a0 	.word	0x000186a0
 8002288:	001e847f 	.word	0x001e847f
 800228c:	003d08ff 	.word	0x003d08ff
 8002290:	431bde83 	.word	0x431bde83
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	461a      	mov	r2, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	817b      	strh	r3, [r7, #10]
 80022a8:	4613      	mov	r3, r2
 80022aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff fbe8 	bl	8001a80 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	f040 80e0 	bne.w	8002480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2319      	movs	r3, #25
 80022c6:	2201      	movs	r2, #1
 80022c8:	4970      	ldr	r1, [pc, #448]	; (800248c <HAL_I2C_Master_Transmit+0x1f4>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fc8c 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0d3      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2C_Master_Transmit+0x50>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0cc      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d007      	beq.n	800230e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	; 0x21
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2210      	movs	r2, #16
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	893a      	ldrh	r2, [r7, #8]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_I2C_Master_Transmit+0x1f8>)
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 faf6 	bl	8002948 <I2C_MasterRequestWrite>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e08d      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800237c:	e066      	b.n	800244c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fd06 	bl	8002d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x188>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	6a39      	ldr	r1, [r7, #32]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fcf6 	bl	8002e16 <I2C_WaitOnBTFFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	2b04      	cmp	r3, #4
 8002436:	d107      	bne.n	8002448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e01a      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d194      	bne.n	800237e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000

08002494 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff fae8 	bl	8001a80 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	f040 8238 	bne.w	8002930 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2319      	movs	r3, #25
 80024c6:	2201      	movs	r2, #1
 80024c8:	497e      	ldr	r1, [pc, #504]	; (80026c4 <HAL_I2C_Master_Receive+0x230>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb8c 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	e22b      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2C_Master_Receive+0x54>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e224      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d007      	beq.n	800250e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2222      	movs	r2, #34	; 0x22
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2210      	movs	r2, #16
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	893a      	ldrh	r2, [r7, #8]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_I2C_Master_Receive+0x234>)
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa78 	bl	8002a4c <I2C_MasterRequestRead>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1e5      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e1b9      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	2b01      	cmp	r3, #1
 800259c:	d11d      	bne.n	80025da <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025d6:	b662      	cpsie	i
 80025d8:	e197      	b.n	800290a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d11d      	bne.n	800261e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002618:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800261a:	b662      	cpsie	i
 800261c:	e175      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002644:	e161      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	2b03      	cmp	r3, #3
 800264c:	f200 811a 	bhi.w	8002884 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b01      	cmp	r3, #1
 8002656:	d123      	bne.n	80026a0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fc1b 	bl	8002e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e162      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269e:	e134      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d150      	bne.n	800274a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	4906      	ldr	r1, [pc, #24]	; (80026cc <HAL_I2C_Master_Receive+0x238>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa98 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e137      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
 80026c2:	bf00      	nop
 80026c4:	00100002 	.word	0x00100002
 80026c8:	ffff0000 	.word	0xffff0000
 80026cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002714:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002748:	e0df      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	497a      	ldr	r1, [pc, #488]	; (800293c <HAL_I2C_Master_Receive+0x4a8>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fa47 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0e6      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002774:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_I2C_Master_Receive+0x4ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_I2C_Master_Receive+0x4b0>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0a1a      	lsrs	r2, r3, #8
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00da      	lsls	r2, r3, #3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d117      	bne.n	80027fe <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027f0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e099      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d1da      	bne.n	80027c2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002882:	e042      	b.n	800290a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fb05 	bl	8002e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e04c      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d118      	bne.n	800290a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	f47f ae99 	bne.w	8002646 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	00010004 	.word	0x00010004
 8002940:	20000000 	.word	0x20000000
 8002944:	14f8b589 	.word	0x14f8b589

08002948 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	460b      	mov	r3, r1
 8002956:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d006      	beq.n	8002972 <I2C_MasterRequestWrite+0x2a>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d003      	beq.n	8002972 <I2C_MasterRequestWrite+0x2a>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002970:	d108      	bne.n	8002984 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e00b      	b.n	800299c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	2b12      	cmp	r3, #18
 800298a:	d107      	bne.n	800299c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f91d 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c2:	d103      	bne.n	80029cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e035      	b.n	8002a3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d8:	d108      	bne.n	80029ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029da:	897b      	ldrh	r3, [r7, #10]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	e01b      	b.n	8002a24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	11db      	asrs	r3, r3, #7
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 0306 	and.w	r3, r3, #6
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f063 030f 	orn	r3, r3, #15
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <I2C_MasterRequestWrite+0xfc>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f943 	bl	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e010      	b.n	8002a3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <I2C_MasterRequestWrite+0x100>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f933 	bl	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00010008 	.word	0x00010008
 8002a48:	00010002 	.word	0x00010002

08002a4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d006      	beq.n	8002a86 <I2C_MasterRequestRead+0x3a>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d003      	beq.n	8002a86 <I2C_MasterRequestRead+0x3a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e00b      	b.n	8002ab0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d107      	bne.n	8002ab0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f893 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d103      	bne.n	8002ae0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e079      	b.n	8002bd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e05f      	b.n	8002bc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4930      	ldr	r1, [pc, #192]	; (8002be0 <I2C_MasterRequestRead+0x194>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f8b9 	bl	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e054      	b.n	8002bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4929      	ldr	r1, [pc, #164]	; (8002be4 <I2C_MasterRequestRead+0x198>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8a9 	bl	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e044      	b.n	8002bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f831 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9a:	d103      	bne.n	8002ba4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e017      	b.n	8002bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	11db      	asrs	r3, r3, #7
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 0306 	and.w	r3, r3, #6
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f063 030e 	orn	r3, r3, #14
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4907      	ldr	r1, [pc, #28]	; (8002be4 <I2C_MasterRequestRead+0x198>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f865 	bl	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010008 	.word	0x00010008
 8002be4:	00010002 	.word	0x00010002

08002be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	e025      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d021      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe ff3d 	bl	8001a80 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e023      	b.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10d      	bne.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	e00c      	b.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d0b6      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca4:	e051      	b.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb4:	d123      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e046      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d021      	beq.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d06:	f7fe febb 	bl	8001a80 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e020      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10c      	bne.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	e00b      	b.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	43da      	mvns	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d18d      	bne.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da0:	e02d      	b.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f8ce 	bl	8002f44 <I2C_IsAcknowledgeFailed>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e02d      	b.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d021      	beq.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe fe61 	bl	8001a80 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e007      	b.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d1ca      	bne.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e22:	e02d      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f88d 	bl	8002f44 <I2C_IsAcknowledgeFailed>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e02d      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d021      	beq.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7fe fe20 	bl	8001a80 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e007      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d1ca      	bne.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea4:	e042      	b.n	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d119      	bne.n	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0210 	mvn.w	r2, #16
 8002ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e029      	b.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fdca 	bl	8001a80 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d1b5      	bne.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d11b      	bne.n	8002f94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b08b      	sub	sp, #44	; 0x2c
 8002fa4:	af06      	add	r7, sp, #24
 8002fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0fd      	b.n	80031ae <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 fcd8 	bl	800997c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fea5 	bl	8005d28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	687e      	ldr	r6, [r7, #4]
 8002fe6:	466d      	mov	r5, sp
 8002fe8:	f106 0410 	add.w	r4, r6, #16
 8002fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	1d33      	adds	r3, r6, #4
 8002ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff8:	6838      	ldr	r0, [r7, #0]
 8002ffa:	f002 fe6f 	bl	8005cdc <USB_CoreInit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0ce      	b.n	80031ae <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fea0 	bl	8005d5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e04c      	b.n	80030bc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3301      	adds	r3, #1
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	b298      	uxth	r0, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3336      	adds	r3, #54	; 0x36
 8003060:	4602      	mov	r2, r0
 8003062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3303      	adds	r3, #3
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	333c      	adds	r3, #60	; 0x3c
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3ad      	bcc.n	8003022 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e044      	b.n	8003156 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	3301      	adds	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b5      	bcc.n	80030cc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	687e      	ldr	r6, [r7, #4]
 8003168:	466d      	mov	r5, sp
 800316a:	f106 0410 	add.w	r4, r6, #16
 800316e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	1d33      	adds	r3, r6, #4
 8003178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f002 fdfa 	bl	8005d74 <USB_DevInit>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00d      	b.n	80031ae <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fd94 	bl	8007cd4 <USB_DevDisconnect>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_Start+0x16>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e016      	b.n	80031fa <HAL_PCD_Start+0x44>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fd8f 	bl	8005cfc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031de:	2101      	movs	r1, #1
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f006 fe3e 	bl	8009e62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fd68 	bl	8007cc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b088      	sub	sp, #32
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fd6a 	bl	8007ce8 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d102      	bne.n	8003226 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb61 	bl	80038e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fd5c 	bl	8007ce8 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d112      	bne.n	8003262 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f006 fc0c 	bl	8009a72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800325a:	2100      	movs	r1, #0
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f925 	bl	80034ac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fd3e 	bl	8007ce8 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003276:	d10b      	bne.n	8003290 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fd27 	bl	8007ce8 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a4:	d10b      	bne.n	80032be <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b8:	b292      	uxth	r2, r2
 80032ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fd10 	bl	8007ce8 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d126      	bne.n	8003322 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	b292      	uxth	r2, r2
 80032e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0208 	bic.w	r2, r2, #8
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f006 fbed 	bl	8009ae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331c:	b292      	uxth	r2, r2
 800331e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fcde 	bl	8007ce8 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	f040 8084 	bne.w	8003442 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e011      	b.n	8003364 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	b292      	uxth	r2, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	f107 0120 	add.w	r1, r7, #32
 8003358:	440b      	add	r3, r1
 800335a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	3301      	adds	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d9ea      	bls.n	8003340 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	b292      	uxth	r2, r2
 800337e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	b292      	uxth	r2, r2
 8003396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800339a:	bf00      	nop
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f6      	beq.n	800339c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	b292      	uxth	r2, r2
 80033c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e010      	b.n	80033ee <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80033cc:	7ffb      	ldrb	r3, [r7, #31]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4611      	mov	r1, r2
 80033d4:	7ffa      	ldrb	r2, [r7, #31]
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	440a      	add	r2, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	f107 0120 	add.w	r1, r7, #32
 80033e0:	440b      	add	r3, r1
 80033e2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033e6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
 80033ea:	3301      	adds	r3, #1
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d9eb      	bls.n	80033cc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	b292      	uxth	r2, r2
 8003408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	b292      	uxth	r2, r2
 8003420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0204 	orr.w	r2, r2, #4
 8003436:	b292      	uxth	r2, r2
 8003438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f006 fb37 	bl	8009ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 fc4e 	bl	8007ce8 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003456:	d10e      	bne.n	8003476 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f006 faf0 	bl	8009a56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fc34 	bl	8007ce8 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d10b      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349e:	b292      	uxth	r2, r2
 80034a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_PCD_SetAddress+0x1a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e013      	b.n	80034ee <HAL_PCD_SetAddress+0x42>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 fbdb 	bl	8007c9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	4608      	mov	r0, r1
 8003500:	4611      	mov	r1, r2
 8003502:	461a      	mov	r2, r3
 8003504:	4603      	mov	r3, r0
 8003506:	70fb      	strb	r3, [r7, #3]
 8003508:	460b      	mov	r3, r1
 800350a:	803b      	strh	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	da0e      	bge.n	800353a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	705a      	strb	r2, [r3, #1]
 8003538:	e00e      	b.n	8003558 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0207 	and.w	r2, r3, #7
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003564:	883a      	ldrh	r2, [r7, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	78ba      	ldrb	r2, [r7, #2]
 800356e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003582:	78bb      	ldrb	r3, [r7, #2]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d102      	bne.n	800358e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_Open+0xa6>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_Open+0xc4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fc02 	bl	8005db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80035b8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da0e      	bge.n	80035f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	705a      	strb	r2, [r3, #1]
 80035f2:	e00e      	b.n	8003612 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 0207 	and.w	r2, r3, #7
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_PCD_EP_Close+0x6a>
 8003628:	2302      	movs	r3, #2
 800362a:	e00e      	b.n	800364a <HAL_PCD_EP_Close+0x88>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 ff24 	bl	8006488 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	f003 0207 	and.w	r2, r3, #7
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2200      	movs	r2, #0
 8003690:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 f8d6 	bl	8006860 <USB_EPStartXfer>
 80036b4:	e005      	b.n	80036c2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 f8cf 	bl	8006860 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0207 	and.w	r2, r3, #7
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	460b      	mov	r3, r1
 8003708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2201      	movs	r2, #1
 8003744:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003746:	7afb      	ldrb	r3, [r7, #11]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	b2da      	uxtb	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003752:	7afb      	ldrb	r3, [r7, #11]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 f87c 	bl	8006860 <USB_EPStartXfer>
 8003768:	e005      	b.n	8003776 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6979      	ldr	r1, [r7, #20]
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f875 	bl	8006860 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 0207 	and.w	r2, r3, #7
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d901      	bls.n	800379e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e04c      	b.n	8003838 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800379e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da0e      	bge.n	80037c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	705a      	strb	r2, [r3, #1]
 80037c2:	e00c      	b.n	80037de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_PCD_EP_SetStall+0x7e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e01c      	b.n	8003838 <HAL_PCD_EP_SetStall+0xb8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	4618      	mov	r0, r3
 800380e:	f004 f947 	bl	8007aa0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f004 fa6c 	bl	8007d06 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 020f 	and.w	r2, r3, #15
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d901      	bls.n	800385e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800385e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003862:	2b00      	cmp	r3, #0
 8003864:	da0e      	bge.n	8003884 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	705a      	strb	r2, [r3, #1]
 8003882:	e00e      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 0207 	and.w	r2, r3, #7
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_PCD_EP_ClrStall+0x82>
 80038be:	2302      	movs	r3, #2
 80038c0:	e00e      	b.n	80038e0 <HAL_PCD_EP_ClrStall+0xa0>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 f935 	bl	8007b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038f0:	e2df      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003908:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 8158 	bne.w	8003bc2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d152      	bne.n	80039c2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	81fb      	strh	r3, [r7, #14]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	89fb      	ldrh	r3, [r7, #14]
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3328      	adds	r3, #40	; 0x28
 8003944:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	3302      	adds	r3, #2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	441a      	add	r2, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003980:	2100      	movs	r1, #0
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f006 f84d 	bl	8009a22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 828e 	beq.w	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 8289 	bne.w	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b292      	uxth	r2, r2
 80039b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039c0:	e277      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d034      	beq.n	8003a46 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	3306      	adds	r3, #6
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f004 f9c2 	bl	8007da4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	823b      	strh	r3, [r7, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	8a3a      	ldrh	r2, [r7, #16]
 8003a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3a:	b292      	uxth	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f005 ffc2 	bl	80099c8 <HAL_PCD_SetupStageCallback>
 8003a44:	e235      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a46:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f280 8231 	bge.w	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	83bb      	strh	r3, [r7, #28]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	8bba      	ldrh	r2, [r7, #28]
 8003a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	3306      	adds	r3, #6
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <PCD_EP_ISR_Handler+0x1ee>
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d015      	beq.n	8003ad6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	6959      	ldr	r1, [r3, #20]
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f004 f972 	bl	8007da4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	441a      	add	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f005 ff8b 	bl	80099ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d112      	bne.n	8003b24 <PCD_EP_ISR_Handler+0x23c>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	e02f      	b.n	8003b84 <PCD_EP_ISR_Handler+0x29c>
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b3e      	cmp	r3, #62	; 0x3e
 8003b2a:	d813      	bhi.n	8003b54 <PCD_EP_ISR_Handler+0x26c>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <PCD_EP_ISR_Handler+0x25e>
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	3301      	adds	r3, #1
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e017      	b.n	8003b84 <PCD_EP_ISR_Handler+0x29c>
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <PCD_EP_ISR_Handler+0x286>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	827b      	strh	r3, [r7, #18]
 8003b96:	8a7b      	ldrh	r3, [r7, #18]
 8003b98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b9c:	827b      	strh	r3, [r7, #18]
 8003b9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ba0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ba4:	827b      	strh	r3, [r7, #18]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	8a7b      	ldrh	r3, [r7, #18]
 8003bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	8013      	strh	r3, [r2, #0]
 8003bc0:	e177      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bd4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f280 80ea 	bge.w	8003db2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c10:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	7b1b      	ldrb	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d122      	bne.n	8003c74 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	3306      	adds	r3, #6
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8087 	beq.w	8003d6e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	88da      	ldrh	r2, [r3, #6]
 8003c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c6e:	f004 f899 	bl	8007da4 <USB_ReadPMA>
 8003c72:	e07c      	b.n	8003d6e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	78db      	ldrb	r3, [r3, #3]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d108      	bne.n	8003c8e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f923 	bl	8003ece <HAL_PCD_EP_DB_Receive>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c8c:	e06f      	b.n	8003d6e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca8:	847b      	strh	r3, [r7, #34]	; 0x22
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d021      	beq.n	8003d2c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d02a      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	6959      	ldr	r1, [r3, #20]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	891a      	ldrh	r2, [r3, #8]
 8003d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d26:	f004 f83d 	bl	8007da4 <USB_ReadPMA>
 8003d2a:	e020      	b.n	8003d6e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3306      	adds	r3, #6
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d54:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	6959      	ldr	r1, [r3, #20]
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	895a      	ldrh	r2, [r3, #10]
 8003d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d6a:	f004 f81b 	bl	8007da4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d74:	441a      	add	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d80:	441a      	add	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <PCD_EP_ISR_Handler+0x4b0>
 8003d8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d206      	bcs.n	8003da6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f005 fe24 	bl	80099ec <HAL_PCD_DataOutStageCallback>
 8003da4:	e005      	b.n	8003db2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 fd57 	bl	8006860 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003db2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d07a      	beq.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	843b      	strh	r3, [r7, #32]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	8c3b      	ldrh	r3, [r7, #32]
 8003dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	78db      	ldrb	r3, [r3, #3]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d108      	bne.n	8003e22 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d146      	bne.n	8003ea6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d141      	bne.n	8003ea6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	3302      	adds	r3, #2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	8bfb      	ldrh	r3, [r7, #30]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d906      	bls.n	8003e64 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	8bfb      	ldrh	r3, [r7, #30]
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	619a      	str	r2, [r3, #24]
 8003e62:	e002      	b.n	8003e6a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f005 fdd2 	bl	8009a22 <HAL_PCD_DataInStageCallback>
 8003e7e:	e018      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	441a      	add	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	441a      	add	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 fcde 	bl	8006860 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ea4:	e005      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f91b 	bl	80040e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f6ff ad17 	blt.w	80038f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3738      	adds	r7, #56	; 0x38
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d07e      	beq.n	8003fe4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3302      	adds	r3, #2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	8b7b      	ldrh	r3, [r7, #26]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d306      	bcc.n	8003f28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	8b7b      	ldrh	r3, [r7, #26]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	619a      	str	r2, [r3, #24]
 8003f26:	e002      	b.n	8003f2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d123      	bne.n	8003f7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	833b      	strh	r3, [r7, #24]
 8003f52:	8b3b      	ldrh	r3, [r7, #24]
 8003f54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f58:	833b      	strh	r3, [r7, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8b3b      	ldrh	r3, [r7, #24]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	82fb      	strh	r3, [r7, #22]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8087 	beq.w	80040de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6959      	ldr	r1, [r3, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	891a      	ldrh	r2, [r3, #8]
 8003fdc:	8b7b      	ldrh	r3, [r7, #26]
 8003fde:	f003 fee1 	bl	8007da4 <USB_ReadPMA>
 8003fe2:	e07c      	b.n	80040de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3306      	adds	r3, #6
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	429a      	cmp	r2, r3
 8004016:	d306      	bcc.n	8004026 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	8b7b      	ldrh	r3, [r7, #26]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	619a      	str	r2, [r3, #24]
 8004024:	e002      	b.n	800402c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d123      	bne.n	800407c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	83fb      	strh	r3, [r7, #30]
 8004050:	8bfb      	ldrh	r3, [r7, #30]
 8004052:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004056:	83fb      	strh	r3, [r7, #30]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	8bfb      	ldrh	r3, [r7, #30]
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11f      	bne.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	83bb      	strh	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8bbb      	ldrh	r3, [r7, #28]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040c6:	8b7b      	ldrh	r3, [r7, #26]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6959      	ldr	r1, [r3, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	895a      	ldrh	r2, [r3, #10]
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	f003 fe63 	bl	8007da4 <USB_ReadPMA>
    }
  }

  return count;
 80040de:	8b7b      	ldrh	r3, [r7, #26]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b092      	sub	sp, #72	; 0x48
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8132 	beq.w	8004366 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	3302      	adds	r3, #2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004132:	429a      	cmp	r2, r3
 8004134:	d906      	bls.n	8004144 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800413c:	1ad2      	subs	r2, r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	619a      	str	r2, [r3, #24]
 8004142:	e002      	b.n	800414a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d12c      	bne.n	80041ac <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f005 fc62 	bl	8009a22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 822f 	beq.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	827b      	strh	r3, [r7, #18]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	8a7b      	ldrh	r3, [r7, #18]
 8004196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]
 80041aa:	e20d      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01f      	beq.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 81e3 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004208:	441a      	add	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004214:	441a      	add	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d309      	bcc.n	800423a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	621a      	str	r2, [r3, #32]
 8004238:	e014      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8004242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004244:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800424e:	e009      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	785b      	ldrb	r3, [r3, #1]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d155      	bne.n	8004318 <HAL_PCD_EP_DB_Transmit+0x230>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427a:	b29b      	uxth	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	011a      	lsls	r2, r3, #4
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	4413      	add	r3, r2
 800428e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d112      	bne.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	e047      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x268>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	2b3e      	cmp	r3, #62	; 0x3e
 80042c4:	d811      	bhi.n	80042ea <HAL_PCD_EP_DB_Transmit+0x202>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_PCD_EP_DB_Transmit+0x1f4>
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	3301      	adds	r3, #1
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e032      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x268>
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_PCD_EP_DB_Transmit+0x218>
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	b29b      	uxth	r3, r3
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	b29b      	uxth	r3, r3
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29a      	uxth	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e01b      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x268>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d117      	bne.n	8004350 <HAL_PCD_EP_DB_Transmit+0x268>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	4413      	add	r3, r2
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	4413      	add	r3, r2
 8004342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	b29a      	uxth	r2, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6959      	ldr	r1, [r3, #20]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	891a      	ldrh	r2, [r3, #8]
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	b29b      	uxth	r3, r3
 8004360:	f003 fcdc 	bl	8007d1c <USB_WritePMA>
 8004364:	e130      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	3306      	adds	r3, #6
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004396:	429a      	cmp	r2, r3
 8004398:	d306      	bcc.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	619a      	str	r2, [r3, #24]
 80043a6:	e002      	b.n	80043ae <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d12c      	bne.n	8004410 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f005 fb30 	bl	8009a22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 80fd 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]
 800440e:	e0db      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11f      	bne.n	800445a <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 80b1 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800446c:	441a      	add	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004478:	441a      	add	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d309      	bcc.n	800449e <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	1ad2      	subs	r2, r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	621a      	str	r2, [r3, #32]
 800449c:	e014      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80044a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044b2:	e009      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d155      	bne.n	8004582 <HAL_PCD_EP_DB_Transmit+0x49a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	4413      	add	r3, r2
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d112      	bne.n	800452a <HAL_PCD_EP_DB_Transmit+0x442>
 8004504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800450e:	b29a      	uxth	r2, r3
 8004510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29a      	uxth	r2, r3
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	e044      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	2b3e      	cmp	r3, #62	; 0x3e
 800452e:	d811      	bhi.n	8004554 <HAL_PCD_EP_DB_Transmit+0x46c>
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	3301      	adds	r3, #1
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	b29b      	uxth	r3, r3
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	b29a      	uxth	r2, r3
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e02f      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x482>
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	3b01      	subs	r3, #1
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	b29b      	uxth	r3, r3
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	b29b      	uxth	r3, r3
 8004572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457a:	b29a      	uxth	r2, r3
 800457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e018      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d114      	bne.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	4413      	add	r3, r2
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6959      	ldr	r1, [r3, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	895a      	ldrh	r2, [r3, #10]
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f003 fbaa 	bl	8007d1c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	823b      	strh	r3, [r7, #16]
 80045e4:	8a3b      	ldrh	r3, [r7, #16]
 80045e6:	f083 0310 	eor.w	r3, r3, #16
 80045ea:	823b      	strh	r3, [r7, #16]
 80045ec:	8a3b      	ldrh	r3, [r7, #16]
 80045ee:	f083 0320 	eor.w	r3, r3, #32
 80045f2:	823b      	strh	r3, [r7, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	8a3b      	ldrh	r3, [r7, #16]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3748      	adds	r7, #72	; 0x48
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004634:	897b      	ldrh	r3, [r7, #10]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e009      	b.n	800466c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004658:	897a      	ldrh	r2, [r7, #10]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	b29a      	uxth	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	80da      	strh	r2, [r3, #6]
 8004680:	e00b      	b.n	800469a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2201      	movs	r2, #1
 8004686:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	b29a      	uxth	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e26c      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8087 	beq.w	80047d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d00c      	beq.n	80046ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046d4:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0x5e>
 80046e0:	4b8c      	ldr	r3, [pc, #560]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d10b      	bne.n	8004706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	4b89      	ldr	r3, [pc, #548]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x12c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d168      	bne.n	80047d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e246      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x76>
 8004710:	4b80      	ldr	r3, [pc, #512]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7f      	ldr	r2, [pc, #508]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e02e      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x98>
 8004726:	4b7b      	ldr	r3, [pc, #492]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7a      	ldr	r2, [pc, #488]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b78      	ldr	r3, [pc, #480]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a77      	ldr	r2, [pc, #476]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0xbc>
 800474a:	4b72      	ldr	r3, [pc, #456]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a71      	ldr	r2, [pc, #452]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6e      	ldr	r2, [pc, #440]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 8004764:	4b6b      	ldr	r3, [pc, #428]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b68      	ldr	r3, [pc, #416]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a67      	ldr	r2, [pc, #412]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd f97c 	bl	8001a80 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd f978 	bl	8001a80 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1fa      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xe4>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd f968 	bl	8001a80 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd f964 	bl	8001a80 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1e6      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x10c>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e2:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ee:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x18c>
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x176>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1ba      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4939      	ldr	r1, [pc, #228]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x270>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fd f91d 	bl	8001a80 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fd f919 	bl	8001a80 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e19b      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4927      	ldr	r1, [pc, #156]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b26      	ldr	r3, [pc, #152]	; (8004918 <HAL_RCC_OscConfig+0x270>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd f8fc 	bl	8001a80 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fd f8f8 	bl	8001a80 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e17a      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03a      	beq.n	800492c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d019      	beq.n	80048f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_RCC_OscConfig+0x274>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c4:	f7fd f8dc 	bl	8001a80 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fd f8d8 	bl	8001a80 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e15a      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ea:	2001      	movs	r0, #1
 80048ec:	f000 fada 	bl	8004ea4 <RCC_Delay>
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_OscConfig+0x274>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f8:	f7fd f8c2 	bl	8001a80 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fe:	e00f      	b.n	8004920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd f8be 	bl	8001a80 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d908      	bls.n	8004920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e140      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	42420000 	.word	0x42420000
 800491c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	4b9e      	ldr	r3, [pc, #632]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e9      	bne.n	8004900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a6 	beq.w	8004a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493e:	4b97      	ldr	r3, [pc, #604]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4a93      	ldr	r2, [pc, #588]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	61d3      	str	r3, [r2, #28]
 8004956:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b8e      	ldr	r3, [pc, #568]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d118      	bne.n	80049a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a8a      	ldr	r2, [pc, #552]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd f87f 	bl	8001a80 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fd f87b 	bl	8001a80 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0fd      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x312>
 80049ac:	4b7b      	ldr	r3, [pc, #492]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4a7a      	ldr	r2, [pc, #488]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6213      	str	r3, [r2, #32]
 80049b8:	e02d      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x334>
 80049c2:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4a75      	ldr	r2, [pc, #468]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	6213      	str	r3, [r2, #32]
 80049ce:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	6213      	str	r3, [r2, #32]
 80049da:	e01c      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d10c      	bne.n	80049fe <HAL_RCC_OscConfig+0x356>
 80049e4:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4a6c      	ldr	r2, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	6213      	str	r3, [r2, #32]
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6213      	str	r3, [r2, #32]
 80049fc:	e00b      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049fe:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	4a66      	ldr	r2, [pc, #408]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6213      	str	r3, [r2, #32]
 8004a0a:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a63      	ldr	r2, [pc, #396]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d015      	beq.n	8004a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd f82f 	bl	8001a80 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd f82b 	bl	8001a80 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ab      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ee      	beq.n	8004a26 <HAL_RCC_OscConfig+0x37e>
 8004a48:	e014      	b.n	8004a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd f819 	bl	8001a80 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd f815 	bl	8001a80 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e095      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	4b4c      	ldr	r3, [pc, #304]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b48      	ldr	r3, [pc, #288]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8081 	beq.w	8004b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a90:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d061      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d146      	bne.n	8004b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa4:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fc ffe9 	bl	8001a80 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fc ffe5 	bl	8001a80 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e067      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac4:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d108      	bne.n	8004aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a19      	ldr	r1, [r3, #32]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	430b      	orrs	r3, r1
 8004afe:	4927      	ldr	r1, [pc, #156]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fc ffb9 	bl	8001a80 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fc ffb5 	bl	8001a80 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e037      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x46a>
 8004b30:	e02f      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fc ffa2 	bl	8001a80 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fc ff9e 	bl	8001a80 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e020      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x498>
 8004b5e:	e018      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e013      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42420060 	.word	0x42420060

08004ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0d0      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d910      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4965      	ldr	r1, [pc, #404]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d040      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e073      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e06b      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4936      	ldr	r1, [pc, #216]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fef2 	bl	8001a80 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fc feee 	bl	8001a80 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e053      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d210      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 0207 	bic.w	r2, r3, #7
 8004cde:	4922      	ldr	r1, [pc, #136]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	5cd3      	ldrb	r3, [r2, r3]
 8004d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1cc>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1d0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fc fe50 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	0800a850 	.word	0x0800a850
 8004d74:	20000000 	.word	0x20000000
 8004d78:	20000004 	.word	0x20000004

08004d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	b490      	push	{r4, r7}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d82:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d84:	1d3c      	adds	r4, r7, #4
 8004d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d8c:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da6:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8004dba:	e02d      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dbe:	623b      	str	r3, [r7, #32]
      break;
 8004dc0:	e02d      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dce:	4413      	add	r3, r2
 8004dd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c5b      	lsrs	r3, r3, #17
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dee:	4413      	add	r3, r2
 8004df0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004df4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dfa:	fb02 f203 	mul.w	r2, r2, r3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	e004      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	623b      	str	r3, [r7, #32]
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e1a:	623b      	str	r3, [r7, #32]
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3728      	adds	r7, #40	; 0x28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc90      	pop	{r4, r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	0800a7f4 	.word	0x0800a7f4
 8004e30:	0800a804 	.word	0x0800a804
 8004e34:	40021000 	.word	0x40021000
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	003d0900 	.word	0x003d0900

08004e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e44:	4b02      	ldr	r3, [pc, #8]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	20000000 	.word	0x20000000

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e58:	f7ff fff2 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4601      	mov	r1, r0
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4a03      	ldr	r2, [pc, #12]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0800a860 	.word	0x0800a860

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e80:	f7ff ffde 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e84:	4601      	mov	r1, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0adb      	lsrs	r3, r3, #11
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e92:	5cd3      	ldrb	r3, [r2, r3]
 8004e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800a860 	.word	0x0800a860

08004ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <RCC_Delay+0x34>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <RCC_Delay+0x38>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	0a5b      	lsrs	r3, r3, #9
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ec0:	bf00      	nop
  }
  while (Delay --);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	60fa      	str	r2, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f9      	bne.n	8004ec0 <RCC_Delay+0x1c>
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3

08004ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d07d      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f00:	4b4f      	ldr	r3, [pc, #316]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0c:	4b4c      	ldr	r3, [pc, #304]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4a4b      	ldr	r2, [pc, #300]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f16:	61d3      	str	r3, [r2, #28]
 8004f18:	4b49      	ldr	r3, [pc, #292]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f28:	4b46      	ldr	r3, [pc, #280]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d118      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f34:	4b43      	ldr	r3, [pc, #268]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a42      	ldr	r2, [pc, #264]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f40:	f7fc fd9e 	bl	8001a80 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fc fd9a 	bl	8001a80 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e06d      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f66:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d02e      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d027      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f84:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f94:	4b2c      	ldr	r3, [pc, #176]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f9a:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fc fd69 	bl	8001a80 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fd65 	bl	8001a80 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e036      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ee      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4917      	ldr	r1, [pc, #92]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	490b      	ldr	r1, [pc, #44]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	4904      	ldr	r1, [pc, #16]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	40007000 	.word	0x40007000
 8005048:	42420440 	.word	0x42420440

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e076      	b.n	800514c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d009      	beq.n	8005084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	61da      	str	r2, [r3, #28]
 8005076:	e005      	b.n	8005084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fafa 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	ea42 0103 	orr.w	r1, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	0c1a      	lsrs	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 0204 	and.w	r2, r2, #4
 800512a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Transmit+0x22>
 8005172:	2302      	movs	r3, #2
 8005174:	e126      	b.n	80053c4 <HAL_SPI_Transmit+0x270>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517e:	f7fc fc7f 	bl	8001a80 <HAL_GetTick>
 8005182:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d002      	beq.n	800519a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005194:	2302      	movs	r3, #2
 8005196:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005198:	e10b      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_Transmit+0x52>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051aa:	e102      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	d10f      	bne.n	8005214 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d007      	beq.n	8005232 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d14b      	bne.n	80052d4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_Transmit+0xf6>
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d13e      	bne.n	80052c8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	881a      	ldrh	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	1c9a      	adds	r2, r3, #2
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800526e:	e02b      	b.n	80052c8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d112      	bne.n	80052a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80052a2:	e011      	b.n	80052c8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a4:	f7fc fbec 	bl	8001a80 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d803      	bhi.n	80052bc <HAL_SPI_Transmit+0x168>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d102      	bne.n	80052c2 <HAL_SPI_Transmit+0x16e>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052c6:	e074      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ce      	bne.n	8005270 <HAL_SPI_Transmit+0x11c>
 80052d2:	e04c      	b.n	800536e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_SPI_Transmit+0x18e>
 80052dc:	8afb      	ldrh	r3, [r7, #22]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d140      	bne.n	8005364 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005308:	e02c      	b.n	8005364 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d113      	bne.n	8005340 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36
 800533e:	e011      	b.n	8005364 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005340:	f7fc fb9e 	bl	8001a80 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d803      	bhi.n	8005358 <HAL_SPI_Transmit+0x204>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d102      	bne.n	800535e <HAL_SPI_Transmit+0x20a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005362:	e026      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cd      	bne.n	800530a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fbb8 	bl	8005ae8 <SPI_EndRxTxTransaction>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e000      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80053b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e8:	d112      	bne.n	8005410 <HAL_SPI_Receive+0x44>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2204      	movs	r2, #4
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f8f1 	bl	80055ee <HAL_SPI_TransmitReceive>
 800540c:	4603      	mov	r3, r0
 800540e:	e0ea      	b.n	80055e6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_SPI_Receive+0x52>
 800541a:	2302      	movs	r3, #2
 800541c:	e0e3      	b.n	80055e6 <HAL_SPI_Receive+0x21a>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005426:	f7fc fb2b 	bl	8001a80 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d002      	beq.n	800543e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005438:	2302      	movs	r3, #2
 800543a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800543c:	e0ca      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_SPI_Receive+0x7e>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800544e:	e0c1      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2204      	movs	r2, #4
 8005454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005496:	d10f      	bne.n	80054b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d007      	beq.n	80054d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d162      	bne.n	80055a4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054de:	e02e      	b.n	800553e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d115      	bne.n	800551a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f103 020c 	add.w	r2, r3, #12
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005518:	e011      	b.n	800553e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551a:	f7fc fab1 	bl	8001a80 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d803      	bhi.n	8005532 <HAL_SPI_Receive+0x166>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Receive+0x16c>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800553c:	e04a      	b.n	80055d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1cb      	bne.n	80054e0 <HAL_SPI_Receive+0x114>
 8005548:	e031      	b.n	80055ae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d113      	bne.n	8005580 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	b292      	uxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800557e:	e011      	b.n	80055a4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005580:	f7fc fa7e 	bl	8001a80 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d803      	bhi.n	8005598 <HAL_SPI_Receive+0x1cc>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d102      	bne.n	800559e <HAL_SPI_Receive+0x1d2>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055a2:	e017      	b.n	80055d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1cd      	bne.n	800554a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fa46 	bl	8005a44 <SPI_EndRxTransaction>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
 80055d0:	e000      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

error :
 80055d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08c      	sub	sp, #48	; 0x30
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055fc:	2301      	movs	r3, #1
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x26>
 8005610:	2302      	movs	r3, #2
 8005612:	e18a      	b.n	800592a <HAL_SPI_TransmitReceive+0x33c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561c:	f7fc fa30 	bl	8001a80 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800563a:	2b01      	cmp	r3, #1
 800563c:	d00f      	beq.n	800565e <HAL_SPI_TransmitReceive+0x70>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005644:	d107      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x68>
 800564e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800565c:	e15b      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x82>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x82>
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005676:	e14e      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b04      	cmp	r3, #4
 8005682:	d003      	beq.n	800568c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2205      	movs	r2, #5
 8005688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e8:	d178      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x10a>
 80056f2:	8b7b      	ldrh	r3, [r7, #26]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d166      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571c:	e053      	b.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11b      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x176>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x176>
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d113      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d119      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x1b8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d014      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	b292      	uxth	r2, r2
 8005788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a2:	2301      	movs	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057a6:	f7fc f96b 	bl	8001a80 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d807      	bhi.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d003      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057c4:	e0a7      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1a6      	bne.n	800571e <HAL_SPI_TransmitReceive+0x130>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1a1      	bne.n	800571e <HAL_SPI_TransmitReceive+0x130>
 80057da:	e07c      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x1fc>
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d16b      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	e057      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11c      	bne.n	800585a <HAL_SPI_TransmitReceive+0x26c>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_SPI_TransmitReceive+0x26c>
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d114      	bne.n	800585a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d119      	bne.n	800589c <HAL_SPI_TransmitReceive+0x2ae>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800589c:	f7fc f8f0 	bl	8001a80 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d803      	bhi.n	80058b4 <HAL_SPI_TransmitReceive+0x2c6>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x2cc>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058c0:	e029      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1a2      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x224>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d19d      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f904 	bl	8005ae8 <SPI_EndRxTxTransaction>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058f2:	e010      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	e000      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005914:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800592a:	4618      	mov	r0, r3
 800592c:	3730      	adds	r7, #48	; 0x30
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005944:	f7fc f89c 	bl	8001a80 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	4413      	add	r3, r2
 8005952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005954:	f7fc f894 	bl	8001a80 <HAL_GetTick>
 8005958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800595a:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	0d1b      	lsrs	r3, r3, #20
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	fb02 f303 	mul.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800596a:	e054      	b.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d050      	beq.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005974:	f7fc f884 	bl	8001a80 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	429a      	cmp	r2, r3
 8005982:	d902      	bls.n	800598a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d13d      	bne.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a2:	d111      	bne.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	d004      	beq.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b6:	d107      	bne.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	d10f      	bne.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e017      	b.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d19b      	bne.n	800596c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000000 	.word	0x20000000

08005a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a58:	d111      	bne.n	8005a7e <SPI_EndRxTransaction+0x3a>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a62:	d004      	beq.n	8005a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d107      	bne.n	8005a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a86:	d117      	bne.n	8005ab8 <SPI_EndRxTransaction+0x74>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a90:	d112      	bne.n	8005ab8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff ff49 	bl	8005934 <SPI_WaitFlagStateUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e013      	b.n	8005ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff36 	bl	8005934 <SPI_WaitFlagStateUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e000      	b.n	8005ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff18 	bl	8005934 <SPI_WaitFlagStateUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e000      	b.n	8005b1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e03f      	b.n	8005bb6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb fece 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f829 	bl	8005bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bfa:	f023 030c 	bic.w	r3, r3, #12
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2c      	ldr	r2, [pc, #176]	; (8005cd4 <UART_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c28:	f7ff f928 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	e002      	b.n	8005c36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7ff f910 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8005c34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009a      	lsls	r2, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <UART_SetConfig+0x118>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	0119      	lsls	r1, r3, #4
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009a      	lsls	r2, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <UART_SetConfig+0x118>)
 8005c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2064      	movs	r0, #100	; 0x64
 8005c76:	fb00 f303 	mul.w	r3, r0, r3
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	3332      	adds	r3, #50	; 0x32
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <UART_SetConfig+0x118>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8c:	4419      	add	r1, r3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009a      	lsls	r2, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <UART_SetConfig+0x118>)
 8005ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2064      	movs	r0, #100	; 0x64
 8005cae:	fb00 f303 	mul.w	r3, r0, r3
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	3332      	adds	r3, #50	; 0x32
 8005cb8:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <UART_SetConfig+0x118>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	440a      	add	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40013800 	.word	0x40013800
 8005cd8:	51eb851f 	.word	0x51eb851f

08005cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cdc:	b084      	sub	sp, #16
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	f107 0014 	add.w	r0, r7, #20
 8005cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	b004      	add	sp, #16
 8005cfa:	4770      	bx	lr

08005cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	4013      	ands	r3, r2
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d74:	b084      	sub	sp, #16
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	f107 0014 	add.w	r0, r7, #20
 8005d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	b004      	add	sp, #16
 8005db2:	4770      	bx	lr

08005db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b09b      	sub	sp, #108	; 0x6c
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	78db      	ldrb	r3, [r3, #3]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d81f      	bhi.n	8005e26 <USB_ActivateEndpoint+0x72>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USB_ActivateEndpoint+0x38>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e2f 	.word	0x08005e2f
 8005df8:	08005e0b 	.word	0x08005e0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005dfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e08:	e012      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e16:	e00b      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e24:	e004      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005e2c:	e000      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>
      break;
 8005e2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	7b1b      	ldrb	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8149 	bne.w	8006134 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8084 	beq.w	8005fb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	88db      	ldrh	r3, [r3, #6]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	81fb      	strh	r3, [r7, #14]
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01b      	beq.n	8005f30 <USB_ActivateEndpoint+0x17c>
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	81bb      	strh	r3, [r7, #12]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	89bb      	ldrh	r3, [r7, #12]
 8005f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d020      	beq.n	8005f7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	813b      	strh	r3, [r7, #8]
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	f083 0320 	eor.w	r3, r3, #32
 8005f56:	813b      	strh	r3, [r7, #8]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	893b      	ldrh	r3, [r7, #8]
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]
 8005f78:	e27f      	b.n	800647a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	897b      	ldrh	r3, [r7, #10]
 8005f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	8013      	strh	r3, [r2, #0]
 8005fb2:	e262      	b.n	800647a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	4413      	add	r3, r2
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	88db      	ldrh	r3, [r3, #6]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	4413      	add	r3, r2
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	4413      	add	r3, r2
 8006006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800600a:	623b      	str	r3, [r7, #32]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <USB_ActivateEndpoint+0x286>
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601e:	b29a      	uxth	r2, r3
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e02f      	b.n	800609a <USB_ActivateEndpoint+0x2e6>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b3e      	cmp	r3, #62	; 0x3e
 8006040:	d813      	bhi.n	800606a <USB_ActivateEndpoint+0x2b6>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	663b      	str	r3, [r7, #96]	; 0x60
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <USB_ActivateEndpoint+0x2a8>
 8006056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006058:	3301      	adds	r3, #1
 800605a:	663b      	str	r3, [r7, #96]	; 0x60
 800605c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605e:	b29b      	uxth	r3, r3
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b29a      	uxth	r2, r3
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e017      	b.n	800609a <USB_ActivateEndpoint+0x2e6>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <USB_ActivateEndpoint+0x2d0>
 800607e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006080:	3b01      	subs	r3, #1
 8006082:	663b      	str	r3, [r7, #96]	; 0x60
 8006084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006086:	b29b      	uxth	r3, r3
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	b29b      	uxth	r3, r3
 800608c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006094:	b29a      	uxth	r2, r3
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	83fb      	strh	r3, [r7, #30]
 80060a8:	8bfb      	ldrh	r3, [r7, #30]
 80060aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <USB_ActivateEndpoint+0x336>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	83bb      	strh	r3, [r7, #28]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8bbb      	ldrh	r3, [r7, #28]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	837b      	strh	r3, [r7, #26]
 8006102:	8b7b      	ldrh	r3, [r7, #26]
 8006104:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006108:	837b      	strh	r3, [r7, #26]
 800610a:	8b7b      	ldrh	r3, [r7, #26]
 800610c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006110:	837b      	strh	r3, [r7, #26]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8b7b      	ldrh	r3, [r7, #26]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
 8006132:	e1a2      	b.n	800647a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	65bb      	str	r3, [r7, #88]	; 0x58
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006180:	4413      	add	r3, r2
 8006182:	65bb      	str	r3, [r7, #88]	; 0x58
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	011a      	lsls	r2, r3, #4
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	4413      	add	r3, r2
 800618e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006192:	657b      	str	r3, [r7, #84]	; 0x54
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	891b      	ldrh	r3, [r3, #8]
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	4413      	add	r3, r2
 80061b6:	653b      	str	r3, [r7, #80]	; 0x50
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	011a      	lsls	r2, r3, #4
 80061be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	895b      	ldrh	r3, [r3, #10]
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8091 	bne.w	8006304 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80061f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <USB_ActivateEndpoint+0x47e>
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800622a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006240:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <USB_ActivateEndpoint+0x4ce>
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006298:	86bb      	strh	r3, [r7, #52]	; 0x34
 800629a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800629c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80062ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8013      	strh	r3, [r2, #0]
 8006302:	e0ba      	b.n	800647a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01d      	beq.n	800635c <USB_ActivateEndpoint+0x5a8>
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800636c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01d      	beq.n	80063b4 <USB_ActivateEndpoint+0x600>
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	78db      	ldrb	r3, [r3, #3]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d024      	beq.n	8006406 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063da:	f083 0320 	eor.w	r3, r3, #32
 80063de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	b29b      	uxth	r3, r3
 8006402:	8013      	strh	r3, [r2, #0]
 8006404:	e01d      	b.n	8006442 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800647a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800647e:	4618      	mov	r0, r3
 8006480:	376c      	adds	r7, #108	; 0x6c
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr

08006488 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006488:	b480      	push	{r7}
 800648a:	b08d      	sub	sp, #52	; 0x34
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	7b1b      	ldrb	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f040 808e 	bne.w	80065b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d044      	beq.n	800652e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	81bb      	strh	r3, [r7, #12]
 80064b2:	89bb      	ldrh	r3, [r7, #12]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_DeactivateEndpoint+0x6c>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	817b      	strh	r3, [r7, #10]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	897b      	ldrh	r3, [r7, #10]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800650a:	813b      	strh	r3, [r7, #8]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	893b      	ldrh	r3, [r7, #8]
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
 800652c:	e192      	b.n	8006854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	827b      	strh	r3, [r7, #18]
 800653c:	8a7b      	ldrh	r3, [r7, #18]
 800653e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01b      	beq.n	800657e <USB_DeactivateEndpoint+0xf6>
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655c:	823b      	strh	r3, [r7, #16]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	441a      	add	r2, r3
 8006568:	8a3b      	ldrh	r3, [r7, #16]
 800656a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657a:	b29b      	uxth	r3, r3
 800657c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006594:	81fb      	strh	r3, [r7, #14]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	89fb      	ldrh	r3, [r7, #14]
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]
 80065b6:	e14d      	b.n	8006854 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 80a5 	bne.w	800670c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	843b      	strh	r3, [r7, #32]
 80065d0:	8c3b      	ldrh	r3, [r7, #32]
 80065d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01b      	beq.n	8006612 <USB_DeactivateEndpoint+0x18a>
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f0:	83fb      	strh	r3, [r7, #30]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	8bfb      	ldrh	r3, [r7, #30]
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	83bb      	strh	r3, [r7, #28]
 8006620:	8bbb      	ldrh	r3, [r7, #28]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <USB_DeactivateEndpoint+0x1da>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	837b      	strh	r3, [r7, #26]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	8b7b      	ldrh	r3, [r7, #26]
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	833b      	strh	r3, [r7, #24]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	8b3b      	ldrh	r3, [r7, #24]
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	82fb      	strh	r3, [r7, #22]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8afb      	ldrh	r3, [r7, #22]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	82bb      	strh	r3, [r7, #20]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8abb      	ldrh	r3, [r7, #20]
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
 800670a:	e0a3      	b.n	8006854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800671a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800671c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01b      	beq.n	800675c <USB_DeactivateEndpoint+0x2d4>
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006758:	b29b      	uxth	r3, r3
 800675a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	857b      	strh	r3, [r7, #42]	; 0x2a
 800676a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01b      	beq.n	80067ac <USB_DeactivateEndpoint+0x324>
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	853b      	strh	r3, [r7, #40]	; 0x28
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	847b      	strh	r3, [r7, #34]	; 0x22
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3734      	adds	r7, #52	; 0x34
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b0c4      	sub	sp, #272	; 0x110
 8006864:	af00      	add	r7, sp, #0
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	463b      	mov	r3, r7
 800686c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	2b01      	cmp	r3, #1
 8006876:	f040 8557 	bne.w	8007328 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	429a      	cmp	r2, r3
 8006888:	d905      	bls.n	8006896 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006894:	e004      	b.n	80068a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	7b1b      	ldrb	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d12c      	bne.n	8006904 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6959      	ldr	r1, [r3, #20]
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	88da      	ldrh	r2, [r3, #6]
 80068b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	1d38      	adds	r0, r7, #4
 80068be:	6800      	ldr	r0, [r0, #0]
 80068c0:	f001 fa2c 	bl	8007d1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	1d3b      	adds	r3, r7, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	011a      	lsls	r2, r3, #4
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068ec:	f107 0310 	add.w	r3, r7, #16
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	f000 bcdd 	b.w	80072be <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	78db      	ldrb	r3, [r3, #3]
 800690a:	2b02      	cmp	r3, #2
 800690c:	f040 8347 	bne.w	8006f9e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006910:	463b      	mov	r3, r7
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6a1a      	ldr	r2, [r3, #32]
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	f240 82eb 	bls.w	8006ef8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006922:	1d3b      	adds	r3, r7, #4
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006940:	1d3b      	adds	r3, r7, #4
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	463b      	mov	r3, r7
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006978:	1d3b      	adds	r3, r7, #4
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8159 	beq.w	8006c46 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d164      	bne.n	8006a6e <USB_EPStartXfer+0x20e>
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	4413      	add	r3, r2
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	011a      	lsls	r2, r3, #4
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	4413      	add	r3, r2
 80069c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d112      	bne.n	80069fc <USB_EPStartXfer+0x19c>
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e054      	b.n	8006aa6 <USB_EPStartXfer+0x246>
 80069fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a00:	2b3e      	cmp	r3, #62	; 0x3e
 8006a02:	d817      	bhi.n	8006a34 <USB_EPStartXfer+0x1d4>
 8006a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <USB_EPStartXfer+0x1c4>
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e038      	b.n	8006aa6 <USB_EPStartXfer+0x246>
 8006a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USB_EPStartXfer+0x1f4>
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e01b      	b.n	8006aa6 <USB_EPStartXfer+0x246>
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d116      	bne.n	8006aa6 <USB_EPStartXfer+0x246>
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	4413      	add	r3, r2
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	011a      	lsls	r2, r3, #4
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	895b      	ldrh	r3, [r3, #10]
 8006aac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6959      	ldr	r1, [r3, #20]
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006ac0:	1d38      	adds	r0, r7, #4
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	f001 f92a 	bl	8007d1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad2:	441a      	add	r2, r3
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d909      	bls.n	8006afe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	621a      	str	r2, [r3, #32]
 8006afc:	e008      	b.n	8006b10 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d164      	bne.n	8006be4 <USB_EPStartXfer+0x384>
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	011a      	lsls	r2, r3, #4
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d112      	bne.n	8006b72 <USB_EPStartXfer+0x312>
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e057      	b.n	8006c22 <USB_EPStartXfer+0x3c2>
 8006b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b76:	2b3e      	cmp	r3, #62	; 0x3e
 8006b78:	d817      	bhi.n	8006baa <USB_EPStartXfer+0x34a>
 8006b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0x33a>
 8006b90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e03b      	b.n	8006c22 <USB_EPStartXfer+0x3c2>
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USB_EPStartXfer+0x36a>
 8006bc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e01e      	b.n	8006c22 <USB_EPStartXfer+0x3c2>
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d119      	bne.n	8006c22 <USB_EPStartXfer+0x3c2>
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	4413      	add	r3, r2
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	463b      	mov	r3, r7
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	891b      	ldrh	r3, [r3, #8]
 8006c28:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006c3c:	1d38      	adds	r0, r7, #4
 8006c3e:	6800      	ldr	r0, [r0, #0]
 8006c40:	f001 f86c 	bl	8007d1c <USB_WritePMA>
 8006c44:	e33b      	b.n	80072be <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c46:	463b      	mov	r3, r7
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d164      	bne.n	8006d1a <USB_EPStartXfer+0x4ba>
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c64:	4413      	add	r3, r2
 8006c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c68:	463b      	mov	r3, r7
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	011a      	lsls	r2, r3, #4
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d112      	bne.n	8006ca8 <USB_EPStartXfer+0x448>
 8006c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e057      	b.n	8006d58 <USB_EPStartXfer+0x4f8>
 8006ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cac:	2b3e      	cmp	r3, #62	; 0x3e
 8006cae:	d817      	bhi.n	8006ce0 <USB_EPStartXfer+0x480>
 8006cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <USB_EPStartXfer+0x470>
 8006cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cca:	3301      	adds	r3, #1
 8006ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e03b      	b.n	8006d58 <USB_EPStartXfer+0x4f8>
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <USB_EPStartXfer+0x4a0>
 8006cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	029b      	lsls	r3, r3, #10
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e01e      	b.n	8006d58 <USB_EPStartXfer+0x4f8>
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d119      	bne.n	8006d58 <USB_EPStartXfer+0x4f8>
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2a:	1d3b      	adds	r3, r7, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d38:	4413      	add	r3, r2
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	891b      	ldrh	r3, [r3, #8]
 8006d5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6959      	ldr	r1, [r3, #20]
 8006d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d72:	1d38      	adds	r0, r7, #4
 8006d74:	6800      	ldr	r0, [r0, #0]
 8006d76:	f000 ffd1 	bl	8007d1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695a      	ldr	r2, [r3, #20]
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d84:	441a      	add	r2, r3
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	463b      	mov	r3, r7
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d909      	bls.n	8006db0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	621a      	str	r2, [r3, #32]
 8006dae:	e008      	b.n	8006dc2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006dba:	463b      	mov	r3, r7
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d164      	bne.n	8006e9c <USB_EPStartXfer+0x63c>
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de6:	4413      	add	r3, r2
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <USB_EPStartXfer+0x5ca>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	e054      	b.n	8006ed4 <USB_EPStartXfer+0x674>
 8006e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e30:	d817      	bhi.n	8006e62 <USB_EPStartXfer+0x602>
 8006e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <USB_EPStartXfer+0x5f2>
 8006e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e038      	b.n	8006ed4 <USB_EPStartXfer+0x674>
 8006e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <USB_EPStartXfer+0x622>
 8006e78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e01b      	b.n	8006ed4 <USB_EPStartXfer+0x674>
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d116      	bne.n	8006ed4 <USB_EPStartXfer+0x674>
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	4413      	add	r3, r2
 8006eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	011a      	lsls	r2, r3, #4
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6959      	ldr	r1, [r3, #20]
 8006ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006eee:	1d38      	adds	r0, r7, #4
 8006ef0:	6800      	ldr	r0, [r0, #0]
 8006ef2:	f000 ff13 	bl	8007d1c <USB_WritePMA>
 8006ef6:	e1e2      	b.n	80072be <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	463b      	mov	r3, r7
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f46:	1d3b      	adds	r3, r7, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5a:	4413      	add	r3, r2
 8006f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	011a      	lsls	r2, r3, #4
 8006f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f68:	4413      	add	r3, r2
 8006f6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	891b      	ldrh	r3, [r3, #8]
 8006f80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6959      	ldr	r1, [r3, #20]
 8006f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006f94:	1d38      	adds	r0, r7, #4
 8006f96:	6800      	ldr	r0, [r0, #0]
 8006f98:	f000 fec0 	bl	8007d1c <USB_WritePMA>
 8006f9c:	e18f      	b.n	80072be <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f9e:	1d3b      	adds	r3, r7, #4
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 808f 	beq.w	80070d8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d164      	bne.n	8007094 <USB_EPStartXfer+0x834>
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd0:	1d3b      	adds	r3, r7, #4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fde:	4413      	add	r3, r2
 8006fe0:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	011a      	lsls	r2, r3, #4
 8006fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fec:	4413      	add	r3, r2
 8006fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d112      	bne.n	8007022 <USB_EPStartXfer+0x7c2>
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007006:	b29a      	uxth	r2, r3
 8007008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e054      	b.n	80070cc <USB_EPStartXfer+0x86c>
 8007022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007026:	2b3e      	cmp	r3, #62	; 0x3e
 8007028:	d817      	bhi.n	800705a <USB_EPStartXfer+0x7fa>
 800702a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <USB_EPStartXfer+0x7ea>
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	3301      	adds	r3, #1
 8007046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	b29b      	uxth	r3, r3
 8007050:	029b      	lsls	r3, r3, #10
 8007052:	b29a      	uxth	r2, r3
 8007054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e038      	b.n	80070cc <USB_EPStartXfer+0x86c>
 800705a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <USB_EPStartXfer+0x81a>
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007074:	3b01      	subs	r3, #1
 8007076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	b29b      	uxth	r3, r3
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	e01b      	b.n	80070cc <USB_EPStartXfer+0x86c>
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d116      	bne.n	80070cc <USB_EPStartXfer+0x86c>
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ac:	4413      	add	r3, r2
 80070ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	011a      	lsls	r2, r3, #4
 80070b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070c0:	677b      	str	r3, [r7, #116]	; 0x74
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	895b      	ldrh	r3, [r3, #10]
 80070d2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80070d6:	e097      	b.n	8007208 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d168      	bne.n	80071b4 <USB_EPStartXfer+0x954>
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070fa:	4413      	add	r3, r2
 80070fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	011a      	lsls	r2, r3, #4
 8007108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800710c:	4413      	add	r3, r2
 800710e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d112      	bne.n	8007142 <USB_EPStartXfer+0x8e2>
 800711c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007126:	b29a      	uxth	r2, r3
 8007128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29a      	uxth	r2, r3
 800713c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e05d      	b.n	80071fe <USB_EPStartXfer+0x99e>
 8007142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007146:	2b3e      	cmp	r3, #62	; 0x3e
 8007148:	d817      	bhi.n	800717a <USB_EPStartXfer+0x91a>
 800714a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <USB_EPStartXfer+0x90a>
 8007160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007164:	3301      	adds	r3, #1
 8007166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800716a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29a      	uxth	r2, r3
 8007174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e041      	b.n	80071fe <USB_EPStartXfer+0x99e>
 800717a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <USB_EPStartXfer+0x93a>
 8007190:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007194:	3b01      	subs	r3, #1
 8007196:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800719a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800719e:	b29b      	uxth	r3, r3
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e024      	b.n	80071fe <USB_EPStartXfer+0x99e>
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d11f      	bne.n	80071fe <USB_EPStartXfer+0x99e>
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071d6:	4413      	add	r3, r2
 80071d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	011a      	lsls	r2, r3, #4
 80071e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071fe:	463b      	mov	r3, r7
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	891b      	ldrh	r3, [r3, #8]
 8007204:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6959      	ldr	r1, [r3, #20]
 800720e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007212:	b29b      	uxth	r3, r3
 8007214:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007218:	1d38      	adds	r0, r7, #4
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	f000 fd7e 	bl	8007d1c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d122      	bne.n	8007270 <USB_EPStartXfer+0xa10>
 800722a:	1d3b      	adds	r3, r7, #4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007248:	1d3b      	adds	r3, r7, #4
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]
 800726e:	e026      	b.n	80072be <USB_EPStartXfer+0xa5e>
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d121      	bne.n	80072be <USB_EPStartXfer+0xa5e>
 800727a:	1d3b      	adds	r3, r7, #4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	463b      	mov	r3, r7
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	463b      	mov	r3, r7
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	441a      	add	r2, r3
 80072a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80072aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f107 020e 	add.w	r2, r7, #14
 80072d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072dc:	8013      	strh	r3, [r2, #0]
 80072de:	f107 030e 	add.w	r3, r7, #14
 80072e2:	f107 020e 	add.w	r2, r7, #14
 80072e6:	8812      	ldrh	r2, [r2, #0]
 80072e8:	f082 0210 	eor.w	r2, r2, #16
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	f107 030e 	add.w	r3, r7, #14
 80072f2:	f107 020e 	add.w	r2, r7, #14
 80072f6:	8812      	ldrh	r2, [r2, #0]
 80072f8:	f082 0220 	eor.w	r2, r2, #32
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	441a      	add	r2, r3
 800730c:	f107 030e 	add.w	r3, r7, #14
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]
 8007326:	e3b5      	b.n	8007a94 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007328:	463b      	mov	r3, r7
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	7b1b      	ldrb	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 8090 	bne.w	8007454 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	463b      	mov	r3, r7
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d90e      	bls.n	8007362 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	463b      	mov	r3, r7
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	619a      	str	r2, [r3, #24]
 8007360:	e008      	b.n	8007374 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007362:	463b      	mov	r3, r7
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007384:	b29b      	uxth	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800738c:	4413      	add	r3, r2
 800738e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800739e:	4413      	add	r3, r2
 80073a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d116      	bne.n	80073de <USB_EPStartXfer+0xb7e>
 80073b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e32c      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
 80073de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e2:	2b3e      	cmp	r3, #62	; 0x3e
 80073e4:	d818      	bhi.n	8007418 <USB_EPStartXfer+0xbb8>
 80073e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ea:	085b      	lsrs	r3, r3, #1
 80073ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <USB_EPStartXfer+0xba6>
 80073fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007400:	3301      	adds	r3, #1
 8007402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007406:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e30f      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
 8007418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <USB_EPStartXfer+0xbd8>
 800742e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007432:	3b01      	subs	r3, #1
 8007434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800743c:	b29b      	uxth	r3, r3
 800743e:	029b      	lsls	r3, r3, #10
 8007440:	b29b      	uxth	r3, r3
 8007442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	e2f1      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007454:	463b      	mov	r3, r7
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	78db      	ldrb	r3, [r3, #3]
 800745a:	2b02      	cmp	r3, #2
 800745c:	f040 818f 	bne.w	800777e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d175      	bne.n	8007556 <USB_EPStartXfer+0xcf6>
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747a:	b29b      	uxth	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007482:	4413      	add	r3, r2
 8007484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	011a      	lsls	r2, r3, #4
 8007490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007494:	4413      	add	r3, r2
 8007496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800749a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800749e:	463b      	mov	r3, r7
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <USB_EPStartXfer+0xc76>
 80074a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e065      	b.n	80075a2 <USB_EPStartXfer+0xd42>
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b3e      	cmp	r3, #62	; 0x3e
 80074de:	d81a      	bhi.n	8007516 <USB_EPStartXfer+0xcb6>
 80074e0:	463b      	mov	r3, r7
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ec:	463b      	mov	r3, r7
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <USB_EPStartXfer+0xca4>
 80074fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e045      	b.n	80075a2 <USB_EPStartXfer+0xd42>
 8007516:	463b      	mov	r3, r7
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007522:	463b      	mov	r3, r7
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <USB_EPStartXfer+0xcda>
 8007530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007534:	3b01      	subs	r3, #1
 8007536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800753a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e025      	b.n	80075a2 <USB_EPStartXfer+0xd42>
 8007556:	463b      	mov	r3, r7
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d120      	bne.n	80075a2 <USB_EPStartXfer+0xd42>
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007578:	4413      	add	r3, r2
 800757a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	011a      	lsls	r2, r3, #4
 8007586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800758a:	4413      	add	r3, r2
 800758c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007594:	463b      	mov	r3, r7
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d175      	bne.n	80076a0 <USB_EPStartXfer+0xe40>
 80075b4:	1d3b      	adds	r3, r7, #4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075cc:	4413      	add	r3, r2
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	011a      	lsls	r2, r3, #4
 80075da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075de:	4413      	add	r3, r2
 80075e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d116      	bne.n	8007620 <USB_EPStartXfer+0xdc0>
 80075f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075fe:	b29a      	uxth	r2, r3
 8007600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007616:	b29a      	uxth	r2, r3
 8007618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	e061      	b.n	80076e4 <USB_EPStartXfer+0xe84>
 8007620:	463b      	mov	r3, r7
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b3e      	cmp	r3, #62	; 0x3e
 8007628:	d81a      	bhi.n	8007660 <USB_EPStartXfer+0xe00>
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007636:	463b      	mov	r3, r7
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <USB_EPStartXfer+0xdee>
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	3301      	adds	r3, #1
 800764a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	b29b      	uxth	r3, r3
 8007654:	029b      	lsls	r3, r3, #10
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e041      	b.n	80076e4 <USB_EPStartXfer+0xe84>
 8007660:	463b      	mov	r3, r7
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800766c:	463b      	mov	r3, r7
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <USB_EPStartXfer+0xe24>
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	3b01      	subs	r3, #1
 8007680:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	b29b      	uxth	r3, r3
 800768a:	029b      	lsls	r3, r3, #10
 800768c:	b29b      	uxth	r3, r3
 800768e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e021      	b.n	80076e4 <USB_EPStartXfer+0xe84>
 80076a0:	463b      	mov	r3, r7
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d11c      	bne.n	80076e4 <USB_EPStartXfer+0xe84>
 80076aa:	1d3b      	adds	r3, r7, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076ba:	4413      	add	r3, r2
 80076bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076c0:	463b      	mov	r3, r7
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	011a      	lsls	r2, r3, #4
 80076c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	b29a      	uxth	r2, r3
 80076de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076e4:	463b      	mov	r3, r7
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 81a4 	beq.w	8007a38 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	463b      	mov	r3, r7
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007704:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <USB_EPStartXfer+0xebc>
 8007710:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10d      	bne.n	8007738 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800771c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007724:	2b00      	cmp	r3, #0
 8007726:	f040 8187 	bne.w	8007a38 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800772a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 8180 	bne.w	8007a38 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007738:	1d3b      	adds	r3, r7, #4
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	463b      	mov	r3, r7
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	463b      	mov	r3, r7
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]
 800777c:	e15c      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800777e:	463b      	mov	r3, r7
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	78db      	ldrb	r3, [r3, #3]
 8007784:	2b01      	cmp	r3, #1
 8007786:	f040 8155 	bne.w	8007a34 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800778a:	463b      	mov	r3, r7
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	463b      	mov	r3, r7
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d90e      	bls.n	80077b8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800779a:	463b      	mov	r3, r7
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699a      	ldr	r2, [r3, #24]
 80077aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	619a      	str	r2, [r3, #24]
 80077b6:	e008      	b.n	80077ca <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80077b8:	463b      	mov	r3, r7
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80077c2:	463b      	mov	r3, r7
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d16f      	bne.n	80078b4 <USB_EPStartXfer+0x1054>
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077dc:	1d3b      	adds	r3, r7, #4
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077ec:	4413      	add	r3, r2
 80077ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077f2:	463b      	mov	r3, r7
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	011a      	lsls	r2, r3, #4
 80077fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077fe:	4413      	add	r3, r2
 8007800:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d116      	bne.n	800783e <USB_EPStartXfer+0xfde>
 8007810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e05f      	b.n	80078fe <USB_EPStartXfer+0x109e>
 800783e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007842:	2b3e      	cmp	r3, #62	; 0x3e
 8007844:	d818      	bhi.n	8007878 <USB_EPStartXfer+0x1018>
 8007846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <USB_EPStartXfer+0x1006>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	3301      	adds	r3, #1
 8007862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29a      	uxth	r2, r3
 8007870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	e042      	b.n	80078fe <USB_EPStartXfer+0x109e>
 8007878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_EPStartXfer+0x1038>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	3b01      	subs	r3, #1
 8007894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	b29b      	uxth	r3, r3
 800789e:	029b      	lsls	r3, r3, #10
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	e024      	b.n	80078fe <USB_EPStartXfer+0x109e>
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d11f      	bne.n	80078fe <USB_EPStartXfer+0x109e>
 80078be:	1d3b      	adds	r3, r7, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078d6:	4413      	add	r3, r2
 80078d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078dc:	463b      	mov	r3, r7
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	011a      	lsls	r2, r3, #4
 80078e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078e8:	4413      	add	r3, r2
 80078ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078fc:	801a      	strh	r2, [r3, #0]
 80078fe:	1d3b      	adds	r3, r7, #4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d16f      	bne.n	80079f0 <USB_EPStartXfer+0x1190>
 8007910:	1d3b      	adds	r3, r7, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007918:	1d3b      	adds	r3, r7, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007928:	4413      	add	r3, r2
 800792a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800792e:	463b      	mov	r3, r7
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800793a:	4413      	add	r3, r2
 800793c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d116      	bne.n	800797a <USB_EPStartXfer+0x111a>
 800794c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007970:	b29a      	uxth	r2, r3
 8007972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	e05e      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
 800797a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797e:	2b3e      	cmp	r3, #62	; 0x3e
 8007980:	d818      	bhi.n	80079b4 <USB_EPStartXfer+0x1154>
 8007982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800798c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <USB_EPStartXfer+0x1142>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	3301      	adds	r3, #1
 800799e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	029b      	lsls	r3, r3, #10
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	e041      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
 80079b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b8:	095b      	lsrs	r3, r3, #5
 80079ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <USB_EPStartXfer+0x1174>
 80079ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ce:	3b01      	subs	r3, #1
 80079d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d8:	b29b      	uxth	r3, r3
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	b29b      	uxth	r3, r3
 80079de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	e023      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d11e      	bne.n	8007a38 <USB_EPStartXfer+0x11d8>
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a10:	463b      	mov	r3, r7
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	011a      	lsls	r2, r3, #4
 8007a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e001      	b.n	8007a38 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e02e      	b.n	8007a96 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a52:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007a56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a5e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007a62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a6a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007a6e:	1d3b      	adds	r3, r7, #4
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	441a      	add	r2, r3
 8007a7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d020      	beq.n	8007af4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac8:	81bb      	strh	r3, [r7, #12]
 8007aca:	89bb      	ldrh	r3, [r7, #12]
 8007acc:	f083 0310 	eor.w	r3, r3, #16
 8007ad0:	81bb      	strh	r3, [r7, #12]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	441a      	add	r2, r3
 8007adc:	89bb      	ldrh	r3, [r7, #12]
 8007ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8013      	strh	r3, [r2, #0]
 8007af2:	e01f      	b.n	8007b34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	81fb      	strh	r3, [r7, #14]
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b12:	81fb      	strh	r3, [r7, #14]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
 8007b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	7b1b      	ldrb	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 809d 	bne.w	8007c8e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d04c      	beq.n	8007bf6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	823b      	strh	r3, [r7, #16]
 8007b6a:	8a3b      	ldrh	r3, [r7, #16]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01b      	beq.n	8007bac <USB_EPClearStall+0x6c>
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	81fb      	strh	r3, [r7, #14]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	89fb      	ldrh	r3, [r7, #14]
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	78db      	ldrb	r3, [r3, #3]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d06c      	beq.n	8007c8e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bca:	81bb      	strh	r3, [r7, #12]
 8007bcc:	89bb      	ldrh	r3, [r7, #12]
 8007bce:	f083 0320 	eor.w	r3, r3, #32
 8007bd2:	81bb      	strh	r3, [r7, #12]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	441a      	add	r2, r3
 8007bde:	89bb      	ldrh	r3, [r7, #12]
 8007be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	8013      	strh	r3, [r2, #0]
 8007bf4:	e04b      	b.n	8007c8e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	82fb      	strh	r3, [r7, #22]
 8007c04:	8afb      	ldrh	r3, [r7, #22]
 8007c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01b      	beq.n	8007c46 <USB_EPClearStall+0x106>
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	82bb      	strh	r3, [r7, #20]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8abb      	ldrh	r3, [r7, #20]
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5c:	827b      	strh	r3, [r7, #18]
 8007c5e:	8a7b      	ldrh	r3, [r7, #18]
 8007c60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c64:	827b      	strh	r3, [r7, #18]
 8007c66:	8a7b      	ldrh	r3, [r7, #18]
 8007c68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c6c:	827b      	strh	r3, [r7, #18]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	441a      	add	r2, r3
 8007c78:	8a7b      	ldrh	r3, [r7, #18]
 8007c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d103      	bne.n	8007cb4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2280      	movs	r2, #128	; 0x80
 8007cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr

08007ce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b08d      	sub	sp, #52	; 0x34
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4611      	mov	r1, r2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	80fb      	strh	r3, [r7, #6]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d32:	88bb      	ldrh	r3, [r7, #4]
 8007d34:	3301      	adds	r3, #1
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d42:	88fb      	ldrh	r3, [r7, #6]
 8007d44:	005a      	lsls	r2, r3, #1
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d54:	e01e      	b.n	8007d94 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	3301      	adds	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	3302      	adds	r3, #2
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	3302      	adds	r3, #2
 8007d86:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	3b01      	subs	r3, #1
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1dd      	bne.n	8007d56 <USB_WritePMA+0x3a>
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	3734      	adds	r7, #52	; 0x34
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b08b      	sub	sp, #44	; 0x2c
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4611      	mov	r1, r2
 8007db0:	461a      	mov	r2, r3
 8007db2:	460b      	mov	r3, r1
 8007db4:	80fb      	strh	r3, [r7, #6]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007dba:	88bb      	ldrh	r3, [r7, #4]
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	005a      	lsls	r2, r3, #1
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
 8007ddc:	e01b      	b.n	8007e16 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	3302      	adds	r3, #2
 8007dea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	0a1b      	lsrs	r3, r3, #8
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3301      	adds	r3, #1
 8007e08:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	3b01      	subs	r3, #1
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e0      	bne.n	8007dde <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e1c:	88bb      	ldrh	r3, [r7, #4]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	701a      	strb	r2, [r3, #0]
  }
}
 8007e38:	bf00      	nop
 8007e3a:	372c      	adds	r7, #44	; 0x2c
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	7c1b      	ldrb	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d115      	bne.n	8007e86 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e5e:	2202      	movs	r2, #2
 8007e60:	2181      	movs	r1, #129	; 0x81
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fec1 	bl	8009bea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e72:	2202      	movs	r2, #2
 8007e74:	2101      	movs	r1, #1
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 feb7 	bl	8009bea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007e84:	e012      	b.n	8007eac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e86:	2340      	movs	r3, #64	; 0x40
 8007e88:	2202      	movs	r2, #2
 8007e8a:	2181      	movs	r1, #129	; 0x81
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 feac 	bl	8009bea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e98:	2340      	movs	r3, #64	; 0x40
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fea3 	bl	8009bea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007eac:	2308      	movs	r3, #8
 8007eae:	2203      	movs	r2, #3
 8007eb0:	2182      	movs	r1, #130	; 0x82
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fe99 	bl	8009bea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ebe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ec2:	f001 ffb9 	bl	8009e38 <USBD_static_malloc>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
 8007edc:	e026      	b.n	8007f2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f12:	2101      	movs	r1, #1
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 ff59 	bl	8009dcc <USBD_LL_PrepareReceive>
 8007f1a:	e007      	b.n	8007f2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f22:	2340      	movs	r3, #64	; 0x40
 8007f24:	2101      	movs	r1, #1
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 ff50 	bl	8009dcc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f46:	2181      	movs	r1, #129	; 0x81
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fe74 	bl	8009c36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fe6d 	bl	8009c36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f64:	2182      	movs	r1, #130	; 0x82
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fe65 	bl	8009c36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 ff5f 	bl	8009e50 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d039      	beq.n	8008042 <USBD_CDC_Setup+0x9e>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d17c      	bne.n	80080cc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d029      	beq.n	800802e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b25b      	sxtb	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da11      	bge.n	8008008 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ff0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	88d2      	ldrh	r2, [r2, #6]
 8007ff6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ff8:	6939      	ldr	r1, [r7, #16]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f9f9 	bl	80093f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008006:	e068      	b.n	80080da <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785a      	ldrb	r2, [r3, #1]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88db      	ldrh	r3, [r3, #6]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800801e:	6939      	ldr	r1, [r7, #16]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	88db      	ldrh	r3, [r3, #6]
 8008024:	461a      	mov	r2, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fa14 	bl	8009454 <USBD_CtlPrepareRx>
      break;
 800802c:	e055      	b.n	80080da <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	7850      	ldrb	r0, [r2, #1]
 800803a:	2200      	movs	r2, #0
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	4798      	blx	r3
      break;
 8008040:	e04b      	b.n	80080da <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b0a      	cmp	r3, #10
 8008048:	d017      	beq.n	800807a <USBD_CDC_Setup+0xd6>
 800804a:	2b0b      	cmp	r3, #11
 800804c:	d029      	beq.n	80080a2 <USBD_CDC_Setup+0xfe>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d133      	bne.n	80080ba <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	2b03      	cmp	r3, #3
 800805a:	d107      	bne.n	800806c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	2202      	movs	r2, #2
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f9c7 	bl	80093f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806a:	e02e      	b.n	80080ca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f958 	bl	8009324 <USBD_CtlError>
            ret = USBD_FAIL;
 8008074:	2302      	movs	r3, #2
 8008076:	75fb      	strb	r3, [r7, #23]
          break;
 8008078:	e027      	b.n	80080ca <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	2b03      	cmp	r3, #3
 8008082:	d107      	bne.n	8008094 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008084:	f107 030f 	add.w	r3, r7, #15
 8008088:	2201      	movs	r2, #1
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f9b3 	bl	80093f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008092:	e01a      	b.n	80080ca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f944 	bl	8009324 <USBD_CtlError>
            ret = USBD_FAIL;
 800809c:	2302      	movs	r3, #2
 800809e:	75fb      	strb	r3, [r7, #23]
          break;
 80080a0:	e013      	b.n	80080ca <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d00d      	beq.n	80080c8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f938 	bl	8009324 <USBD_CtlError>
            ret = USBD_FAIL;
 80080b4:	2302      	movs	r3, #2
 80080b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080b8:	e006      	b.n	80080c8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f931 	bl	8009324 <USBD_CtlError>
          ret = USBD_FAIL;
 80080c2:	2302      	movs	r3, #2
 80080c4:	75fb      	strb	r3, [r7, #23]
          break;
 80080c6:	e000      	b.n	80080ca <USBD_CDC_Setup+0x126>
          break;
 80080c8:	bf00      	nop
      }
      break;
 80080ca:	e006      	b.n	80080da <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 f928 	bl	8009324 <USBD_CtlError>
      ret = USBD_FAIL;
 80080d4:	2302      	movs	r3, #2
 80080d6:	75fb      	strb	r3, [r7, #23]
      break;
 80080d8:	bf00      	nop
  }

  return ret;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080fe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d03a      	beq.n	8008180 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	331c      	adds	r3, #28
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d029      	beq.n	8008174 <USBD_CDC_DataIn+0x90>
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	331c      	adds	r3, #28
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	78f9      	ldrb	r1, [r7, #3]
 8008134:	68b8      	ldr	r0, [r7, #8]
 8008136:	460b      	mov	r3, r1
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	4403      	add	r3, r0
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	fbb2 f1f3 	udiv	r1, r2, r3
 8008148:	fb03 f301 	mul.w	r3, r3, r1
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d110      	bne.n	8008174 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	331c      	adds	r3, #28
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008166:	78f9      	ldrb	r1, [r7, #3]
 8008168:	2300      	movs	r3, #0
 800816a:	2200      	movs	r2, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 fe0a 	bl	8009d86 <USBD_LL_Transmit>
 8008172:	e003      	b.n	800817c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e000      	b.n	8008182 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 fe35 	bl	8009e12 <USBD_LL_GetRxDataSize>
 80081a8:	4602      	mov	r2, r0
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00d      	beq.n	80081d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081ce:	4611      	mov	r1, r2
 80081d0:	4798      	blx	r3

    return USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081d6:	2302      	movs	r3, #2
  }
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <USBD_CDC_EP0_RxReady+0x46>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008200:	2bff      	cmp	r3, #255	; 0xff
 8008202:	d010      	beq.n	8008226 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008212:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800821a:	b292      	uxth	r2, r2
 800821c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	22ff      	movs	r2, #255	; 0xff
 8008222:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2243      	movs	r2, #67	; 0x43
 800823c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000094 	.word	0x20000094

08008250 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2243      	movs	r2, #67	; 0x43
 800825c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000050 	.word	0x20000050

08008270 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2243      	movs	r2, #67	; 0x43
 800827c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800827e:	4b03      	ldr	r3, [pc, #12]	; (800828c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	200000d8 	.word	0x200000d8

08008290 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	220a      	movs	r2, #10
 800829c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	2000000c 	.word	0x2000000c

080082b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr

080082dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01c      	beq.n	8008388 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008354:	2b00      	cmp	r3, #0
 8008356:	d115      	bne.n	8008384 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008376:	b29b      	uxth	r3, r3
 8008378:	2181      	movs	r1, #129	; 0x81
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fd03 	bl	8009d86 <USBD_LL_Transmit>

      return USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	e002      	b.n	800838a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008388:	2302      	movs	r3, #2
  }
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7c1b      	ldrb	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083be:	2101      	movs	r1, #1
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fd03 	bl	8009dcc <USBD_LL_PrepareReceive>
 80083c6:	e007      	b.n	80083d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083ce:	2340      	movs	r3, #64	; 0x40
 80083d0:	2101      	movs	r1, #1
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fcfa 	bl	8009dcc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	e000      	b.n	80083de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083dc:	2302      	movs	r3, #2
  }
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	4613      	mov	r3, r2
 80083f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083fa:	2302      	movs	r3, #2
 80083fc:	e01a      	b.n	8008434 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f001 fb67 	bl	8009b00 <USBD_LL_Init>

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	e001      	b.n	8008462 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800845e:	2302      	movs	r3, #2
 8008460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr

0800846e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fb9c 	bl	8009bb4 <USBD_LL_Start>

  return USBD_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr

0800849a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084a6:	2302      	movs	r3, #2
 80084a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00c      	beq.n	80084ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	4611      	mov	r1, r2
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	78fa      	ldrb	r2, [r7, #3]
 80084ee:	4611      	mov	r1, r2
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fecb 	bl	80092ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008532:	f003 031f 	and.w	r3, r3, #31
 8008536:	2b01      	cmp	r3, #1
 8008538:	d00c      	beq.n	8008554 <USBD_LL_SetupStage+0x56>
 800853a:	2b01      	cmp	r3, #1
 800853c:	d302      	bcc.n	8008544 <USBD_LL_SetupStage+0x46>
 800853e:	2b02      	cmp	r3, #2
 8008540:	d010      	beq.n	8008564 <USBD_LL_SetupStage+0x66>
 8008542:	e017      	b.n	8008574 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9cb 	bl	80088e8 <USBD_StdDevReq>
      break;
 8008552:	e01a      	b.n	800858a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa2d 	bl	80089bc <USBD_StdItfReq>
      break;
 8008562:	e012      	b.n	800858a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fa6b 	bl	8008a48 <USBD_StdEPReq>
      break;
 8008572:	e00a      	b.n	800858a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800857a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800857e:	b2db      	uxtb	r3, r3
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fb76 	bl	8009c74 <USBD_LL_StallEP>
      break;
 8008588:	bf00      	nop
  }

  return USBD_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	460b      	mov	r3, r1
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d14b      	bne.n	8008640 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d134      	bne.n	8008624 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d919      	bls.n	80085fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085dc:	429a      	cmp	r2, r3
 80085de:	d203      	bcs.n	80085e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	e002      	b.n	80085ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 ff4c 	bl	8009490 <USBD_CtlContinueRx>
 80085f8:	e038      	b.n	800866c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800860c:	2b03      	cmp	r3, #3
 800860e:	d105      	bne.n	800861c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 ff49 	bl	80094b4 <USBD_CtlSendStatus>
 8008622:	e023      	b.n	800866c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800862a:	2b05      	cmp	r3, #5
 800862c:	d11e      	bne.n	800866c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008636:	2100      	movs	r1, #0
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f001 fb1b 	bl	8009c74 <USBD_LL_StallEP>
 800863e:	e015      	b.n	800866c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008652:	2b03      	cmp	r3, #3
 8008654:	d108      	bne.n	8008668 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	7afa      	ldrb	r2, [r7, #11]
 8008660:	4611      	mov	r1, r2
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	4798      	blx	r3
 8008666:	e001      	b.n	800866c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	e000      	b.n	800866e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	460b      	mov	r3, r1
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d17f      	bne.n	800878a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3314      	adds	r3, #20
 800868e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008696:	2b02      	cmp	r3, #2
 8008698:	d15c      	bne.n	8008754 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d915      	bls.n	80086d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 feb6 	bl	8009430 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c4:	2300      	movs	r3, #0
 80086c6:	2200      	movs	r2, #0
 80086c8:	2100      	movs	r1, #0
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f001 fb7e 	bl	8009dcc <USBD_LL_PrepareReceive>
 80086d0:	e04e      	b.n	8008770 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	6912      	ldr	r2, [r2, #16]
 80086da:	fbb3 f1f2 	udiv	r1, r3, r2
 80086de:	fb02 f201 	mul.w	r2, r2, r1
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d11c      	bne.n	8008722 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d316      	bcc.n	8008722 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086fe:	429a      	cmp	r2, r3
 8008700:	d20f      	bcs.n	8008722 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008702:	2200      	movs	r2, #0
 8008704:	2100      	movs	r1, #0
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fe92 	bl	8009430 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008714:	2300      	movs	r3, #0
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 fb56 	bl	8009dcc <USBD_LL_PrepareReceive>
 8008720:	e026      	b.n	8008770 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008734:	2b03      	cmp	r3, #3
 8008736:	d105      	bne.n	8008744 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 fa94 	bl	8009c74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fec4 	bl	80094da <USBD_CtlReceiveStatus>
 8008752:	e00d      	b.n	8008770 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800875a:	2b04      	cmp	r3, #4
 800875c:	d004      	beq.n	8008768 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008768:	2180      	movs	r1, #128	; 0x80
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f001 fa82 	bl	8009c74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008776:	2b01      	cmp	r3, #1
 8008778:	d11d      	bne.n	80087b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fe83 	bl	8008486 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008788:	e015      	b.n	80087b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00d      	beq.n	80087b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800879c:	2b03      	cmp	r3, #3
 800879e:	d108      	bne.n	80087b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	7afa      	ldrb	r2, [r7, #11]
 80087aa:	4611      	mov	r1, r2
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	4798      	blx	r3
 80087b0:	e001      	b.n	80087b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087b2:	2302      	movs	r3, #2
 80087b4:	e000      	b.n	80087b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087c8:	2340      	movs	r3, #64	; 0x40
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fa0b 	bl	8009bea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2240      	movs	r2, #64	; 0x40
 80087e0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	2200      	movs	r2, #0
 80087e8:	2180      	movs	r1, #128	; 0x80
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f9fd 	bl	8009bea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2240      	movs	r2, #64	; 0x40
 80087fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6852      	ldr	r2, [r2, #4]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	4611      	mov	r1, r2
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
  }

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2204      	movs	r2, #4
 8008878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008896:	2b04      	cmp	r3, #4
 8008898:	d105      	bne.n	80088a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr

080088b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d10b      	bne.n	80088dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d004      	beq.n	800890c <USBD_StdDevReq+0x24>
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d002      	beq.n	800890c <USBD_StdDevReq+0x24>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d008      	beq.n	800891c <USBD_StdDevReq+0x34>
 800890a:	e04c      	b.n	80089a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
      break;
 800891a:	e049      	b.n	80089b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b09      	cmp	r3, #9
 8008922:	d83a      	bhi.n	800899a <USBD_StdDevReq+0xb2>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <USBD_StdDevReq+0x44>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	0800897d 	.word	0x0800897d
 8008930:	08008991 	.word	0x08008991
 8008934:	0800899b 	.word	0x0800899b
 8008938:	08008987 	.word	0x08008987
 800893c:	0800899b 	.word	0x0800899b
 8008940:	0800895f 	.word	0x0800895f
 8008944:	08008955 	.word	0x08008955
 8008948:	0800899b 	.word	0x0800899b
 800894c:	08008973 	.word	0x08008973
 8008950:	08008969 	.word	0x08008969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9d4 	bl	8008d04 <USBD_GetDescriptor>
          break;
 800895c:	e022      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fb37 	bl	8008fd4 <USBD_SetAddress>
          break;
 8008966:	e01d      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fb74 	bl	8009058 <USBD_SetConfig>
          break;
 8008970:	e018      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fbfd 	bl	8009174 <USBD_GetConfig>
          break;
 800897a:	e013      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fc2c 	bl	80091dc <USBD_GetStatus>
          break;
 8008984:	e00e      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc5a 	bl	8009242 <USBD_SetFeature>
          break;
 800898e:	e009      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fc69 	bl	800926a <USBD_ClrFeature>
          break;
 8008998:	e004      	b.n	80089a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fcc1 	bl	8009324 <USBD_CtlError>
          break;
 80089a2:	bf00      	nop
      }
      break;
 80089a4:	e004      	b.n	80089b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fcbb 	bl	8009324 <USBD_CtlError>
      break;
 80089ae:	bf00      	nop
  }

  return ret;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop

080089bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d003      	beq.n	80089de <USBD_StdItfReq+0x22>
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d001      	beq.n	80089de <USBD_StdItfReq+0x22>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d12a      	bne.n	8008a34 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	3b01      	subs	r3, #1
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d81d      	bhi.n	8008a26 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	889b      	ldrh	r3, [r3, #4]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d813      	bhi.n	8008a1c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	88db      	ldrh	r3, [r3, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d110      	bne.n	8008a30 <USBD_StdItfReq+0x74>
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10d      	bne.n	8008a30 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fd4d 	bl	80094b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a1a:	e009      	b.n	8008a30 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc80 	bl	8009324 <USBD_CtlError>
          break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc7b 	bl	8009324 <USBD_CtlError>
          break;
 8008a2e:	e000      	b.n	8008a32 <USBD_StdItfReq+0x76>
          break;
 8008a30:	bf00      	nop
      }
      break;
 8008a32:	e004      	b.n	8008a3e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc74 	bl	8009324 <USBD_CtlError>
      break;
 8008a3c:	bf00      	nop
  }

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d004      	beq.n	8008a72 <USBD_StdEPReq+0x2a>
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	d002      	beq.n	8008a72 <USBD_StdEPReq+0x2a>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d008      	beq.n	8008a82 <USBD_StdEPReq+0x3a>
 8008a70:	e13d      	b.n	8008cee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
      break;
 8008a80:	e13a      	b.n	8008cf8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d10a      	bne.n	8008aa4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	e12a      	b.n	8008cfa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d03e      	beq.n	8008b2a <USBD_StdEPReq+0xe2>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d002      	beq.n	8008ab6 <USBD_StdEPReq+0x6e>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d070      	beq.n	8008b96 <USBD_StdEPReq+0x14e>
 8008ab4:	e115      	b.n	8008ce2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d002      	beq.n	8008ac6 <USBD_StdEPReq+0x7e>
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d015      	beq.n	8008af0 <USBD_StdEPReq+0xa8>
 8008ac4:	e02b      	b.n	8008b1e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <USBD_StdEPReq+0x9e>
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b80      	cmp	r3, #128	; 0x80
 8008ad0:	d009      	beq.n	8008ae6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f8cc 	bl	8009c74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008adc:	2180      	movs	r1, #128	; 0x80
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 f8c8 	bl	8009c74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae4:	e020      	b.n	8008b28 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc1b 	bl	8009324 <USBD_CtlError>
              break;
 8008aee:	e01b      	b.n	8008b28 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10e      	bne.n	8008b16 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <USBD_StdEPReq+0xce>
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d008      	beq.n	8008b16 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f8af 	bl	8009c74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fccc 	bl	80094b4 <USBD_CtlSendStatus>

              break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fbff 	bl	8009324 <USBD_CtlError>
              break;
 8008b26:	bf00      	nop
          }
          break;
 8008b28:	e0e0      	b.n	8008cec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d002      	beq.n	8008b3a <USBD_StdEPReq+0xf2>
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d015      	beq.n	8008b64 <USBD_StdEPReq+0x11c>
 8008b38:	e026      	b.n	8008b88 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00c      	beq.n	8008b5a <USBD_StdEPReq+0x112>
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	2b80      	cmp	r3, #128	; 0x80
 8008b44:	d009      	beq.n	8008b5a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 f892 	bl	8009c74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b50:	2180      	movs	r1, #128	; 0x80
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f88e 	bl	8009c74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b58:	e01c      	b.n	8008b94 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fbe1 	bl	8009324 <USBD_CtlError>
              break;
 8008b62:	e017      	b.n	8008b94 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d112      	bne.n	8008b92 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d004      	beq.n	8008b80 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f899 	bl	8009cb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc97 	bl	80094b4 <USBD_CtlSendStatus>
              }
              break;
 8008b86:	e004      	b.n	8008b92 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fbca 	bl	8009324 <USBD_CtlError>
              break;
 8008b90:	e000      	b.n	8008b94 <USBD_StdEPReq+0x14c>
              break;
 8008b92:	bf00      	nop
          }
          break;
 8008b94:	e0aa      	b.n	8008cec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d002      	beq.n	8008ba6 <USBD_StdEPReq+0x15e>
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d032      	beq.n	8008c0a <USBD_StdEPReq+0x1c2>
 8008ba4:	e097      	b.n	8008cd6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <USBD_StdEPReq+0x174>
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b80      	cmp	r3, #128	; 0x80
 8008bb0:	d004      	beq.n	8008bbc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbb5 	bl	8009324 <USBD_CtlError>
                break;
 8008bba:	e091      	b.n	8008ce0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0b      	bge.n	8008bdc <USBD_StdEPReq+0x194>
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	3310      	adds	r3, #16
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3304      	adds	r3, #4
 8008bda:	e00b      	b.n	8008bf4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fbf8 	bl	80093f8 <USBD_CtlSendData>
              break;
 8008c08:	e06a      	b.n	8008ce0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	da11      	bge.n	8008c36 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	f003 020f 	and.w	r2, r3, #15
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	3318      	adds	r3, #24
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d117      	bne.n	8008c5c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb78 	bl	8009324 <USBD_CtlError>
                  break;
 8008c34:	e054      	b.n	8008ce0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	f003 020f 	and.w	r2, r3, #15
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fb65 	bl	8009324 <USBD_CtlError>
                  break;
 8008c5a:	e041      	b.n	8008ce0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da0b      	bge.n	8008c7c <USBD_StdEPReq+0x234>
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	3310      	adds	r3, #16
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	4413      	add	r3, r2
 8008c78:	3304      	adds	r3, #4
 8008c7a:	e00b      	b.n	8008c94 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	3304      	adds	r3, #4
 8008c94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <USBD_StdEPReq+0x25a>
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b80      	cmp	r3, #128	; 0x80
 8008ca0:	d103      	bne.n	8008caa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	e00e      	b.n	8008cc8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 f81e 	bl	8009cf0 <USBD_LL_IsStallEP>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e002      	b.n	8008cc8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fb92 	bl	80093f8 <USBD_CtlSendData>
              break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb23 	bl	8009324 <USBD_CtlError>
              break;
 8008cde:	bf00      	nop
          }
          break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fb1d 	bl	8009324 <USBD_CtlError>
          break;
 8008cea:	bf00      	nop
      }
      break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb17 	bl	8009324 <USBD_CtlError>
      break;
 8008cf6:	bf00      	nop
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b06      	cmp	r3, #6
 8008d26:	f200 8128 	bhi.w	8008f7a <USBD_GetDescriptor+0x276>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBD_GetDescriptor+0x2c>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d4d 	.word	0x08008d4d
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008f7b 	.word	0x08008f7b
 8008d40:	08008f7b 	.word	0x08008f7b
 8008d44:	08008f1b 	.word	0x08008f1b
 8008d48:	08008f47 	.word	0x08008f47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
      break;
 8008d62:	e112      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7c1b      	ldrb	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10d      	bne.n	8008d88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	f107 0208 	add.w	r2, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	2202      	movs	r2, #2
 8008d84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d86:	e100      	b.n	8008f8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	f107 0208 	add.w	r2, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	2202      	movs	r2, #2
 8008da0:	701a      	strb	r2, [r3, #0]
      break;
 8008da2:	e0f2      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	885b      	ldrh	r3, [r3, #2]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	f200 80ac 	bhi.w	8008f08 <USBD_GetDescriptor+0x204>
 8008db0:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBD_GetDescriptor+0xb4>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008e05 	.word	0x08008e05
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008ea1 	.word	0x08008ea1
 8008dcc:	08008ed5 	.word	0x08008ed5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e091      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa94 	bl	8009324 <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e089      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e077      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa7a 	bl	8009324 <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e06f      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5a:	e05d      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa60 	bl	8009324 <USBD_CtlError>
            err++;
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	3301      	adds	r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6a:	e055      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00b      	beq.n	8008e90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7c12      	ldrb	r2, [r2, #16]
 8008e84:	f107 0108 	add.w	r1, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8e:	e043      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa46 	bl	8009324 <USBD_CtlError>
            err++;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9e:	e03b      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7c12      	ldrb	r2, [r2, #16]
 8008eb8:	f107 0108 	add.w	r1, r7, #8
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec2:	e029      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa2c 	bl	8009324 <USBD_CtlError>
            err++;
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed2:	e021      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	7c12      	ldrb	r2, [r2, #16]
 8008eec:	f107 0108 	add.w	r1, r7, #8
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef6:	e00f      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa12 	bl	8009324 <USBD_CtlError>
            err++;
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	3301      	adds	r3, #1
 8008f04:	72fb      	strb	r3, [r7, #11]
          break;
 8008f06:	e007      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa0a 	bl	8009324 <USBD_CtlError>
          err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f16:	e038      	b.n	8008f8a <USBD_GetDescriptor+0x286>
 8008f18:	e037      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7c1b      	ldrb	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d109      	bne.n	8008f36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	f107 0208 	add.w	r2, r7, #8
 8008f2e:	4610      	mov	r0, r2
 8008f30:	4798      	blx	r3
 8008f32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f34:	e029      	b.n	8008f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f9f3 	bl	8009324 <USBD_CtlError>
        err++;
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	3301      	adds	r3, #1
 8008f42:	72fb      	strb	r3, [r7, #11]
      break;
 8008f44:	e021      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7c1b      	ldrb	r3, [r3, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10d      	bne.n	8008f6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f107 0208 	add.w	r2, r7, #8
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4798      	blx	r3
 8008f5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	2207      	movs	r2, #7
 8008f66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f68:	e00f      	b.n	8008f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9d9 	bl	8009324 <USBD_CtlError>
        err++;
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	3301      	adds	r3, #1
 8008f76:	72fb      	strb	r3, [r7, #11]
      break;
 8008f78:	e007      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f9d1 	bl	8009324 <USBD_CtlError>
      err++;
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	3301      	adds	r3, #1
 8008f86:	72fb      	strb	r3, [r7, #11]
      break;
 8008f88:	bf00      	nop
  }

  if (err != 0U)
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11c      	bne.n	8008fca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f90:	893b      	ldrh	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <USBD_GetDescriptor+0x2b6>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	88db      	ldrh	r3, [r3, #6]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	88da      	ldrh	r2, [r3, #6]
 8008fa2:	893b      	ldrh	r3, [r7, #8]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	bf28      	it	cs
 8008fa8:	4613      	movcs	r3, r2
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fae:	893b      	ldrh	r3, [r7, #8]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa1f 	bl	80093f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa76 	bl	80094b4 <USBD_CtlSendStatus>
 8008fc8:	e000      	b.n	8008fcc <USBD_GetDescriptor+0x2c8>
    return;
 8008fca:	bf00      	nop
    }
  }
}
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop

08008fd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	889b      	ldrh	r3, [r3, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d130      	bne.n	8009048 <USBD_SetAddress+0x74>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	88db      	ldrh	r3, [r3, #6]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d12c      	bne.n	8009048 <USBD_SetAddress+0x74>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ff4:	d828      	bhi.n	8009048 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009008:	2b03      	cmp	r3, #3
 800900a:	d104      	bne.n	8009016 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f988 	bl	8009324 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009014:	e01c      	b.n	8009050 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fe90 	bl	8009d48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fa43 	bl	80094b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903c:	e008      	b.n	8009050 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	e003      	b.n	8009050 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f96a 	bl	8009324 <USBD_CtlError>
  }
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	b2da      	uxtb	r2, r3
 8009068:	4b41      	ldr	r3, [pc, #260]	; (8009170 <USBD_SetConfig+0x118>)
 800906a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800906c:	4b40      	ldr	r3, [pc, #256]	; (8009170 <USBD_SetConfig+0x118>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d904      	bls.n	800907e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f954 	bl	8009324 <USBD_CtlError>
 800907c:	e075      	b.n	800916a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009084:	2b02      	cmp	r3, #2
 8009086:	d002      	beq.n	800908e <USBD_SetConfig+0x36>
 8009088:	2b03      	cmp	r3, #3
 800908a:	d023      	beq.n	80090d4 <USBD_SetConfig+0x7c>
 800908c:	e062      	b.n	8009154 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800908e:	4b38      	ldr	r3, [pc, #224]	; (8009170 <USBD_SetConfig+0x118>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01a      	beq.n	80090cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009096:	4b36      	ldr	r3, [pc, #216]	; (8009170 <USBD_SetConfig+0x118>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2203      	movs	r2, #3
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090a8:	4b31      	ldr	r3, [pc, #196]	; (8009170 <USBD_SetConfig+0x118>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff f9f3 	bl	800849a <USBD_SetClassConfig>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d104      	bne.n	80090c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f931 	bl	8009324 <USBD_CtlError>
            return;
 80090c2:	e052      	b.n	800916a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f9f5 	bl	80094b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090ca:	e04e      	b.n	800916a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f9f1 	bl	80094b4 <USBD_CtlSendStatus>
        break;
 80090d2:	e04a      	b.n	800916a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090d4:	4b26      	ldr	r3, [pc, #152]	; (8009170 <USBD_SetConfig+0x118>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d112      	bne.n	8009102 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80090e4:	4b22      	ldr	r3, [pc, #136]	; (8009170 <USBD_SetConfig+0x118>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80090ee:	4b20      	ldr	r3, [pc, #128]	; (8009170 <USBD_SetConfig+0x118>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff f9ef 	bl	80084d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9da 	bl	80094b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009100:	e033      	b.n	800916a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009102:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <USBD_SetConfig+0x118>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d01d      	beq.n	800914c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff f9dd 	bl	80084d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <USBD_SetConfig+0x118>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009128:	4b11      	ldr	r3, [pc, #68]	; (8009170 <USBD_SetConfig+0x118>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff f9b3 	bl	800849a <USBD_SetClassConfig>
 8009134:	4603      	mov	r3, r0
 8009136:	2b02      	cmp	r3, #2
 8009138:	d104      	bne.n	8009144 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8f1 	bl	8009324 <USBD_CtlError>
            return;
 8009142:	e012      	b.n	800916a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9b5 	bl	80094b4 <USBD_CtlSendStatus>
        break;
 800914a:	e00e      	b.n	800916a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9b1 	bl	80094b4 <USBD_CtlSendStatus>
        break;
 8009152:	e00a      	b.n	800916a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f8e4 	bl	8009324 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <USBD_SetConfig+0x118>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff f9b8 	bl	80084d8 <USBD_ClrClassConfig>
        break;
 8009168:	bf00      	nop
    }
  }
}
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20003208 	.word	0x20003208

08009174 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	88db      	ldrh	r3, [r3, #6]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d004      	beq.n	8009190 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8cb 	bl	8009324 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800918e:	e021      	b.n	80091d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009196:	2b01      	cmp	r3, #1
 8009198:	db17      	blt.n	80091ca <USBD_GetConfig+0x56>
 800919a:	2b02      	cmp	r3, #2
 800919c:	dd02      	ble.n	80091a4 <USBD_GetConfig+0x30>
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d00b      	beq.n	80091ba <USBD_GetConfig+0x46>
 80091a2:	e012      	b.n	80091ca <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3308      	adds	r3, #8
 80091ae:	2201      	movs	r2, #1
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f920 	bl	80093f8 <USBD_CtlSendData>
        break;
 80091b8:	e00c      	b.n	80091d4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3304      	adds	r3, #4
 80091be:	2201      	movs	r2, #1
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f918 	bl	80093f8 <USBD_CtlSendData>
        break;
 80091c8:	e004      	b.n	80091d4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f8a9 	bl	8009324 <USBD_CtlError>
        break;
 80091d2:	bf00      	nop
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ec:	3b01      	subs	r3, #1
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d81e      	bhi.n	8009230 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d004      	beq.n	8009204 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f891 	bl	8009324 <USBD_CtlError>
        break;
 8009202:	e01a      	b.n	800923a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f043 0202 	orr.w	r2, r3, #2
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	330c      	adds	r3, #12
 8009224:	2202      	movs	r2, #2
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f8e5 	bl	80093f8 <USBD_CtlSendData>
      break;
 800922e:	e004      	b.n	800923a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f876 	bl	8009324 <USBD_CtlError>
      break;
 8009238:	bf00      	nop
  }
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	885b      	ldrh	r3, [r3, #2]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d106      	bne.n	8009262 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f929 	bl	80094b4 <USBD_CtlSendStatus>
  }
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	3b01      	subs	r3, #1
 800927c:	2b02      	cmp	r3, #2
 800927e:	d80b      	bhi.n	8009298 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	885b      	ldrh	r3, [r3, #2]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d10c      	bne.n	80092a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f90f 	bl	80094b4 <USBD_CtlSendStatus>
      }
      break;
 8009296:	e004      	b.n	80092a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f842 	bl	8009324 <USBD_CtlError>
      break;
 80092a0:	e000      	b.n	80092a4 <USBD_ClrFeature+0x3a>
      break;
 80092a2:	bf00      	nop
  }
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	785a      	ldrb	r2, [r3, #1]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	3302      	adds	r3, #2
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	3303      	adds	r3, #3
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4413      	add	r3, r2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	3304      	adds	r3, #4
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	3305      	adds	r3, #5
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	3306      	adds	r3, #6
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b29a      	uxth	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	3307      	adds	r3, #7
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	021b      	lsls	r3, r3, #8
 8009310:	b29b      	uxth	r3, r3
 8009312:	4413      	add	r3, r2
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	80da      	strh	r2, [r3, #6]

}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr

08009324 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800932e:	2180      	movs	r1, #128	; 0x80
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fc9f 	bl	8009c74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009336:	2100      	movs	r1, #0
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fc9b 	bl	8009c74 <USBD_LL_StallEP>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d032      	beq.n	80093c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f834 	bl	80093ca <USBD_GetLen>
 8009362:	4603      	mov	r3, r0
 8009364:	3301      	adds	r3, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	75fa      	strb	r2, [r7, #23]
 8009376:	461a      	mov	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4413      	add	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	75fa      	strb	r2, [r7, #23]
 8009388:	461a      	mov	r2, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	2203      	movs	r2, #3
 8009390:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009392:	e012      	b.n	80093ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	60fa      	str	r2, [r7, #12]
 800939a:	7dfa      	ldrb	r2, [r7, #23]
 800939c:	1c51      	adds	r1, r2, #1
 800939e:	75f9      	strb	r1, [r7, #23]
 80093a0:	4611      	mov	r1, r2
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	440a      	add	r2, r1
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	75fa      	strb	r2, [r7, #23]
 80093b0:	461a      	mov	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4413      	add	r3, r2
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e8      	bne.n	8009394 <USBD_GetString+0x4e>
    }
  }
}
 80093c2:	bf00      	nop
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093d6:	e005      	b.n	80093e4 <USBD_GetLen+0x1a>
  {
    len++;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	3301      	adds	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3301      	adds	r3, #1
 80093e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f5      	bne.n	80093d8 <USBD_GetLen+0xe>
  }

  return len;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2202      	movs	r2, #2
 800940a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009414:	88fa      	ldrh	r2, [r7, #6]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 fcb0 	bl	8009d86 <USBD_LL_Transmit>

  return USBD_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	2100      	movs	r1, #0
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fc9e 	bl	8009d86 <USBD_LL_Transmit>

  return USBD_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2203      	movs	r2, #3
 8009466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800946a:	88fa      	ldrh	r2, [r7, #6]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	2100      	movs	r1, #0
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fca3 	bl	8009dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	2100      	movs	r1, #0
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fc91 	bl	8009dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2204      	movs	r2, #4
 80094c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094c4:	2300      	movs	r3, #0
 80094c6:	2200      	movs	r2, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fc5b 	bl	8009d86 <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2205      	movs	r2, #5
 80094e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ea:	2300      	movs	r3, #0
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fc6b 	bl	8009dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009504:	2200      	movs	r2, #0
 8009506:	4912      	ldr	r1, [pc, #72]	; (8009550 <MX_USB_DEVICE_Init+0x50>)
 8009508:	4812      	ldr	r0, [pc, #72]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800950a:	f7fe ff6c 	bl	80083e6 <USBD_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009514:	f7f7 fa67 	bl	80009e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009518:	490f      	ldr	r1, [pc, #60]	; (8009558 <MX_USB_DEVICE_Init+0x58>)
 800951a:	480e      	ldr	r0, [pc, #56]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800951c:	f7fe ff8e 	bl	800843c <USBD_RegisterClass>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009526:	f7f7 fa5e 	bl	80009e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800952a:	490c      	ldr	r1, [pc, #48]	; (800955c <MX_USB_DEVICE_Init+0x5c>)
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800952e:	f7fe febf 	bl	80082b0 <USBD_CDC_RegisterInterface>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009538:	f7f7 fa55 	bl	80009e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800953e:	f7fe ff96 	bl	800846e <USBD_Start>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009548:	f7f7 fa4d 	bl	80009e6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}
 8009550:	2000012c 	.word	0x2000012c
 8009554:	20005610 	.word	0x20005610
 8009558:	20000018 	.word	0x20000018
 800955c:	2000011c 	.word	0x2000011c

08009560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
//  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, transmit_buffer, 0);
 8009564:	2200      	movs	r2, #0
 8009566:	4905      	ldr	r1, [pc, #20]	; (800957c <CDC_Init_FS+0x1c>)
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <CDC_Init_FS+0x20>)
 800956a:	f7fe feb7 	bl	80082dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, receive_buffer);
 800956e:	4905      	ldr	r1, [pc, #20]	; (8009584 <CDC_Init_FS+0x24>)
 8009570:	4803      	ldr	r0, [pc, #12]	; (8009580 <CDC_Init_FS+0x20>)
 8009572:	f7fe fecc 	bl	800830e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009578:	4618      	mov	r0, r3
 800957a:	bd80      	pop	{r7, pc}
 800957c:	200001fc 	.word	0x200001fc
 8009580:	20005610 	.word	0x20005610
 8009584:	200011fc 	.word	0x200011fc

08009588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800958c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800958e:	4618      	mov	r0, r3
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr
	...

08009598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
 80095a4:	4613      	mov	r3, r2
 80095a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b23      	cmp	r3, #35	; 0x23
 80095ac:	d84a      	bhi.n	8009644 <CDC_Control_FS+0xac>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <CDC_Control_FS+0x1c>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	08009645 	.word	0x08009645
 80095b8:	08009645 	.word	0x08009645
 80095bc:	08009645 	.word	0x08009645
 80095c0:	08009645 	.word	0x08009645
 80095c4:	08009645 	.word	0x08009645
 80095c8:	08009645 	.word	0x08009645
 80095cc:	08009645 	.word	0x08009645
 80095d0:	08009645 	.word	0x08009645
 80095d4:	08009645 	.word	0x08009645
 80095d8:	08009645 	.word	0x08009645
 80095dc:	08009645 	.word	0x08009645
 80095e0:	08009645 	.word	0x08009645
 80095e4:	08009645 	.word	0x08009645
 80095e8:	08009645 	.word	0x08009645
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009645 	.word	0x08009645
 80095f4:	08009645 	.word	0x08009645
 80095f8:	08009645 	.word	0x08009645
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009645 	.word	0x08009645
 8009604:	08009645 	.word	0x08009645
 8009608:	08009645 	.word	0x08009645
 800960c:	08009645 	.word	0x08009645
 8009610:	08009645 	.word	0x08009645
 8009614:	08009645 	.word	0x08009645
 8009618:	08009645 	.word	0x08009645
 800961c:	08009645 	.word	0x08009645
 8009620:	08009645 	.word	0x08009645
 8009624:	08009645 	.word	0x08009645
 8009628:	08009645 	.word	0x08009645
 800962c:	08009645 	.word	0x08009645
 8009630:	08009645 	.word	0x08009645
 8009634:	08009645 	.word	0x08009645
 8009638:	08009645 	.word	0x08009645
 800963c:	08009645 	.word	0x08009645
 8009640:	08009645 	.word	0x08009645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009644:	bf00      	nop
  }

  return (USBD_OK);
 8009646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop

08009654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len=*Len;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8009664:	4b26      	ldr	r3, [pc, #152]	; (8009700 <CDC_Receive_FS+0xac>)
 8009666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966a:	2b03      	cmp	r3, #3
 800966c:	d001      	beq.n	8009672 <CDC_Receive_FS+0x1e>
	{
	   return USBD_FAIL;
 800966e:	2302      	movs	r3, #2
 8009670:	e041      	b.n	80096f6 <CDC_Receive_FS+0xa2>
	}

	if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d006      	beq.n	8009686 <CDC_Receive_FS+0x32>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <CDC_Receive_FS+0x32>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <CDC_Receive_FS+0x36>
	{
	   return USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	e035      	b.n	80096f6 <CDC_Receive_FS+0xa2>
	}

  /* Get data */
	uint8_t result = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	72fb      	strb	r3, [r7, #11]
	do
	{
	  result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	481b      	ldr	r0, [pc, #108]	; (8009700 <CDC_Receive_FS+0xac>)
 8009692:	f7fe fe3c 	bl	800830e <USBD_CDC_SetRxBuffer>
 8009696:	4603      	mov	r3, r0
 8009698:	72fb      	strb	r3, [r7, #11]
	}
	while(result != USBD_OK);
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f6      	bne.n	800968e <CDC_Receive_FS+0x3a>

	// add data to FIFO
	while (len--)
 80096a0:	e01b      	b.n	80096da <CDC_Receive_FS+0x86>
	   if (FIFO_INCR(RX_FIFO.head)==RX_FIFO.tail)
 80096a2:	4b18      	ldr	r3, [pc, #96]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80096ac:	4b15      	ldr	r3, [pc, #84]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d101      	bne.n	80096b8 <CDC_Receive_FS+0x64>
			 return USBD_FAIL;  // overrun
 80096b4:	2302      	movs	r3, #2
 80096b6:	e01e      	b.n	80096f6 <CDC_Receive_FS+0xa2>
	   else
	   {
		   RX_FIFO.data[RX_FIFO.head]=*Buf++;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	4a11      	ldr	r2, [pc, #68]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	7819      	ldrb	r1, [r3, #0]
 80096c4:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096c6:	4413      	add	r3, r2
 80096c8:	460a      	mov	r2, r1
 80096ca:	721a      	strb	r2, [r3, #8]
		   RX_FIFO.head=FIFO_INCR(RX_FIFO.head);
 80096cc:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096d6:	4a0b      	ldr	r2, [pc, #44]	; (8009704 <CDC_Receive_FS+0xb0>)
 80096d8:	6013      	str	r3, [r2, #0]
	while (len--)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1e5a      	subs	r2, r3, #1
 80096de:	60fa      	str	r2, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1de      	bne.n	80096a2 <CDC_Receive_FS+0x4e>
	   }
	   
     do
     {
         result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096e4:	4806      	ldr	r0, [pc, #24]	; (8009700 <CDC_Receive_FS+0xac>)
 80096e6:	f7fe fe54 	bl	8008392 <USBD_CDC_ReceivePacket>
 80096ea:	4603      	mov	r3, r0
 80096ec:	72fb      	strb	r3, [r7, #11]
     }
     while(result != USBD_OK);
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1f7      	bne.n	80096e4 <CDC_Receive_FS+0x90>

    return (USBD_OK);
 80096f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20005610 	.word	0x20005610
 8009704:	200021fc 	.word	0x200021fc

08009708 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009718:	4b10      	ldr	r3, [pc, #64]	; (800975c <CDC_Transmit_FS+0x54>)
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800972a:	2301      	movs	r3, #1
 800972c:	e011      	b.n	8009752 <CDC_Transmit_FS+0x4a>
  }
//  while(hcdc->TxState != 0);
  do{
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800972e:	887b      	ldrh	r3, [r7, #2]
 8009730:	461a      	mov	r2, r3
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	4809      	ldr	r0, [pc, #36]	; (800975c <CDC_Transmit_FS+0x54>)
 8009736:	f7fe fdd1 	bl	80082dc <USBD_CDC_SetTxBuffer>
  }
  while(result != USBD_OK);
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1f6      	bne.n	800972e <CDC_Transmit_FS+0x26>
  do{
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009740:	4806      	ldr	r0, [pc, #24]	; (800975c <CDC_Transmit_FS+0x54>)
 8009742:	f7fe fdf7 	bl	8008334 <USBD_CDC_TransmitPacket>
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]
  }
  while(result != USBD_OK);
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f7      	bne.n	8009740 <CDC_Transmit_FS+0x38>
  /* USER CODE END 7 */
  return result;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20005610 	.word	0x20005610

08009760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2212      	movs	r2, #18
 8009770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009772:	4b03      	ldr	r3, [pc, #12]	; (8009780 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20000148 	.word	0x20000148

08009784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	6039      	str	r1, [r7, #0]
 800978e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2204      	movs	r2, #4
 8009794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009796:	4b03      	ldr	r3, [pc, #12]	; (80097a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	2000015c 	.word	0x2000015c

080097a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4907      	ldr	r1, [pc, #28]	; (80097dc <USBD_FS_ProductStrDescriptor+0x34>)
 80097be:	4808      	ldr	r0, [pc, #32]	; (80097e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80097c0:	f7ff fdc1 	bl	8009346 <USBD_GetString>
 80097c4:	e004      	b.n	80097d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	4904      	ldr	r1, [pc, #16]	; (80097dc <USBD_FS_ProductStrDescriptor+0x34>)
 80097ca:	4805      	ldr	r0, [pc, #20]	; (80097e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80097cc:	f7ff fdbb 	bl	8009346 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200058d4 	.word	0x200058d4
 80097e0:	0800a808 	.word	0x0800a808

080097e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	4904      	ldr	r1, [pc, #16]	; (8009804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097f4:	4804      	ldr	r0, [pc, #16]	; (8009808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097f6:	f7ff fda6 	bl	8009346 <USBD_GetString>
  return USBD_StrDesc;
 80097fa:	4b02      	ldr	r3, [pc, #8]	; (8009804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	200058d4 	.word	0x200058d4
 8009808:	0800a820 	.word	0x0800a820

0800980c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	221a      	movs	r2, #26
 800981c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800981e:	f000 f843 	bl	80098a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009822:	4b02      	ldr	r3, [pc, #8]	; (800982c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	20000160 	.word	0x20000160

08009830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d105      	bne.n	800984e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4907      	ldr	r1, [pc, #28]	; (8009864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009846:	4808      	ldr	r0, [pc, #32]	; (8009868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009848:	f7ff fd7d 	bl	8009346 <USBD_GetString>
 800984c:	e004      	b.n	8009858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4904      	ldr	r1, [pc, #16]	; (8009864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009852:	4805      	ldr	r0, [pc, #20]	; (8009868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009854:	f7ff fd77 	bl	8009346 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009858:	4b02      	ldr	r3, [pc, #8]	; (8009864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200058d4 	.word	0x200058d4
 8009868:	0800a834 	.word	0x0800a834

0800986c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4907      	ldr	r1, [pc, #28]	; (80098a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009882:	4808      	ldr	r0, [pc, #32]	; (80098a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009884:	f7ff fd5f 	bl	8009346 <USBD_GetString>
 8009888:	e004      	b.n	8009894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4904      	ldr	r1, [pc, #16]	; (80098a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800988e:	4805      	ldr	r0, [pc, #20]	; (80098a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009890:	f7ff fd59 	bl	8009346 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009894:	4b02      	ldr	r3, [pc, #8]	; (80098a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	200058d4 	.word	0x200058d4
 80098a4:	0800a840 	.word	0x0800a840

080098a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <Get_SerialNum+0x44>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098b4:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <Get_SerialNum+0x48>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <Get_SerialNum+0x4c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098ce:	2208      	movs	r2, #8
 80098d0:	4909      	ldr	r1, [pc, #36]	; (80098f8 <Get_SerialNum+0x50>)
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f814 	bl	8009900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098d8:	2204      	movs	r2, #4
 80098da:	4908      	ldr	r1, [pc, #32]	; (80098fc <Get_SerialNum+0x54>)
 80098dc:	68b8      	ldr	r0, [r7, #8]
 80098de:	f000 f80f 	bl	8009900 <IntToUnicode>
  }
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	1ffff7e8 	.word	0x1ffff7e8
 80098f0:	1ffff7ec 	.word	0x1ffff7ec
 80098f4:	1ffff7f0 	.word	0x1ffff7f0
 80098f8:	20000162 	.word	0x20000162
 80098fc:	20000172 	.word	0x20000172

08009900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]
 8009916:	e027      	b.n	8009968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	0f1b      	lsrs	r3, r3, #28
 800991c:	2b09      	cmp	r3, #9
 800991e:	d80b      	bhi.n	8009938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0f1b      	lsrs	r3, r3, #28
 8009924:	b2da      	uxtb	r2, r3
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4619      	mov	r1, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	440b      	add	r3, r1
 8009930:	3230      	adds	r2, #48	; 0x30
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e00a      	b.n	800994e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	0f1b      	lsrs	r3, r3, #28
 800993c:	b2da      	uxtb	r2, r3
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	4619      	mov	r1, r3
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	440b      	add	r3, r1
 8009948:	3237      	adds	r2, #55	; 0x37
 800994a:	b2d2      	uxtb	r2, r2
 800994c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	3301      	adds	r3, #1
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	3301      	adds	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
 8009968:	7dfa      	ldrb	r2, [r7, #23]
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	429a      	cmp	r2, r3
 800996e:	d3d3      	bcc.n	8009918 <IntToUnicode+0x18>
  }
}
 8009970:	bf00      	nop
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr
	...

0800997c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a0d      	ldr	r2, [pc, #52]	; (80099c0 <HAL_PCD_MspInit+0x44>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d113      	bne.n	80099b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <HAL_PCD_MspInit+0x48>)
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	4a0c      	ldr	r2, [pc, #48]	; (80099c4 <HAL_PCD_MspInit+0x48>)
 8009994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009998:	61d3      	str	r3, [r2, #28]
 800999a:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <HAL_PCD_MspInit+0x48>)
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	2014      	movs	r0, #20
 80099ac:	f7f8 f96b 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80099b0:	2014      	movs	r0, #20
 80099b2:	f7f8 f984 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	40005c00 	.word	0x40005c00
 80099c4:	40021000 	.word	0x40021000

080099c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f7fe fd8d 	bl	80084fe <USBD_LL_SetupStage>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	440b      	add	r3, r1
 8009a0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	4619      	mov	r1, r3
 8009a16:	f7fe fdbd 	bl	8008594 <USBD_LL_DataOutStage>
}
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	440b      	add	r3, r1
 8009a42:	333c      	adds	r3, #60	; 0x3c
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f7fe fe14 	bl	8008676 <USBD_LL_DataInStage>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe ff24 	bl	80088b2 <USBD_LL_SOF>
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d001      	beq.n	8009a8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a86:	f7f6 ffae 	bl	80009e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fed4 	bl	8008842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fe8d 	bl	80087c0 <USBD_LL_Reset>
}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe fece 	bl	8008860 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <HAL_PCD_SuspendCallback+0x30>)
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	4a03      	ldr	r2, [pc, #12]	; (8009ae0 <HAL_PCD_SuspendCallback+0x30>)
 8009ad2:	f043 0306 	orr.w	r3, r3, #6
 8009ad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	e000ed00 	.word	0xe000ed00

08009ae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fec8 	bl	8008888 <USBD_LL_Resume>
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b08:	4a28      	ldr	r2, [pc, #160]	; (8009bac <USBD_LL_Init+0xac>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a26      	ldr	r2, [pc, #152]	; (8009bac <USBD_LL_Init+0xac>)
 8009b14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b18:	4b24      	ldr	r3, [pc, #144]	; (8009bac <USBD_LL_Init+0xac>)
 8009b1a:	4a25      	ldr	r2, [pc, #148]	; (8009bb0 <USBD_LL_Init+0xb0>)
 8009b1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b1e:	4b23      	ldr	r3, [pc, #140]	; (8009bac <USBD_LL_Init+0xac>)
 8009b20:	2208      	movs	r2, #8
 8009b22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b24:	4b21      	ldr	r3, [pc, #132]	; (8009bac <USBD_LL_Init+0xac>)
 8009b26:	2202      	movs	r2, #2
 8009b28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b2a:	4b20      	ldr	r3, [pc, #128]	; (8009bac <USBD_LL_Init+0xac>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b30:	4b1e      	ldr	r3, [pc, #120]	; (8009bac <USBD_LL_Init+0xac>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b36:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <USBD_LL_Init+0xac>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b3c:	481b      	ldr	r0, [pc, #108]	; (8009bac <USBD_LL_Init+0xac>)
 8009b3e:	f7f9 fa2f 	bl	8002fa0 <HAL_PCD_Init>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b48:	f7f6 ff4d 	bl	80009e6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b52:	2318      	movs	r3, #24
 8009b54:	2200      	movs	r2, #0
 8009b56:	2100      	movs	r1, #0
 8009b58:	f7fa fd63 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b62:	2358      	movs	r3, #88	; 0x58
 8009b64:	2200      	movs	r2, #0
 8009b66:	2180      	movs	r1, #128	; 0x80
 8009b68:	f7fa fd5b 	bl	8004622 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b72:	23c0      	movs	r3, #192	; 0xc0
 8009b74:	2200      	movs	r2, #0
 8009b76:	2181      	movs	r1, #129	; 0x81
 8009b78:	f7fa fd53 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b86:	2200      	movs	r2, #0
 8009b88:	2101      	movs	r1, #1
 8009b8a:	f7fa fd4a 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2182      	movs	r1, #130	; 0x82
 8009b9c:	f7fa fd41 	bl	8004622 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20005ad4 	.word	0x20005ad4
 8009bb0:	40005c00 	.word	0x40005c00

08009bb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7f9 faf3 	bl	80031b6 <HAL_PCD_Start>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f94e 	bl	8009e78 <USBD_Get_USB_Status>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	70fb      	strb	r3, [r7, #3]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70bb      	strb	r3, [r7, #2]
 8009c00:	4613      	mov	r3, r2
 8009c02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c12:	78bb      	ldrb	r3, [r7, #2]
 8009c14:	883a      	ldrh	r2, [r7, #0]
 8009c16:	78f9      	ldrb	r1, [r7, #3]
 8009c18:	f7f9 fc6d 	bl	80034f6 <HAL_PCD_EP_Open>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f928 	bl	8009e78 <USBD_Get_USB_Status>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7f9 fcb4 	bl	80035c2 <HAL_PCD_EP_Close>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 f909 	bl	8009e78 <USBD_Get_USB_Status>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	4611      	mov	r1, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f9 fd74 	bl	8003780 <HAL_PCD_EP_SetStall>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f8ea 	bl	8009e78 <USBD_Get_USB_Status>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f9 fdb5 	bl	8003840 <HAL_PCD_EP_ClrStall>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f8cb 	bl	8009e78 <USBD_Get_USB_Status>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	da0c      	bge.n	8009d26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	440b      	add	r3, r1
 8009d20:	3302      	adds	r3, #2
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	e00b      	b.n	8009d3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	440b      	add	r3, r1
 8009d38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009d3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d62:	78fa      	ldrb	r2, [r7, #3]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f9 fba0 	bl	80034ac <HAL_PCD_SetAddress>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f880 	bl	8009e78 <USBD_Get_USB_Status>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b086      	sub	sp, #24
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	461a      	mov	r2, r3
 8009d92:	460b      	mov	r3, r1
 8009d94:	72fb      	strb	r3, [r7, #11]
 8009d96:	4613      	mov	r3, r2
 8009d98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009da8:	893b      	ldrh	r3, [r7, #8]
 8009daa:	7af9      	ldrb	r1, [r7, #11]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	f7f9 fca4 	bl	80036fa <HAL_PCD_EP_Transmit>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f85d 	bl	8009e78 <USBD_Get_USB_Status>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	460b      	mov	r3, r1
 8009dda:	72fb      	strb	r3, [r7, #11]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dee:	893b      	ldrh	r3, [r7, #8]
 8009df0:	7af9      	ldrb	r1, [r7, #11]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	f7f9 fc2d 	bl	8003652 <HAL_PCD_EP_Receive>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f83a 	bl	8009e78 <USBD_Get_USB_Status>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	4611      	mov	r1, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7f9 fc4f 	bl	80036cc <HAL_PCD_EP_GetRxCount>
 8009e2e:	4603      	mov	r3, r0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <USBD_static_malloc+0x14>)
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr
 8009e4c:	2000320c 	.word	0x2000320c

08009e50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]

}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr

08009e62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d817      	bhi.n	8009ebc <USBD_Get_USB_Status+0x44>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <USBD_Get_USB_Status+0x1c>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009eab 	.word	0x08009eab
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009eb7 	.word	0x08009eb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea8:	e00b      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	73fb      	strb	r3, [r7, #15]
    break;
 8009eae:	e008      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb4:	e005      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eba:	e002      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	bf00      	nop
  }
  return usb_status;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop

08009ed0 <__errno>:
 8009ed0:	4b01      	ldr	r3, [pc, #4]	; (8009ed8 <__errno+0x8>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	2000017c 	.word	0x2000017c

08009edc <__libc_init_array>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	2500      	movs	r5, #0
 8009ee0:	4e0c      	ldr	r6, [pc, #48]	; (8009f14 <__libc_init_array+0x38>)
 8009ee2:	4c0d      	ldr	r4, [pc, #52]	; (8009f18 <__libc_init_array+0x3c>)
 8009ee4:	1ba4      	subs	r4, r4, r6
 8009ee6:	10a4      	asrs	r4, r4, #2
 8009ee8:	42a5      	cmp	r5, r4
 8009eea:	d109      	bne.n	8009f00 <__libc_init_array+0x24>
 8009eec:	f000 fc34 	bl	800a758 <_init>
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	4e0a      	ldr	r6, [pc, #40]	; (8009f1c <__libc_init_array+0x40>)
 8009ef4:	4c0a      	ldr	r4, [pc, #40]	; (8009f20 <__libc_init_array+0x44>)
 8009ef6:	1ba4      	subs	r4, r4, r6
 8009ef8:	10a4      	asrs	r4, r4, #2
 8009efa:	42a5      	cmp	r5, r4
 8009efc:	d105      	bne.n	8009f0a <__libc_init_array+0x2e>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f04:	4798      	blx	r3
 8009f06:	3501      	adds	r5, #1
 8009f08:	e7ee      	b.n	8009ee8 <__libc_init_array+0xc>
 8009f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f0e:	4798      	blx	r3
 8009f10:	3501      	adds	r5, #1
 8009f12:	e7f2      	b.n	8009efa <__libc_init_array+0x1e>
 8009f14:	0800a89c 	.word	0x0800a89c
 8009f18:	0800a89c 	.word	0x0800a89c
 8009f1c:	0800a89c 	.word	0x0800a89c
 8009f20:	0800a8a0 	.word	0x0800a8a0

08009f24 <memset>:
 8009f24:	4603      	mov	r3, r0
 8009f26:	4402      	add	r2, r0
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d100      	bne.n	8009f2e <memset+0xa>
 8009f2c:	4770      	bx	lr
 8009f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f32:	e7f9      	b.n	8009f28 <memset+0x4>

08009f34 <_vsiprintf_r>:
 8009f34:	b500      	push	{lr}
 8009f36:	b09b      	sub	sp, #108	; 0x6c
 8009f38:	9100      	str	r1, [sp, #0]
 8009f3a:	9104      	str	r1, [sp, #16]
 8009f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f40:	9105      	str	r1, [sp, #20]
 8009f42:	9102      	str	r1, [sp, #8]
 8009f44:	4905      	ldr	r1, [pc, #20]	; (8009f5c <_vsiprintf_r+0x28>)
 8009f46:	9103      	str	r1, [sp, #12]
 8009f48:	4669      	mov	r1, sp
 8009f4a:	f000 f86d 	bl	800a028 <_svfiprintf_r>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	9b00      	ldr	r3, [sp, #0]
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	b01b      	add	sp, #108	; 0x6c
 8009f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f5a:	bf00      	nop
 8009f5c:	ffff0208 	.word	0xffff0208

08009f60 <vsiprintf>:
 8009f60:	4613      	mov	r3, r2
 8009f62:	460a      	mov	r2, r1
 8009f64:	4601      	mov	r1, r0
 8009f66:	4802      	ldr	r0, [pc, #8]	; (8009f70 <vsiprintf+0x10>)
 8009f68:	6800      	ldr	r0, [r0, #0]
 8009f6a:	f7ff bfe3 	b.w	8009f34 <_vsiprintf_r>
 8009f6e:	bf00      	nop
 8009f70:	2000017c 	.word	0x2000017c

08009f74 <__ssputs_r>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	688e      	ldr	r6, [r1, #8]
 8009f7a:	4682      	mov	sl, r0
 8009f7c:	429e      	cmp	r6, r3
 8009f7e:	460c      	mov	r4, r1
 8009f80:	4690      	mov	r8, r2
 8009f82:	4699      	mov	r9, r3
 8009f84:	d837      	bhi.n	8009ff6 <__ssputs_r+0x82>
 8009f86:	898a      	ldrh	r2, [r1, #12]
 8009f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f8c:	d031      	beq.n	8009ff2 <__ssputs_r+0x7e>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	6825      	ldr	r5, [r4, #0]
 8009f92:	6909      	ldr	r1, [r1, #16]
 8009f94:	1a6f      	subs	r7, r5, r1
 8009f96:	6965      	ldr	r5, [r4, #20]
 8009f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009fa0:	f109 0301 	add.w	r3, r9, #1
 8009fa4:	443b      	add	r3, r7
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	bf38      	it	cc
 8009faa:	461d      	movcc	r5, r3
 8009fac:	0553      	lsls	r3, r2, #21
 8009fae:	d530      	bpl.n	800a012 <__ssputs_r+0x9e>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f000 fb37 	bl	800a624 <_malloc_r>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	b950      	cbnz	r0, 8009fd0 <__ssputs_r+0x5c>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	f8ca 3000 	str.w	r3, [sl]
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd0:	463a      	mov	r2, r7
 8009fd2:	6921      	ldr	r1, [r4, #16]
 8009fd4:	f000 fab6 	bl	800a544 <memcpy>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	6126      	str	r6, [r4, #16]
 8009fe6:	443e      	add	r6, r7
 8009fe8:	6026      	str	r6, [r4, #0]
 8009fea:	464e      	mov	r6, r9
 8009fec:	6165      	str	r5, [r4, #20]
 8009fee:	1bed      	subs	r5, r5, r7
 8009ff0:	60a5      	str	r5, [r4, #8]
 8009ff2:	454e      	cmp	r6, r9
 8009ff4:	d900      	bls.n	8009ff8 <__ssputs_r+0x84>
 8009ff6:	464e      	mov	r6, r9
 8009ff8:	4632      	mov	r2, r6
 8009ffa:	4641      	mov	r1, r8
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	f000 faac 	bl	800a55a <memmove>
 800a002:	68a3      	ldr	r3, [r4, #8]
 800a004:	2000      	movs	r0, #0
 800a006:	1b9b      	subs	r3, r3, r6
 800a008:	60a3      	str	r3, [r4, #8]
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	441e      	add	r6, r3
 800a00e:	6026      	str	r6, [r4, #0]
 800a010:	e7dc      	b.n	8009fcc <__ssputs_r+0x58>
 800a012:	462a      	mov	r2, r5
 800a014:	f000 fb60 	bl	800a6d8 <_realloc_r>
 800a018:	4606      	mov	r6, r0
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d1e2      	bne.n	8009fe4 <__ssputs_r+0x70>
 800a01e:	6921      	ldr	r1, [r4, #16]
 800a020:	4650      	mov	r0, sl
 800a022:	f000 fab3 	bl	800a58c <_free_r>
 800a026:	e7c8      	b.n	8009fba <__ssputs_r+0x46>

0800a028 <_svfiprintf_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	461d      	mov	r5, r3
 800a02e:	898b      	ldrh	r3, [r1, #12]
 800a030:	b09d      	sub	sp, #116	; 0x74
 800a032:	061f      	lsls	r7, r3, #24
 800a034:	4680      	mov	r8, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4616      	mov	r6, r2
 800a03a:	d50f      	bpl.n	800a05c <_svfiprintf_r+0x34>
 800a03c:	690b      	ldr	r3, [r1, #16]
 800a03e:	b96b      	cbnz	r3, 800a05c <_svfiprintf_r+0x34>
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	f000 faef 	bl	800a624 <_malloc_r>
 800a046:	6020      	str	r0, [r4, #0]
 800a048:	6120      	str	r0, [r4, #16]
 800a04a:	b928      	cbnz	r0, 800a058 <_svfiprintf_r+0x30>
 800a04c:	230c      	movs	r3, #12
 800a04e:	f8c8 3000 	str.w	r3, [r8]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295
 800a056:	e0c8      	b.n	800a1ea <_svfiprintf_r+0x1c2>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	2300      	movs	r3, #0
 800a05e:	9309      	str	r3, [sp, #36]	; 0x24
 800a060:	2320      	movs	r3, #32
 800a062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a066:	2330      	movs	r3, #48	; 0x30
 800a068:	f04f 0b01 	mov.w	fp, #1
 800a06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a070:	9503      	str	r5, [sp, #12]
 800a072:	4637      	mov	r7, r6
 800a074:	463d      	mov	r5, r7
 800a076:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a07a:	b10b      	cbz	r3, 800a080 <_svfiprintf_r+0x58>
 800a07c:	2b25      	cmp	r3, #37	; 0x25
 800a07e:	d13e      	bne.n	800a0fe <_svfiprintf_r+0xd6>
 800a080:	ebb7 0a06 	subs.w	sl, r7, r6
 800a084:	d00b      	beq.n	800a09e <_svfiprintf_r+0x76>
 800a086:	4653      	mov	r3, sl
 800a088:	4632      	mov	r2, r6
 800a08a:	4621      	mov	r1, r4
 800a08c:	4640      	mov	r0, r8
 800a08e:	f7ff ff71 	bl	8009f74 <__ssputs_r>
 800a092:	3001      	adds	r0, #1
 800a094:	f000 80a4 	beq.w	800a1e0 <_svfiprintf_r+0x1b8>
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	4453      	add	r3, sl
 800a09c:	9309      	str	r3, [sp, #36]	; 0x24
 800a09e:	783b      	ldrb	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 809d 	beq.w	800a1e0 <_svfiprintf_r+0x1b8>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ba:	462f      	mov	r7, r5
 800a0bc:	2205      	movs	r2, #5
 800a0be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a0c2:	4850      	ldr	r0, [pc, #320]	; (800a204 <_svfiprintf_r+0x1dc>)
 800a0c4:	f000 fa30 	bl	800a528 <memchr>
 800a0c8:	9b04      	ldr	r3, [sp, #16]
 800a0ca:	b9d0      	cbnz	r0, 800a102 <_svfiprintf_r+0xda>
 800a0cc:	06d9      	lsls	r1, r3, #27
 800a0ce:	bf44      	itt	mi
 800a0d0:	2220      	movmi	r2, #32
 800a0d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0d6:	071a      	lsls	r2, r3, #28
 800a0d8:	bf44      	itt	mi
 800a0da:	222b      	movmi	r2, #43	; 0x2b
 800a0dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0e0:	782a      	ldrb	r2, [r5, #0]
 800a0e2:	2a2a      	cmp	r2, #42	; 0x2a
 800a0e4:	d015      	beq.n	800a112 <_svfiprintf_r+0xea>
 800a0e6:	462f      	mov	r7, r5
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	250a      	movs	r5, #10
 800a0ec:	9a07      	ldr	r2, [sp, #28]
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f4:	3b30      	subs	r3, #48	; 0x30
 800a0f6:	2b09      	cmp	r3, #9
 800a0f8:	d94d      	bls.n	800a196 <_svfiprintf_r+0x16e>
 800a0fa:	b1b8      	cbz	r0, 800a12c <_svfiprintf_r+0x104>
 800a0fc:	e00f      	b.n	800a11e <_svfiprintf_r+0xf6>
 800a0fe:	462f      	mov	r7, r5
 800a100:	e7b8      	b.n	800a074 <_svfiprintf_r+0x4c>
 800a102:	4a40      	ldr	r2, [pc, #256]	; (800a204 <_svfiprintf_r+0x1dc>)
 800a104:	463d      	mov	r5, r7
 800a106:	1a80      	subs	r0, r0, r2
 800a108:	fa0b f000 	lsl.w	r0, fp, r0
 800a10c:	4318      	orrs	r0, r3
 800a10e:	9004      	str	r0, [sp, #16]
 800a110:	e7d3      	b.n	800a0ba <_svfiprintf_r+0x92>
 800a112:	9a03      	ldr	r2, [sp, #12]
 800a114:	1d11      	adds	r1, r2, #4
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	9103      	str	r1, [sp, #12]
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	db01      	blt.n	800a122 <_svfiprintf_r+0xfa>
 800a11e:	9207      	str	r2, [sp, #28]
 800a120:	e004      	b.n	800a12c <_svfiprintf_r+0x104>
 800a122:	4252      	negs	r2, r2
 800a124:	f043 0302 	orr.w	r3, r3, #2
 800a128:	9207      	str	r2, [sp, #28]
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	783b      	ldrb	r3, [r7, #0]
 800a12e:	2b2e      	cmp	r3, #46	; 0x2e
 800a130:	d10c      	bne.n	800a14c <_svfiprintf_r+0x124>
 800a132:	787b      	ldrb	r3, [r7, #1]
 800a134:	2b2a      	cmp	r3, #42	; 0x2a
 800a136:	d133      	bne.n	800a1a0 <_svfiprintf_r+0x178>
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	3702      	adds	r7, #2
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9203      	str	r2, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfb8      	it	lt
 800a146:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14a:	9305      	str	r3, [sp, #20]
 800a14c:	4d2e      	ldr	r5, [pc, #184]	; (800a208 <_svfiprintf_r+0x1e0>)
 800a14e:	2203      	movs	r2, #3
 800a150:	7839      	ldrb	r1, [r7, #0]
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f9e8 	bl	800a528 <memchr>
 800a158:	b138      	cbz	r0, 800a16a <_svfiprintf_r+0x142>
 800a15a:	2340      	movs	r3, #64	; 0x40
 800a15c:	1b40      	subs	r0, r0, r5
 800a15e:	fa03 f000 	lsl.w	r0, r3, r0
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	3701      	adds	r7, #1
 800a166:	4303      	orrs	r3, r0
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	7839      	ldrb	r1, [r7, #0]
 800a16c:	2206      	movs	r2, #6
 800a16e:	4827      	ldr	r0, [pc, #156]	; (800a20c <_svfiprintf_r+0x1e4>)
 800a170:	1c7e      	adds	r6, r7, #1
 800a172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a176:	f000 f9d7 	bl	800a528 <memchr>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d038      	beq.n	800a1f0 <_svfiprintf_r+0x1c8>
 800a17e:	4b24      	ldr	r3, [pc, #144]	; (800a210 <_svfiprintf_r+0x1e8>)
 800a180:	bb13      	cbnz	r3, 800a1c8 <_svfiprintf_r+0x1a0>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	3307      	adds	r3, #7
 800a186:	f023 0307 	bic.w	r3, r3, #7
 800a18a:	3308      	adds	r3, #8
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	444b      	add	r3, r9
 800a192:	9309      	str	r3, [sp, #36]	; 0x24
 800a194:	e76d      	b.n	800a072 <_svfiprintf_r+0x4a>
 800a196:	fb05 3202 	mla	r2, r5, r2, r3
 800a19a:	2001      	movs	r0, #1
 800a19c:	460f      	mov	r7, r1
 800a19e:	e7a6      	b.n	800a0ee <_svfiprintf_r+0xc6>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	250a      	movs	r5, #10
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	3701      	adds	r7, #1
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b0:	3a30      	subs	r2, #48	; 0x30
 800a1b2:	2a09      	cmp	r2, #9
 800a1b4:	d903      	bls.n	800a1be <_svfiprintf_r+0x196>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0c8      	beq.n	800a14c <_svfiprintf_r+0x124>
 800a1ba:	9105      	str	r1, [sp, #20]
 800a1bc:	e7c6      	b.n	800a14c <_svfiprintf_r+0x124>
 800a1be:	fb05 2101 	mla	r1, r5, r1, r2
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	e7f0      	b.n	800a1aa <_svfiprintf_r+0x182>
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4b11      	ldr	r3, [pc, #68]	; (800a214 <_svfiprintf_r+0x1ec>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1dc:	4681      	mov	r9, r0
 800a1de:	d1d6      	bne.n	800a18e <_svfiprintf_r+0x166>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	065b      	lsls	r3, r3, #25
 800a1e4:	f53f af35 	bmi.w	800a052 <_svfiprintf_r+0x2a>
 800a1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ea:	b01d      	add	sp, #116	; 0x74
 800a1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f0:	ab03      	add	r3, sp, #12
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4b07      	ldr	r3, [pc, #28]	; (800a214 <_svfiprintf_r+0x1ec>)
 800a1f8:	a904      	add	r1, sp, #16
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f000 f882 	bl	800a304 <_printf_i>
 800a200:	e7ea      	b.n	800a1d8 <_svfiprintf_r+0x1b0>
 800a202:	bf00      	nop
 800a204:	0800a868 	.word	0x0800a868
 800a208:	0800a86e 	.word	0x0800a86e
 800a20c:	0800a872 	.word	0x0800a872
 800a210:	00000000 	.word	0x00000000
 800a214:	08009f75 	.word	0x08009f75

0800a218 <_printf_common>:
 800a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a21c:	4691      	mov	r9, r2
 800a21e:	461f      	mov	r7, r3
 800a220:	688a      	ldr	r2, [r1, #8]
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	4606      	mov	r6, r0
 800a226:	4293      	cmp	r3, r2
 800a228:	bfb8      	it	lt
 800a22a:	4613      	movlt	r3, r2
 800a22c:	f8c9 3000 	str.w	r3, [r9]
 800a230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a234:	460c      	mov	r4, r1
 800a236:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a23a:	b112      	cbz	r2, 800a242 <_printf_common+0x2a>
 800a23c:	3301      	adds	r3, #1
 800a23e:	f8c9 3000 	str.w	r3, [r9]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	0699      	lsls	r1, r3, #26
 800a246:	bf42      	ittt	mi
 800a248:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a24c:	3302      	addmi	r3, #2
 800a24e:	f8c9 3000 	strmi.w	r3, [r9]
 800a252:	6825      	ldr	r5, [r4, #0]
 800a254:	f015 0506 	ands.w	r5, r5, #6
 800a258:	d107      	bne.n	800a26a <_printf_common+0x52>
 800a25a:	f104 0a19 	add.w	sl, r4, #25
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	f8d9 2000 	ldr.w	r2, [r9]
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	42ab      	cmp	r3, r5
 800a268:	dc29      	bgt.n	800a2be <_printf_common+0xa6>
 800a26a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a26e:	6822      	ldr	r2, [r4, #0]
 800a270:	3300      	adds	r3, #0
 800a272:	bf18      	it	ne
 800a274:	2301      	movne	r3, #1
 800a276:	0692      	lsls	r2, r2, #26
 800a278:	d42e      	bmi.n	800a2d8 <_printf_common+0xc0>
 800a27a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a27e:	4639      	mov	r1, r7
 800a280:	4630      	mov	r0, r6
 800a282:	47c0      	blx	r8
 800a284:	3001      	adds	r0, #1
 800a286:	d021      	beq.n	800a2cc <_printf_common+0xb4>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	68e5      	ldr	r5, [r4, #12]
 800a28c:	f003 0306 	and.w	r3, r3, #6
 800a290:	2b04      	cmp	r3, #4
 800a292:	bf18      	it	ne
 800a294:	2500      	movne	r5, #0
 800a296:	f8d9 2000 	ldr.w	r2, [r9]
 800a29a:	f04f 0900 	mov.w	r9, #0
 800a29e:	bf08      	it	eq
 800a2a0:	1aad      	subeq	r5, r5, r2
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	bf08      	it	eq
 800a2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfc4      	itt	gt
 800a2b0:	1a9b      	subgt	r3, r3, r2
 800a2b2:	18ed      	addgt	r5, r5, r3
 800a2b4:	341a      	adds	r4, #26
 800a2b6:	454d      	cmp	r5, r9
 800a2b8:	d11a      	bne.n	800a2f0 <_printf_common+0xd8>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e008      	b.n	800a2d0 <_printf_common+0xb8>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	47c0      	blx	r8
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d103      	bne.n	800a2d4 <_printf_common+0xbc>
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	e7c2      	b.n	800a25e <_printf_common+0x46>
 800a2d8:	2030      	movs	r0, #48	; 0x30
 800a2da:	18e1      	adds	r1, r4, r3
 800a2dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2e6:	4422      	add	r2, r4
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2ee:	e7c4      	b.n	800a27a <_printf_common+0x62>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	47c0      	blx	r8
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d0e6      	beq.n	800a2cc <_printf_common+0xb4>
 800a2fe:	f109 0901 	add.w	r9, r9, #1
 800a302:	e7d8      	b.n	800a2b6 <_printf_common+0x9e>

0800a304 <_printf_i>:
 800a304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a30c:	460c      	mov	r4, r1
 800a30e:	7e09      	ldrb	r1, [r1, #24]
 800a310:	b085      	sub	sp, #20
 800a312:	296e      	cmp	r1, #110	; 0x6e
 800a314:	4617      	mov	r7, r2
 800a316:	4606      	mov	r6, r0
 800a318:	4698      	mov	r8, r3
 800a31a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a31c:	f000 80b3 	beq.w	800a486 <_printf_i+0x182>
 800a320:	d822      	bhi.n	800a368 <_printf_i+0x64>
 800a322:	2963      	cmp	r1, #99	; 0x63
 800a324:	d036      	beq.n	800a394 <_printf_i+0x90>
 800a326:	d80a      	bhi.n	800a33e <_printf_i+0x3a>
 800a328:	2900      	cmp	r1, #0
 800a32a:	f000 80b9 	beq.w	800a4a0 <_printf_i+0x19c>
 800a32e:	2958      	cmp	r1, #88	; 0x58
 800a330:	f000 8083 	beq.w	800a43a <_printf_i+0x136>
 800a334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a33c:	e032      	b.n	800a3a4 <_printf_i+0xa0>
 800a33e:	2964      	cmp	r1, #100	; 0x64
 800a340:	d001      	beq.n	800a346 <_printf_i+0x42>
 800a342:	2969      	cmp	r1, #105	; 0x69
 800a344:	d1f6      	bne.n	800a334 <_printf_i+0x30>
 800a346:	6820      	ldr	r0, [r4, #0]
 800a348:	6813      	ldr	r3, [r2, #0]
 800a34a:	0605      	lsls	r5, r0, #24
 800a34c:	f103 0104 	add.w	r1, r3, #4
 800a350:	d52a      	bpl.n	800a3a8 <_printf_i+0xa4>
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	da03      	bge.n	800a362 <_printf_i+0x5e>
 800a35a:	222d      	movs	r2, #45	; 0x2d
 800a35c:	425b      	negs	r3, r3
 800a35e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a362:	486f      	ldr	r0, [pc, #444]	; (800a520 <_printf_i+0x21c>)
 800a364:	220a      	movs	r2, #10
 800a366:	e039      	b.n	800a3dc <_printf_i+0xd8>
 800a368:	2973      	cmp	r1, #115	; 0x73
 800a36a:	f000 809d 	beq.w	800a4a8 <_printf_i+0x1a4>
 800a36e:	d808      	bhi.n	800a382 <_printf_i+0x7e>
 800a370:	296f      	cmp	r1, #111	; 0x6f
 800a372:	d020      	beq.n	800a3b6 <_printf_i+0xb2>
 800a374:	2970      	cmp	r1, #112	; 0x70
 800a376:	d1dd      	bne.n	800a334 <_printf_i+0x30>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	f043 0320 	orr.w	r3, r3, #32
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	e003      	b.n	800a38a <_printf_i+0x86>
 800a382:	2975      	cmp	r1, #117	; 0x75
 800a384:	d017      	beq.n	800a3b6 <_printf_i+0xb2>
 800a386:	2978      	cmp	r1, #120	; 0x78
 800a388:	d1d4      	bne.n	800a334 <_printf_i+0x30>
 800a38a:	2378      	movs	r3, #120	; 0x78
 800a38c:	4865      	ldr	r0, [pc, #404]	; (800a524 <_printf_i+0x220>)
 800a38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a392:	e055      	b.n	800a440 <_printf_i+0x13c>
 800a394:	6813      	ldr	r3, [r2, #0]
 800a396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a39a:	1d19      	adds	r1, r3, #4
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6011      	str	r1, [r2, #0]
 800a3a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e08c      	b.n	800a4c2 <_printf_i+0x1be>
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3ae:	6011      	str	r1, [r2, #0]
 800a3b0:	bf18      	it	ne
 800a3b2:	b21b      	sxthne	r3, r3
 800a3b4:	e7cf      	b.n	800a356 <_printf_i+0x52>
 800a3b6:	6813      	ldr	r3, [r2, #0]
 800a3b8:	6825      	ldr	r5, [r4, #0]
 800a3ba:	1d18      	adds	r0, r3, #4
 800a3bc:	6010      	str	r0, [r2, #0]
 800a3be:	0628      	lsls	r0, r5, #24
 800a3c0:	d501      	bpl.n	800a3c6 <_printf_i+0xc2>
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	e002      	b.n	800a3cc <_printf_i+0xc8>
 800a3c6:	0668      	lsls	r0, r5, #25
 800a3c8:	d5fb      	bpl.n	800a3c2 <_printf_i+0xbe>
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	296f      	cmp	r1, #111	; 0x6f
 800a3ce:	bf14      	ite	ne
 800a3d0:	220a      	movne	r2, #10
 800a3d2:	2208      	moveq	r2, #8
 800a3d4:	4852      	ldr	r0, [pc, #328]	; (800a520 <_printf_i+0x21c>)
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3dc:	6865      	ldr	r5, [r4, #4]
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	60a5      	str	r5, [r4, #8]
 800a3e2:	f2c0 8095 	blt.w	800a510 <_printf_i+0x20c>
 800a3e6:	6821      	ldr	r1, [r4, #0]
 800a3e8:	f021 0104 	bic.w	r1, r1, #4
 800a3ec:	6021      	str	r1, [r4, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d13d      	bne.n	800a46e <_printf_i+0x16a>
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	f040 808e 	bne.w	800a514 <_printf_i+0x210>
 800a3f8:	4665      	mov	r5, ip
 800a3fa:	2a08      	cmp	r2, #8
 800a3fc:	d10b      	bne.n	800a416 <_printf_i+0x112>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	07db      	lsls	r3, r3, #31
 800a402:	d508      	bpl.n	800a416 <_printf_i+0x112>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	6862      	ldr	r2, [r4, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	bfde      	ittt	le
 800a40c:	2330      	movle	r3, #48	; 0x30
 800a40e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a412:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a416:	ebac 0305 	sub.w	r3, ip, r5
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	f8cd 8000 	str.w	r8, [sp]
 800a420:	463b      	mov	r3, r7
 800a422:	aa03      	add	r2, sp, #12
 800a424:	4621      	mov	r1, r4
 800a426:	4630      	mov	r0, r6
 800a428:	f7ff fef6 	bl	800a218 <_printf_common>
 800a42c:	3001      	adds	r0, #1
 800a42e:	d14d      	bne.n	800a4cc <_printf_i+0x1c8>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
 800a434:	b005      	add	sp, #20
 800a436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a43a:	4839      	ldr	r0, [pc, #228]	; (800a520 <_printf_i+0x21c>)
 800a43c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a440:	6813      	ldr	r3, [r2, #0]
 800a442:	6821      	ldr	r1, [r4, #0]
 800a444:	1d1d      	adds	r5, r3, #4
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6015      	str	r5, [r2, #0]
 800a44a:	060a      	lsls	r2, r1, #24
 800a44c:	d50b      	bpl.n	800a466 <_printf_i+0x162>
 800a44e:	07ca      	lsls	r2, r1, #31
 800a450:	bf44      	itt	mi
 800a452:	f041 0120 	orrmi.w	r1, r1, #32
 800a456:	6021      	strmi	r1, [r4, #0]
 800a458:	b91b      	cbnz	r3, 800a462 <_printf_i+0x15e>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	f022 0220 	bic.w	r2, r2, #32
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	2210      	movs	r2, #16
 800a464:	e7b7      	b.n	800a3d6 <_printf_i+0xd2>
 800a466:	064d      	lsls	r5, r1, #25
 800a468:	bf48      	it	mi
 800a46a:	b29b      	uxthmi	r3, r3
 800a46c:	e7ef      	b.n	800a44e <_printf_i+0x14a>
 800a46e:	4665      	mov	r5, ip
 800a470:	fbb3 f1f2 	udiv	r1, r3, r2
 800a474:	fb02 3311 	mls	r3, r2, r1, r3
 800a478:	5cc3      	ldrb	r3, [r0, r3]
 800a47a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a47e:	460b      	mov	r3, r1
 800a480:	2900      	cmp	r1, #0
 800a482:	d1f5      	bne.n	800a470 <_printf_i+0x16c>
 800a484:	e7b9      	b.n	800a3fa <_printf_i+0xf6>
 800a486:	6813      	ldr	r3, [r2, #0]
 800a488:	6825      	ldr	r5, [r4, #0]
 800a48a:	1d18      	adds	r0, r3, #4
 800a48c:	6961      	ldr	r1, [r4, #20]
 800a48e:	6010      	str	r0, [r2, #0]
 800a490:	0628      	lsls	r0, r5, #24
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	d501      	bpl.n	800a49a <_printf_i+0x196>
 800a496:	6019      	str	r1, [r3, #0]
 800a498:	e002      	b.n	800a4a0 <_printf_i+0x19c>
 800a49a:	066a      	lsls	r2, r5, #25
 800a49c:	d5fb      	bpl.n	800a496 <_printf_i+0x192>
 800a49e:	8019      	strh	r1, [r3, #0]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4665      	mov	r5, ip
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	e7b9      	b.n	800a41c <_printf_i+0x118>
 800a4a8:	6813      	ldr	r3, [r2, #0]
 800a4aa:	1d19      	adds	r1, r3, #4
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	681d      	ldr	r5, [r3, #0]
 800a4b0:	6862      	ldr	r2, [r4, #4]
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f837 	bl	800a528 <memchr>
 800a4ba:	b108      	cbz	r0, 800a4c0 <_printf_i+0x1bc>
 800a4bc:	1b40      	subs	r0, r0, r5
 800a4be:	6060      	str	r0, [r4, #4]
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	6123      	str	r3, [r4, #16]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ca:	e7a7      	b.n	800a41c <_printf_i+0x118>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	462a      	mov	r2, r5
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d0aa      	beq.n	800a430 <_printf_i+0x12c>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	079b      	lsls	r3, r3, #30
 800a4de:	d413      	bmi.n	800a508 <_printf_i+0x204>
 800a4e0:	68e0      	ldr	r0, [r4, #12]
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	4298      	cmp	r0, r3
 800a4e6:	bfb8      	it	lt
 800a4e8:	4618      	movlt	r0, r3
 800a4ea:	e7a3      	b.n	800a434 <_printf_i+0x130>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	464a      	mov	r2, r9
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	47c0      	blx	r8
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d09a      	beq.n	800a430 <_printf_i+0x12c>
 800a4fa:	3501      	adds	r5, #1
 800a4fc:	68e3      	ldr	r3, [r4, #12]
 800a4fe:	9a03      	ldr	r2, [sp, #12]
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	42ab      	cmp	r3, r5
 800a504:	dcf2      	bgt.n	800a4ec <_printf_i+0x1e8>
 800a506:	e7eb      	b.n	800a4e0 <_printf_i+0x1dc>
 800a508:	2500      	movs	r5, #0
 800a50a:	f104 0919 	add.w	r9, r4, #25
 800a50e:	e7f5      	b.n	800a4fc <_printf_i+0x1f8>
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1ac      	bne.n	800a46e <_printf_i+0x16a>
 800a514:	7803      	ldrb	r3, [r0, #0]
 800a516:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a51a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a51e:	e76c      	b.n	800a3fa <_printf_i+0xf6>
 800a520:	0800a879 	.word	0x0800a879
 800a524:	0800a88a 	.word	0x0800a88a

0800a528 <memchr>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	b2c9      	uxtb	r1, r1
 800a52c:	4402      	add	r2, r0
 800a52e:	4290      	cmp	r0, r2
 800a530:	4603      	mov	r3, r0
 800a532:	d101      	bne.n	800a538 <memchr+0x10>
 800a534:	2300      	movs	r3, #0
 800a536:	e003      	b.n	800a540 <memchr+0x18>
 800a538:	781c      	ldrb	r4, [r3, #0]
 800a53a:	3001      	adds	r0, #1
 800a53c:	428c      	cmp	r4, r1
 800a53e:	d1f6      	bne.n	800a52e <memchr+0x6>
 800a540:	4618      	mov	r0, r3
 800a542:	bd10      	pop	{r4, pc}

0800a544 <memcpy>:
 800a544:	b510      	push	{r4, lr}
 800a546:	1e43      	subs	r3, r0, #1
 800a548:	440a      	add	r2, r1
 800a54a:	4291      	cmp	r1, r2
 800a54c:	d100      	bne.n	800a550 <memcpy+0xc>
 800a54e:	bd10      	pop	{r4, pc}
 800a550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	e7f7      	b.n	800a54a <memcpy+0x6>

0800a55a <memmove>:
 800a55a:	4288      	cmp	r0, r1
 800a55c:	b510      	push	{r4, lr}
 800a55e:	eb01 0302 	add.w	r3, r1, r2
 800a562:	d807      	bhi.n	800a574 <memmove+0x1a>
 800a564:	1e42      	subs	r2, r0, #1
 800a566:	4299      	cmp	r1, r3
 800a568:	d00a      	beq.n	800a580 <memmove+0x26>
 800a56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a572:	e7f8      	b.n	800a566 <memmove+0xc>
 800a574:	4283      	cmp	r3, r0
 800a576:	d9f5      	bls.n	800a564 <memmove+0xa>
 800a578:	1881      	adds	r1, r0, r2
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	42d3      	cmn	r3, r2
 800a57e:	d100      	bne.n	800a582 <memmove+0x28>
 800a580:	bd10      	pop	{r4, pc}
 800a582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a58a:	e7f7      	b.n	800a57c <memmove+0x22>

0800a58c <_free_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4605      	mov	r5, r0
 800a590:	2900      	cmp	r1, #0
 800a592:	d043      	beq.n	800a61c <_free_r+0x90>
 800a594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a598:	1f0c      	subs	r4, r1, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfb8      	it	lt
 800a59e:	18e4      	addlt	r4, r4, r3
 800a5a0:	f000 f8d0 	bl	800a744 <__malloc_lock>
 800a5a4:	4a1e      	ldr	r2, [pc, #120]	; (800a620 <_free_r+0x94>)
 800a5a6:	6813      	ldr	r3, [r2, #0]
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	b933      	cbnz	r3, 800a5ba <_free_r+0x2e>
 800a5ac:	6063      	str	r3, [r4, #4]
 800a5ae:	6014      	str	r4, [r2, #0]
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b6:	f000 b8c6 	b.w	800a746 <__malloc_unlock>
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	d90b      	bls.n	800a5d6 <_free_r+0x4a>
 800a5be:	6821      	ldr	r1, [r4, #0]
 800a5c0:	1862      	adds	r2, r4, r1
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	bf01      	itttt	eq
 800a5c6:	681a      	ldreq	r2, [r3, #0]
 800a5c8:	685b      	ldreq	r3, [r3, #4]
 800a5ca:	1852      	addeq	r2, r2, r1
 800a5cc:	6022      	streq	r2, [r4, #0]
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	6004      	str	r4, [r0, #0]
 800a5d2:	e7ed      	b.n	800a5b0 <_free_r+0x24>
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	b10a      	cbz	r2, 800a5de <_free_r+0x52>
 800a5da:	42a2      	cmp	r2, r4
 800a5dc:	d9fa      	bls.n	800a5d4 <_free_r+0x48>
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	1858      	adds	r0, r3, r1
 800a5e2:	42a0      	cmp	r0, r4
 800a5e4:	d10b      	bne.n	800a5fe <_free_r+0x72>
 800a5e6:	6820      	ldr	r0, [r4, #0]
 800a5e8:	4401      	add	r1, r0
 800a5ea:	1858      	adds	r0, r3, r1
 800a5ec:	4282      	cmp	r2, r0
 800a5ee:	6019      	str	r1, [r3, #0]
 800a5f0:	d1de      	bne.n	800a5b0 <_free_r+0x24>
 800a5f2:	6810      	ldr	r0, [r2, #0]
 800a5f4:	6852      	ldr	r2, [r2, #4]
 800a5f6:	4401      	add	r1, r0
 800a5f8:	6019      	str	r1, [r3, #0]
 800a5fa:	605a      	str	r2, [r3, #4]
 800a5fc:	e7d8      	b.n	800a5b0 <_free_r+0x24>
 800a5fe:	d902      	bls.n	800a606 <_free_r+0x7a>
 800a600:	230c      	movs	r3, #12
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	e7d4      	b.n	800a5b0 <_free_r+0x24>
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1821      	adds	r1, r4, r0
 800a60a:	428a      	cmp	r2, r1
 800a60c:	bf01      	itttt	eq
 800a60e:	6811      	ldreq	r1, [r2, #0]
 800a610:	6852      	ldreq	r2, [r2, #4]
 800a612:	1809      	addeq	r1, r1, r0
 800a614:	6021      	streq	r1, [r4, #0]
 800a616:	6062      	str	r2, [r4, #4]
 800a618:	605c      	str	r4, [r3, #4]
 800a61a:	e7c9      	b.n	800a5b0 <_free_r+0x24>
 800a61c:	bd38      	pop	{r3, r4, r5, pc}
 800a61e:	bf00      	nop
 800a620:	2000342c 	.word	0x2000342c

0800a624 <_malloc_r>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	1ccd      	adds	r5, r1, #3
 800a628:	f025 0503 	bic.w	r5, r5, #3
 800a62c:	3508      	adds	r5, #8
 800a62e:	2d0c      	cmp	r5, #12
 800a630:	bf38      	it	cc
 800a632:	250c      	movcc	r5, #12
 800a634:	2d00      	cmp	r5, #0
 800a636:	4606      	mov	r6, r0
 800a638:	db01      	blt.n	800a63e <_malloc_r+0x1a>
 800a63a:	42a9      	cmp	r1, r5
 800a63c:	d903      	bls.n	800a646 <_malloc_r+0x22>
 800a63e:	230c      	movs	r3, #12
 800a640:	6033      	str	r3, [r6, #0]
 800a642:	2000      	movs	r0, #0
 800a644:	bd70      	pop	{r4, r5, r6, pc}
 800a646:	f000 f87d 	bl	800a744 <__malloc_lock>
 800a64a:	4a21      	ldr	r2, [pc, #132]	; (800a6d0 <_malloc_r+0xac>)
 800a64c:	6814      	ldr	r4, [r2, #0]
 800a64e:	4621      	mov	r1, r4
 800a650:	b991      	cbnz	r1, 800a678 <_malloc_r+0x54>
 800a652:	4c20      	ldr	r4, [pc, #128]	; (800a6d4 <_malloc_r+0xb0>)
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	b91b      	cbnz	r3, 800a660 <_malloc_r+0x3c>
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f863 	bl	800a724 <_sbrk_r>
 800a65e:	6020      	str	r0, [r4, #0]
 800a660:	4629      	mov	r1, r5
 800a662:	4630      	mov	r0, r6
 800a664:	f000 f85e 	bl	800a724 <_sbrk_r>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d124      	bne.n	800a6b6 <_malloc_r+0x92>
 800a66c:	230c      	movs	r3, #12
 800a66e:	4630      	mov	r0, r6
 800a670:	6033      	str	r3, [r6, #0]
 800a672:	f000 f868 	bl	800a746 <__malloc_unlock>
 800a676:	e7e4      	b.n	800a642 <_malloc_r+0x1e>
 800a678:	680b      	ldr	r3, [r1, #0]
 800a67a:	1b5b      	subs	r3, r3, r5
 800a67c:	d418      	bmi.n	800a6b0 <_malloc_r+0x8c>
 800a67e:	2b0b      	cmp	r3, #11
 800a680:	d90f      	bls.n	800a6a2 <_malloc_r+0x7e>
 800a682:	600b      	str	r3, [r1, #0]
 800a684:	18cc      	adds	r4, r1, r3
 800a686:	50cd      	str	r5, [r1, r3]
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f85c 	bl	800a746 <__malloc_unlock>
 800a68e:	f104 000b 	add.w	r0, r4, #11
 800a692:	1d23      	adds	r3, r4, #4
 800a694:	f020 0007 	bic.w	r0, r0, #7
 800a698:	1ac3      	subs	r3, r0, r3
 800a69a:	d0d3      	beq.n	800a644 <_malloc_r+0x20>
 800a69c:	425a      	negs	r2, r3
 800a69e:	50e2      	str	r2, [r4, r3]
 800a6a0:	e7d0      	b.n	800a644 <_malloc_r+0x20>
 800a6a2:	684b      	ldr	r3, [r1, #4]
 800a6a4:	428c      	cmp	r4, r1
 800a6a6:	bf16      	itet	ne
 800a6a8:	6063      	strne	r3, [r4, #4]
 800a6aa:	6013      	streq	r3, [r2, #0]
 800a6ac:	460c      	movne	r4, r1
 800a6ae:	e7eb      	b.n	800a688 <_malloc_r+0x64>
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	6849      	ldr	r1, [r1, #4]
 800a6b4:	e7cc      	b.n	800a650 <_malloc_r+0x2c>
 800a6b6:	1cc4      	adds	r4, r0, #3
 800a6b8:	f024 0403 	bic.w	r4, r4, #3
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d005      	beq.n	800a6cc <_malloc_r+0xa8>
 800a6c0:	1a21      	subs	r1, r4, r0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f000 f82e 	bl	800a724 <_sbrk_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d0cf      	beq.n	800a66c <_malloc_r+0x48>
 800a6cc:	6025      	str	r5, [r4, #0]
 800a6ce:	e7db      	b.n	800a688 <_malloc_r+0x64>
 800a6d0:	2000342c 	.word	0x2000342c
 800a6d4:	20003430 	.word	0x20003430

0800a6d8 <_realloc_r>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	4607      	mov	r7, r0
 800a6dc:	4614      	mov	r4, r2
 800a6de:	460e      	mov	r6, r1
 800a6e0:	b921      	cbnz	r1, 800a6ec <_realloc_r+0x14>
 800a6e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	f7ff bf9c 	b.w	800a624 <_malloc_r>
 800a6ec:	b922      	cbnz	r2, 800a6f8 <_realloc_r+0x20>
 800a6ee:	f7ff ff4d 	bl	800a58c <_free_r>
 800a6f2:	4625      	mov	r5, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f8:	f000 f826 	bl	800a748 <_malloc_usable_size_r>
 800a6fc:	42a0      	cmp	r0, r4
 800a6fe:	d20f      	bcs.n	800a720 <_realloc_r+0x48>
 800a700:	4621      	mov	r1, r4
 800a702:	4638      	mov	r0, r7
 800a704:	f7ff ff8e 	bl	800a624 <_malloc_r>
 800a708:	4605      	mov	r5, r0
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0f2      	beq.n	800a6f4 <_realloc_r+0x1c>
 800a70e:	4631      	mov	r1, r6
 800a710:	4622      	mov	r2, r4
 800a712:	f7ff ff17 	bl	800a544 <memcpy>
 800a716:	4631      	mov	r1, r6
 800a718:	4638      	mov	r0, r7
 800a71a:	f7ff ff37 	bl	800a58c <_free_r>
 800a71e:	e7e9      	b.n	800a6f4 <_realloc_r+0x1c>
 800a720:	4635      	mov	r5, r6
 800a722:	e7e7      	b.n	800a6f4 <_realloc_r+0x1c>

0800a724 <_sbrk_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4c05      	ldr	r4, [pc, #20]	; (800a740 <_sbrk_r+0x1c>)
 800a72a:	4605      	mov	r5, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	6023      	str	r3, [r4, #0]
 800a730:	f7f7 f876 	bl	8001820 <_sbrk>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_sbrk_r+0x1a>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_sbrk_r+0x1a>
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	20005dc0 	.word	0x20005dc0

0800a744 <__malloc_lock>:
 800a744:	4770      	bx	lr

0800a746 <__malloc_unlock>:
 800a746:	4770      	bx	lr

0800a748 <_malloc_usable_size_r>:
 800a748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a74c:	1f18      	subs	r0, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bfbc      	itt	lt
 800a752:	580b      	ldrlt	r3, [r1, r0]
 800a754:	18c0      	addlt	r0, r0, r3
 800a756:	4770      	bx	lr

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
